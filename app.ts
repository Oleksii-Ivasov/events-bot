import { Scenes, Telegraf } from 'telegraf';
import { SceneGenerator } from './src/scenes/scenes';
import { MySceneContext } from './src/models/context.interface';
import LocalSession from 'telegraf-session-local';
import { IConfigService } from './src/models/config.interface';
import { ConfigService } from './src/config/config.service';
import { MongoClient, ServerApiVersion } from 'mongodb';
const uri =
  'mongodb+srv://admin:jW5z6rzfvoL6SuDR@cluster0.ikklltu.mongodb.net/?retryWrites=true&w=majority';

const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  },
});

async function run() {
  try {
    await client.connect();
    await client.db('cluster0').command({ ping: 1 });
    console.log(
      'Pinged your deployment. You successfully connected to MongoDB!'
    );
  } finally {
    await client.close();
  }
}
run().catch(console.dir);

class Bot {
  bot: Telegraf<MySceneContext>;
  sceneGenerator = new SceneGenerator(client, this.configService);
  stage = new Scenes.Stage<MySceneContext>(
    [
      this.sceneGenerator.greetingScene(),
      this.sceneGenerator.nameScene(),
      this.sceneGenerator.ageScene(),
      this.sceneGenerator.genderScene(),
      this.sceneGenerator.lookingForScene(),
      this.sceneGenerator.AboutScene(),
      this.sceneGenerator.locationScene(),
      this.sceneGenerator.photoScene(),
      this.sceneGenerator.eventMenuScene(),
      this.sceneGenerator.eventNameScene(),
      this.sceneGenerator.eventTimeScene(),
      this.sceneGenerator.eventAboutScene(),
      this.sceneGenerator.eventAgeRangeScene(),
      this.sceneGenerator.userEventListScene(),
      this.sceneGenerator.userFormScene(),
    ],
    {
      ttl: 3600,
    }
  );

  constructor(private readonly configService: IConfigService) {
    this.bot = new Telegraf(this.configService.get('TOKEN'));
    this.bot.use(new LocalSession({ database: 'sessions.json' }).middleware());
    this.bot.use(this.stage.middleware());
    this.bot.command('start', async (ctx) => {
      await ctx.reply(`–í—ñ—Ç–∞—î–º–æ –≤ –∫–æ–º'—é–Ω—ñ—Ç—ñ –î–∞–π –í–∏–Ω–Ω–∏–∫–∞! üëã
          
üë© –î–∞–π –í–∏–Ω–Ω–∏–∫ ‚Äî –Ω–µ–∑–≤–∏—á–∞–π–Ω–∏–π –±–æ—Ç, —è–∫–∏–π –Ω–∞–ø–æ–≤–Ω–∏—Ç—å —Ç–≤–æ—î –∂–∏—Ç—Ç—è –ø—Ä–∏—î–º–Ω–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏. –í—ñ–Ω –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –Ω–∞ —è–∫—É—Å—å –ø–æ–¥—ñ—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É, –∞ —Ç–∞–∫–æ–∂ –∑–Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É –ø–æ–ª–æ–≤–∏–Ω–∫—É, –¥—Ä—É–≥–∞ –∞–±–æ –ø–æ–¥—Ä—É–≥—É!
                  
ü´Ç –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∑–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ–≥–æ –±–æ—Ç—É –ø–ª–∞–Ω—É—î—Ç—å—Å—è 25 —Å–µ—Ä–ø–Ω—è. –ü—Ä–æ—Ç–µ —Ç–∏ –≤–∂–µ –º–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –π –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å. –ú—ñ—Ü–Ω–æ –æ–±—ñ–π–Ω—è–ª–∏ —Ç–µ–±–µ`);
      await ctx.scene.enter('greeting');
    });
    this.bot.command('events', async (ctx) => {
      await ctx.scene.enter('userEvents');
    });
    this.bot.command('profile', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    this.bot.on('message', (ctx) => ctx.reply('–°–ø—Ä–æ–±—É–π /start'));
  }

  init() {
    this.bot.launch();
  }
}

const bot = new Bot(new ConfigService());

bot.init();
