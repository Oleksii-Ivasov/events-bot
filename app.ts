import { Markup, Scenes, Telegraf } from 'telegraf';
import { SceneGenerator } from './src/scenes/scenes';
import { MySceneContext } from './src/models/context.interface';
import LocalSession from 'telegraf-session-local';
import { IConfigService } from './src/models/config.interface';
import { ConfigService } from './src/config/config.service';
import { MongoClient, ServerApiVersion } from 'mongodb';
import express from 'express';
const configService = new ConfigService();
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const app = express();
const uri = configService.get('DB_KEY');
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  },
});

async function run() {
  try {
    await client.connect();
    const db = client.db('cluster0');
    await db.command({ ping: 1 });
    console.log(
      'Pinged your deployment. You successfully connected to MongoDB!'
    );
    await db
      .collection('viewed_profiles')
      .createIndex({ expiryTimestamp: 1 }, { expireAfterSeconds: 0 });
  } finally {
    await client.close();
  }
}
run().catch(console.dir);

class Bot {
  bot: Telegraf<MySceneContext>;
  sceneGenerator = new SceneGenerator(client, this.configService);
  stage = new Scenes.Stage<MySceneContext>(
    [
      this.sceneGenerator.greetingScene(),
      this.sceneGenerator.nameScene(),
      this.sceneGenerator.ageScene(),
      this.sceneGenerator.genderScene(),
      this.sceneGenerator.lookingForScene(),
      this.sceneGenerator.AboutScene(),
      this.sceneGenerator.locationScene(),
      this.sceneGenerator.photoScene(),
      this.sceneGenerator.eventMenuScene(),
      this.sceneGenerator.eventNameScene(),
      this.sceneGenerator.eventTimeScene(),
      this.sceneGenerator.eventAboutScene(),
      this.sceneGenerator.eventLookigForScene(),
      // this.sceneGenerator.eventAgeRangeScene(),
      this.sceneGenerator.eventListScene(),
      this.sceneGenerator.lookForMatchScene(),
      this.sceneGenerator.userFormScene(),
      this.sceneGenerator.userFormEditScene(),
    ],
    {
      ttl: 2592000,
    }
  );

  constructor(private readonly configService: IConfigService) {
    this.bot = new Telegraf(this.configService.get('TOKEN'));
    this.bot.use(new LocalSession({ database: 'sessions.json' }).middleware());
    this.bot.use(this.stage.middleware());
    app.use(express.json());
    app.get('/', (req, res) => {
      res.send('Hello, this is your Express app!');
    });
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });
    this.bot.command('start', async (ctx) => {
      await ctx.reply(`–í—ñ—Ç–∞—î–º–æ –≤ –∫–æ–º'—é–Ω—ñ—Ç—ñ –î–∞–π –í–∏–Ω–Ω–∏–∫–∞! üëãüèª

üßîüèº‚Äç‚ôÄÔ∏è –î–∞–π –í–∏–Ω–Ω–∏–∫ ‚Äî –Ω–µ–∑–≤–∏—á–∞–π–Ω–∏–π –±–æ—Ç, —è–∫–∏–π –Ω–∞–ø–æ–≤–Ω–∏—Ç—å —Ç–≤–æ—î –∂–∏—Ç—Ç—è –ø—Ä–∏—î–º–Ω–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏. –í—ñ–Ω –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –Ω–∞ —è–∫—É—Å—å –ø–æ–¥—ñ—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É –≤ –ø–∞—Ä–∫—É, –∞ —Ç–∞–∫–æ–∂ –∑–Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É –ø–æ–ª–æ–≤–∏–Ω–∫—É, –¥—Ä—É–≥–∞ –∞–±–æ –ø–æ–¥—Ä—É–≥—É!
      
–ú—ñ—Ü–Ω–æ –æ–±—ñ–π–Ω—è–ª–∏ —Ç–µ–±–µü´Ç
      `);
      await ctx.scene.enter('greeting');
    });
    const regex = /^(.+):(\d+):(.+)$/;
    this.bot.action(regex, async (ctx) => {
      const actionType = ctx.match[1];
      const initiatorUserId = ctx.match[2];
      const initiatorUsername = ctx.match[3];
      const updatedKeyboard = {
        inline_keyboard: [
          [
            { text: '‚ù§Ô∏è', callback_data: 'liked', disabled: true },
            { text: 'üëé', callback_data: 'disliked', disabled: true },
          ],
        ],
      };
      let username = ctx.from?.username;
      if (username) {
        username = '@' + username;
      }
      const userLink = `tg://user?id=${ctx.from!.id}`;
      if (actionType === 'likeEvent') {
        try {
          const mentionMessage =
            username || `[${ctx.from?.first_name}](${userLink})`;
          await ctx.telegram.sendMessage(
            initiatorUserId,
            `${mentionMessage} –ø—Ä–∏–π–Ω—è–≤ –≤–∞—à–µ —Ç–≤–æ—î –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é. –û–±–≥–æ–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—ñ...`,
            { parse_mode: 'Markdown' }
          );
          await ctx.reply(
            `–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å: ${initiatorUsername}
–¢–∏ –ø—Ä–∏–π–Ω—è–≤ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é ü•≥. –ë–∞–∂–∞—é –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å üëã`,
            { parse_mode: 'Markdown' }
          );
          await ctx.editMessageReplyMarkup(updatedKeyboard);
        } catch (error) {
          console.error('Error sending notification:', error);
        }
      } else if (actionType === 'like') {
        try {
          const mentionMessage =
            username || `[${ctx.from?.first_name}](${userLink})`;
          await ctx.telegram.sendMessage(
            initiatorUserId,
            `–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å: ${mentionMessage}
–ë–∞–∂–∞—é –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å üëã`,
            { parse_mode: 'Markdown' }
          );
          await ctx.reply(
            `${initiatorUsername}
–ë–∞–∂–∞—é –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å üëã`,
            { parse_mode: 'Markdown' }
          );
          await ctx.editMessageReplyMarkup(updatedKeyboard);
        } catch (error) {
          console.error('Error sending notification:', error);
        }
      } else if (actionType === 'dislikeEvent') {
        await ctx.reply(
          '–¢–∏ –≤—ñ–¥—Ö–∏–ª–∏–≤ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é. –ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É —Ç–æ—á–Ω–æ –ø–æ—â–∞—Å—Ç–∏—Ç—å ü§ûüèª',
          Markup.removeKeyboard()
        );
        await ctx.editMessageReplyMarkup(updatedKeyboard);
        await ctx.scene.enter('greeting');
      }
    });
    this.bot.command('events', async (ctx) => {
      await ctx.scene.enter('eventList');
    });
    this.bot.command('people', async (ctx) => {
      await ctx.scene.enter('lookForMatch');
    });
    this.bot.command('help', async (ctx) => {
      await ctx.reply(
        `ü¶∏‚Äç‚ôÄÔ∏è –ú–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó?
      
–ü–∏—à–∏ –Ω–∞–º —Å—é–¥–∏ [–û–ª–µ–∫—Å—ñ–π](tg://user?id=546195130)`,
        { parse_mode: 'Markdown' }
      );
    });
    this.bot.command('profile', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    this.bot.command('donate', async (ctx) => {
      await ctx.reply(
        `–©–æ–± —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ –Ω–∞—à –±–æ—Ç —Ç–∞ –∑–∞–ª—É—á–∞—Ç–∏ –±—ñ–ª—å—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±–∞–≥–∞—Ç–æ –∫–∞–≤–∏ —Ç–∞ –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫—ñ–≤ ü´†
          
–í–∞—à—ñ –≤–Ω–µ—Å–∫–∏ —Å–ø—Ä–∏—è—Ç–∏–º—É—Ç—å –¥–æ–≤—à—ñ–π –∂–∏—Ç—Ç—î–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ —è–∫ –±–æ—Ç–∞, —Ç–∞–∫ —ñ –π–æ–≥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤ )`,
        Markup.inlineKeyboard([
          Markup.button.url(
            'ü´∂üèª –ó—Ä–æ–±–∏—Ç–∏ –≤–Ω–µ—Å–æ–∫',
            'https://send.monobank.ua/jar/9dL7twbPY8'
          ),
        ])
      );
    });
    this.bot.on('message', (ctx) => ctx.reply('–°–ø—Ä–æ–±—É–π /start'));
  }

  init() {
    this.bot.launch();
  }
}

const bot = new Bot(new ConfigService());

bot.init();
