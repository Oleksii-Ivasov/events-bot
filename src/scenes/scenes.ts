import { Markup, Scenes } from 'telegraf';
import { MySceneContext } from '../context/context.interface';
import { UserForm } from '../UserForm/userForm.interface';

export class SceneGenerator {
  userForm: UserForm = {
    username: '',
    gender: 'male',
    age: 0,
    location: {
      longitude: NaN,
      latitude: NaN,
    },
    photoId: '',
  };

  nameScene(): Scenes.BaseScene<MySceneContext> {
    const name = new Scenes.BaseScene<MySceneContext>('name');
    name.enter(async (ctx) => {
      console.log('Entered name scene');
      await ctx.reply(`–í—ñ—Ç–∞—î–º–æ –≤ –î–∞–π–í–∏–Ω–Ω–∏–∫! üëã
          
üñ§ –î–∞–π–í–∏–Ω–Ω–∏–∫ - —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑–Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –Ω–∞ —è–∫—É—Å—å –ø–æ–¥—ñ—é, –∞ —Ç–∞–∫–æ–∂ –∑–Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É –ø–æ–ª–æ–≤–∏–Ω–∫—É, –¥—Ä—É–≥–∞ –∞–±–æ –ø–æ–¥—Ä—É–≥—É!
              
–î–ª—è —Ç–æ–≥–æ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∞–Ω–∫–µ—Ç–∏, –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –π –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å.
              
–ó–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –π–æ–≥–æ —Ç–∞–∫, –∞–±–∏ –≤—ñ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞–≤ –≤–∞—à—É –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å - —Ü–µ –¥–æ–ø–æ–º–æ–∂–µ –∑–Ω–∞–π—Ç–∏ —Å–∞–º–µ —Ç–æ–≥–æ, –∫–æ–≥–æ —à—É–∫–∞—î—Ç–µ!`);
      await ctx.reply('–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?');
    });
    name.on('text', async (ctx) => {
      console.log('Received text in name scene:', ctx.message.text);
      this.userForm.username = ctx.message.text;
      if (this.userForm.username) {
        await ctx.reply(
          `–î—è–∫—É—é, ${this.userForm.username}! –¢–≤–æ—î —ñ–º'—è –±—É–ª–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.`
        );
        console.log('Moving to age scene');
        await ctx.scene.enter('age');
      }
    });
    name.on('message', async (ctx) => {
      console.log('Received non-text message in name scene');
      await ctx.reply("–î–∞–≤–∞–π –∫—Ä–∞—â–µ —ñ–º'—è");
      ctx.scene.reenter();
    });

    return name;
  }
  ageScene(): Scenes.BaseScene<MySceneContext> {
    const age = new Scenes.BaseScene<MySceneContext>('age');
    age.enter(async (ctx) => {
      console.log('Entered age scene');
      await ctx.reply('–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Å–≤—ñ–π –≤—ñ–∫');
    });
    age.on('text', async (ctx) => {
      console.log('Received text in age scene:', ctx.message.text);
      this.userForm.age = Number(ctx.message.text);
      if (this.userForm.age && this.userForm.age > 0) {
        console.log('Moving to gender scene');
        await ctx.scene.enter('gender');
      } else if (!this.userForm.age) {
        await ctx.reply('–ù–∞–ø–∏—à–∏ –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏');
      } else if (this.userForm.age <= 0) {
        await ctx.reply('–í—ñ–∫ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0');
      }
    });
    age.on('message', async (ctx) => {
      console.log('Received non-text message in age scene');
      ctx.reply('–î–∞–≤–∞–π –∫—Ä–∞—â–µ –≤—ñ–∫');
    });
    return age;
  }
  genderScene(): Scenes.BaseScene<MySceneContext> {
    const gender = new Scenes.BaseScene<MySceneContext>('gender');
    gender.enter(async (ctx) => {
      console.log('Entered gender scene');
      await ctx.reply(
        '–¢–∏ —Ö–ª–æ–ø–µ—Ü—å —á–∏ –¥—ñ–≤—á–∏–Ω–∞?',
        Markup.inlineKeyboard([
          Markup.button.callback('–•–ª–æ–ø–µ—Ü—å', 'male'),
          Markup.button.callback('–î—ñ–≤—á–∏–Ω–∞', 'female'),
        ])
      );
    });
    gender.action('male', async (ctx) => {
      this.userForm.gender = 'male';
      console.log('Moving to location scene');
      await ctx.scene.enter('location');
    });
    gender.action('female', async (ctx) => {
      this.userForm.gender = 'female';
      console.log('Moving to location scene');
      await ctx.scene.enter('location');
    });
    gender.on('message', async (ctx) => {
      await ctx.reply(
        '–ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ —Å—Ç–∞—Ç—å',
        Markup.inlineKeyboard([
          Markup.button.callback('–•–ª–æ–ø–µ—Ü—å', 'male'),
          Markup.button.callback('–î—ñ–≤—á–∏–Ω–∞', 'female'),
        ])
      );
    });
    return gender;
  }
  locationScene(): Scenes.BaseScene<MySceneContext> {
    const location = new Scenes.BaseScene<MySceneContext>('location');
    location.enter(async (ctx) => {
      await ctx.reply(
        '–í–∫–∞–∂–∏ —Å–≤–æ—î –º—ñ—Å—Ç–æ –∞–±–æ –¥–æ–∑–≤–æ–ª—å –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–º',
        Markup.keyboard([
          Markup.button.locationRequest('–ú–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è'),
        ]).resize()
      );
    });
    location.on('location', async (ctx) => {
      try {
        const { latitude, longitude } = ctx.message.location;
        this.userForm.location = { latitude, longitude };
        await ctx.reply('–ó–±–µ—Ä–µ–≥–ª–∏ —Ç–≤–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è');
        await ctx.scene.enter('photo');
      } catch (error) {
        ctx.reply('–£–ø—Å... –í—ñ–¥–±—É–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞');
      }
    });
    location.on('text', async (ctx) => {
      this.userForm.location = ctx.message.text;
      await ctx.reply('–ó–±–µ—Ä–µ–≥–ª–∏ —Ç–≤–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è');
      await ctx.scene.enter('photo');
    });
    location.on('message', async (ctx) => {
      await ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ –º—ñ—Å—Ç–∞ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è');
    });

    return location;
  }
  photoScene(): Scenes.BaseScene<MySceneContext> {
    const photo = new Scenes.BaseScene<MySceneContext>('photo');
    photo.enter(async (ctx) => {
      console.log('Entered photo scene');
      await ctx.reply('–¢–µ–ø–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂ —Å–≤–æ—î —Ñ–æ—Ç–æ —â–æ–± —ñ–Ω—à—ñ –º–æ–≥–ª–∏ —Ç–µ–±–µ –ø–æ–±–∞—á–∏—Ç–∏');
    });
    photo.on('photo', async (ctx) => {
      const photos = ctx.message.photo;
      photos.sort((a, b) => {
        const resolutionA = a.width * a.height;
        const resolutionB = b.width * b.height;
        return resolutionB - resolutionA;
      });
      this.userForm.photoId = photos[0].file_id;
      await ctx.scene.enter('userform');
    });
    photo.on('text', async (ctx) => {
      await ctx.reply('–ó–∞–≤–∞–Ω—Ç–∞–∂, –±—É–¥—å-–ª–∞—Å–∫–∞, —Å–≤–æ—î —Ñ–æ—Ç–æ');
    });
    photo.on('message', async (ctx) => {
      await ctx.reply('–ó–∞–≤–∞–Ω—Ç–∞–∂, –±—É–¥—å-–ª–∞—Å–∫–∞, —Å–≤–æ—î —Ñ–æ—Ç–æ');
    });
    return photo;
  }
  userFormScene(): Scenes.BaseScene<MySceneContext> {
    const userForm = new Scenes.BaseScene<MySceneContext>('userform');
    userForm.enter(async (ctx) => {
      await ctx.reply(`–°—É–ø–µ—Ä! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –º–∞—î —Ç–∞–∫–∏–π –≤–∏–≥–ª—è–¥:
–Ü–º'—è: ${this.userForm.username}
–í—ñ–∫: ${this.userForm.age}
–ú—ñ—Å—Ç–æ:${this.userForm.location}`);
      ctx.scene.leave();
    });
    return userForm;
  }
}
