import { Markup, Scenes, TelegramError } from 'telegraf';
import { MySceneContext } from '../models/context.interface';
import { UserForm } from '../models/userForm.interface';
import { UserFormModel } from '../models/userForm.schema';
import { Db, MongoClient } from 'mongodb';
import axios from 'axios';
import { IConfigService } from '../models/config.interface';
import { Event } from '../models/event.interface';
import { EventModel } from '../models/event.schema';
import Fuse from 'fuse.js';
import fs from 'fs';
import crypto from 'crypto';
import cron from 'node-cron';
import { MediaGroup } from 'telegraf/typings/telegram-types';
import { Match } from '../models/match.interface';
import mongoose from 'mongoose';
import { KeyboardButton } from 'telegraf/typings/core/types/typegram';

const MAX_LIKES_LIMIT = 5;
const MAX_LIKES_VIEW_LIMIT = 3;
const TIME_TO_VIEW_EXPIRE = 60 * 1000; // 1 minute
//const INACTIVE_USER_TIME = (4 * 24 + 12) * 60 * 60 * 1000; // 4 days 12 hours
const SUBSCRIPTION_DURATION_1MONTH = 60 * 60 * 1000; // 1 hour
const SUBSCRIPTION_DURATION_6MONTHS = 60 * 60 * 2 * 1000; // 2 hour
const SUBSCRIPTION_DURATION_1YEAR = 60 * 60 * 3 * 1000; // 3 hour
const FIRST_BAN_TIME = 60 * 60 * 1000; // 1 hour
const SECOND_BAN_TIME = 60 * 60 * 2 * 1000; // 2 hour
const PERMANENT_BAN_TIME = 60 * 60 * 60 * 60 * 1000;
const SUBSCRIPTION_DURATION_TEST = 60 * 60 * 1000; // 1 hour
const REFERRAL_BONUSES_TIME_DURUATION = 60 * 5 * 1000;

export class SceneGenerator {
  private db!: Db;
  private isConnectionOpened = false;
  constructor(
    private readonly client: MongoClient,
    private configService: IConfigService
  ) {
    this.connectToMongoDB();
    // cron.schedule('0 0 */5 * *', async () => { // every 5 days
    //   try {
    //     if (!this.isConnectionOpened) {
    //       await this.client.connect();
    //     }
    //     console.log('scheduler works');
    //     const currentDate = new Date();
    //     const inactiveThreshold = INACTIVE_USER_TIME;
    //     const users = await this.db.collection('users').find().toArray();
    //     for (const user of users) {
    //       const lastActiveTimestamp = new Date(user.lastActive).getTime();
    //       const inactiveDuration = currentDate.getTime() - lastActiveTimestamp;
    //       if (inactiveDuration >= inactiveThreshold) {
    //         axios.post(
    //           `https://api.telegram.org/bot${this.configService.get(
    //             'TOKEN'
    //           )}/sendMessage`,
    //           {
    //             chat_id: user.userId,
    //             text: '–¢–µ–±–µ –¥–∞–≤–Ω–æ –Ω–µ –±—É–ª–æ —Ç—É—Ç',
    //             disable_notification: true,
    //           }
    //         );
    //       }
    //     }
    //   } catch (error) {
    //     console.error('Inactive notify error: ', error);
    //   }
    // });
    cron.schedule('*/10 * * * *', async () => {
      // every 2 hours check
      const currentDate = new Date();
      try {
        console.log('main scheduler works');
        if (!this.isConnectionOpened) {
          await this.client.connect();
        }

        const usersToResetLikes = await this.db
          .collection('users')
          .find({
            likesSentCount: { $gt: 0 },
          })
          .toArray();
        for (const user of usersToResetLikes) {
          await this.db
            .collection('users')
            .updateOne(
              { userId: user.userId },
              { $set: { likesSentCount: 0 } }
            );
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      } catch (error: any) {
        if (error instanceof TelegramError) {
          if (
            error.description !== 'Bad Request: chat not found' &&
            error.description !== 'Forbidden: bot was blocked by the user'
          ) {
            console.error('Error resetting user likes count:', error);
          }
        } else {
          console.error(error);
        }
      }
      try {
        const usersToResetSeenLikesCount = await this.db
          .collection('users')
          .find({
            seenLikesCount: { $gt: 0 },
          })
          .toArray();
        for (const user of usersToResetSeenLikesCount) {
          await this.db
            .collection('users')
            .updateOne(
              { userId: user.userId },
              { $set: { seenLikesCount: 0 } }
            );
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      } catch (error: any) {
        if (error instanceof TelegramError) {
          if (
            error.description !== 'Bad Request: chat not found' &&
            error.description !== 'Forbidden: bot was blocked by the user'
          ) {
            console.error('Error resetting unseen likes count:', error);
          }
        } else {
          console.error(error);
        }
      }
      try {
        const usersToTakeAwayPremium = await this.db
          .collection('users')
          .find({
            isPremium: true,
            premiumEndTime: { $lte: currentDate },
          })
          .toArray();
        for (const user of usersToTakeAwayPremium) {
          axios.post(
            `https://api.telegram.org/bot${this.configService.get(
              'TOKEN'
            )}/sendMessage`,
            {
              chat_id: user.userId,
              text: '–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è',
            }
          );
          await this.db.collection('users').updateOne(
            { userId: user.userId },
            {
              $set: {
                isPremium: false,
                premiumEndTime: null,
                isIncognito: false,
              },
            }
          );
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      } catch (error: any) {
        if (error instanceof TelegramError) {
          if (
            error.description !== 'Bad Request: chat not found' &&
            error.description !== 'Forbidden: bot was blocked by the user'
          ) {
            console.error('Error resetting user premium:', error);
          }
        } else {
          console.error(error);
        }
      }
      try {
        const usersToDisableReferralBonuses = await this.db
          .collection('users')
          .find({
            isReferralBonusesActive: true,
            referralBonusesEndTime: { $lte: currentDate },
          })
          .toArray();
        console.log('reset bonus: ', usersToDisableReferralBonuses);
        for (const user of usersToDisableReferralBonuses) {
          await this.db.collection('users').updateOne(
            { userId: user.userId },
            {
              $set: {
                isReferralBonusesActive: false,
                referralBonusesEndTime: null,
              },
            }
          );
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      } catch (error: any) {
        if (error instanceof TelegramError) {
          if (
            error.description !== 'Bad Request: chat not found' &&
            error.description !== 'Forbidden: bot was blocked by the user'
          ) {
            console.error('Error resetting referal bonuses', error);
          }
        } else {
          console.error(error);
        }
      }
    });
  }

  private async connectToMongoDB() {
    try {
      await this.client.connect();
      this.db = this.client.db('cluster0');
      this.client.on('open', () => {
        this.isConnectionOpened = true;
      });
    } catch (error) {
      console.error('Error connecting to MongoDB:', error);
    }
  }
  API_KEY = this.configService.get('API_KEY');
  event: Event = {
    userId: NaN,
    eventId: NaN,
    eventName: '',
    date: '',
    about: undefined,
    lookingFor: '',
    location: '',
    lookingForMinAge: NaN,
    lookingForMaxAge: NaN,
  };
  botEvent = {
    eventId: NaN,
    eventName: '',
    date: '',
    about: '',
    location: '',
    mediaIds: [{ type: '', id: '' }],
  };

  nameScene(): Scenes.BaseScene<MySceneContext> {
    const name = new Scenes.BaseScene<MySceneContext>('name');
    name.enter(async (ctx) => {
      if (ctx.session.userForm.username) {
        await ctx.reply(
          '–Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?',
          Markup.keyboard([[ctx.session.userForm.username]])
            .oneTime()
            .resize()
        );
      } else {
        await ctx.reply('–Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?', Markup.removeKeyboard());
      }
    });
    this.addCommands(name);
    name.on('text', async (ctx) => {
      if (ctx.message.text.length > 70) {
        await ctx.reply(`–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ —ñ–º'—è, –±—É–¥—å-–ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —â–æ—Å—å –∫–æ—Ä–æ—Ç—à–µ`);
      } else {
        ctx.session.userForm.userId = ctx.from.id;
        ctx.session.userForm.username = ctx.message.text;
        await ctx.scene.enter('age');
      }
    });
    name.on('message', async (ctx) => {
      await ctx.reply("–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è üëáüèª");
    });

    return name;
  }
  ageScene(): Scenes.BaseScene<MySceneContext> {
    const age = new Scenes.BaseScene<MySceneContext>('age');
    age.enter(async (ctx) => {
      if (ctx.session.userForm.age) {
        await ctx.reply(
          '–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?',
          Markup.keyboard([[ctx.session.userForm.age.toString()]])
            .oneTime()
            .resize()
        );
      } else {
        await ctx.reply('–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?');
      }
    });
    this.addCommands(age);
    age.on('text', async (ctx) => {
      const age = Number(ctx.message.text);
      if (typeof age === 'number' && !isNaN(age) && age > 16 && age < 100) {
        ctx.session.userForm.age = age;
        await ctx.scene.enter('location');
      } else if (typeof age !== 'number' || isNaN(age)) {
        await ctx.reply('–í–∫–∞–∂–∏ –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏');
      } else if (age < 17 || age > 99) {
        await ctx.reply(
          `–ù–∞ –∂–∞–ª—å, –Ω–∞—à –±–æ—Ç –º–∞—î –≤—ñ–∫–æ–≤—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è. –¶–µ –∑–∞–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏ –Ω–µ–ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n–î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è! ü´∂üèª`
        );
      }
    });
    age.on('message', async (ctx) => {
      await ctx.reply('–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–∫–∞–∂–∏ —Å–≤—ñ–π –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏ üëáüèª');
    });
    return age;
  }
  genderScene(): Scenes.BaseScene<MySceneContext> {
    const gender = new Scenes.BaseScene<MySceneContext>('gender');
    gender.enter(async (ctx) => {
      const user = await this.getUserFormDataFromDatabase(ctx.from!.id);
      if (!user && !ctx.session.userForm) {
        ctx.session.userForm = new UserFormModel({});
      } else {
        Object.assign(ctx.session.userForm, user);
      }
      await ctx.reply(
        '–î–∞–≤–∞–π —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –Ø–∫–æ—ó —Ç–∏ —Å—Ç–∞—Ç—ñ?',
        Markup.keyboard([['üôãüèº‚Äç‚ôÇÔ∏è –•–ª–æ–ø–µ—Ü—å', 'üôãüèª‚Äç‚ôÄÔ∏è –î—ñ–≤—á–∏–Ω–∞']])
          .oneTime()
          .resize()
      );
    });
    this.addCommands(gender);
    gender.hears('üôãüèº‚Äç‚ôÇÔ∏è –•–ª–æ–ø–µ—Ü—å', async (ctx) => {
      ctx.session.userForm.gender = 'male';
      await ctx.scene.enter('lookingFor');
    });
    gender.hears('üôãüèª‚Äç‚ôÄÔ∏è –î—ñ–≤—á–∏–Ω–∞', async (ctx) => {
      ctx.session.userForm.gender = 'female';
      await ctx.scene.enter('lookingFor');
    });
    gender.on('message', async (ctx) => {
      await ctx.reply(
        '–ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ —Å—Ç–∞—Ç—å  üëáüèª',
        Markup.keyboard([['üôãüèº‚Äç‚ôÇÔ∏è –•–ª–æ–ø–µ—Ü—å', 'üôãüèª‚Äç‚ôÄÔ∏è –î—ñ–≤—á–∏–Ω–∞']])
          .oneTime()
          .resize()
      );
    });
    return gender;
  }
  lookingForScene(): Scenes.BaseScene<MySceneContext> {
    const lookingFor = new Scenes.BaseScene<MySceneContext>('lookingFor');
    lookingFor.enter(async (ctx) => {
      await ctx.reply(
        '–ö–æ–≥–æ —à—É–∫–∞—î—à?',
        Markup.keyboard([['üë±üèª‚Äç‚ôÇÔ∏è –•–ª–æ–ø—Ü—ñ', 'üë©üèª –î—ñ–≤—á–∞—Ç–∞', 'üë´ –ù–µ–≤–∞–∂–ª–∏–≤–æ']])
          .oneTime()
          .resize()
      );
    });
    this.addCommands(lookingFor);
    lookingFor.hears('üë±üèª‚Äç‚ôÇÔ∏è –•–ª–æ–ø—Ü—ñ', async (ctx) => {
      ctx.session.userForm.lookingFor = 'male';
      if (this.isOneTimeChange) {
        this.isOneTimeChange = false;
        await this.updateUserPropertyToDatabase(ctx.session.userForm, {
          lookingFor: ctx.session.userForm.lookingFor,
        });
        await ctx.scene.enter('lookForMatchEdit');
      } else {
        await ctx.scene.enter('lookingForAge');
      }
    });
    lookingFor.hears('üë©üèª –î—ñ–≤—á–∞—Ç–∞', async (ctx) => {
      ctx.session.userForm.lookingFor = 'female';
      if (this.isOneTimeChange) {
        this.isOneTimeChange = false;
        await this.updateUserPropertyToDatabase(ctx.session.userForm, {
          lookingFor: ctx.session.userForm.lookingFor,
        });
        await ctx.scene.enter('lookForMatchEdit');
      } else {
        await ctx.scene.enter('lookingForAge');
      }
    });
    lookingFor.hears('üë´ –ù–µ–≤–∞–∂–ª–∏–≤–æ', async (ctx) => {
      ctx.session.userForm.lookingFor = 'both';
      if (this.isOneTimeChange) {
        this.isOneTimeChange = false;
        await this.updateUserPropertyToDatabase(ctx.session.userForm, {
          lookingFor: ctx.session.userForm.lookingFor,
        });
        await ctx.scene.enter('lookForMatchEdit');
      } else {
        await ctx.scene.enter('lookingForAge');
      }
    });
    lookingFor.on('message', async (ctx) => {
      await ctx.reply(
        '–û–±–µ—Ä–∏ —Ö—Ç–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å üëáüèª',
        Markup.keyboard([['üë±üèª‚Äç‚ôÇÔ∏è –•–ª–æ–ø—Ü—ñ', 'üë©üèª –î—ñ–≤—á–∞—Ç–∞', 'üë´ –ù–µ–≤–∞–∂–ª–∏–≤–æ']])
          .oneTime()
          .resize()
      );
    });
    return lookingFor;
  }

  lookingForAgeScene(): Scenes.BaseScene<MySceneContext> {
    const lookingForAge = new Scenes.BaseScene<MySceneContext>('lookingForAge');
    let keyboardButtons:
      | string[]
      | (KeyboardButton & { hide?: boolean | undefined })[];
    lookingForAge.enter(async (ctx) => {
      keyboardButtons = ['–®—É–∫–∞—Ç–∏ —É—Å—ñ—Ö'];
      if (
        ctx.session.userForm.lookingForMinAge &&
        ctx.session.userForm.lookingForMaxAge
      ) {
        if (
          ctx.session.userForm.lookingForMinAge !== 17 &&
          ctx.session.userForm.lookingForMaxAge !== 99
        ) {
          const keyboardRange = `${ctx.session.userForm.lookingForMinAge}-${ctx.session.userForm.lookingForMaxAge}`;
          keyboardButtons.push(keyboardRange);
        }
      }
      await ctx.reply(
        '–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ –≤—ñ–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–∫–∞–≤–∏—Ö —Ç–æ–±—ñ –ª—é–¥–µ–π, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 18-22',
        Markup.keyboard([keyboardButtons]).oneTime().resize()
      );
    });
    this.addCommands(lookingForAge);
    lookingForAge.hears('–®—É–∫–∞—Ç–∏ —É—Å—ñ—Ö', async (ctx) => {
      ctx.session.userForm.lookingForMinAge = 17;
      ctx.session.userForm.lookingForMaxAge = 99;
      if (this.isOneTimeChange) {
        this.isOneTimeChange = false;
        await this.updateUserPropertyToDatabase(ctx.session.userForm, {
          lookingForMinAge: ctx.session.userForm.lookingForMinAge,
          lookingForMaxAge: ctx.session.userForm.lookingForMaxAge,
        });
        await this.db.collection('events').updateMany(
          { userId: ctx.session.userForm.userId },
          {
            $set: {
              lookingForMinAge: ctx.session.userForm.lookingForMinAge,
              lookingForMaxAge: ctx.session.userForm.lookingForMaxAge,
            },
          }
        );
        await ctx.scene.enter('lookForMatchEdit');
      } else {
        await ctx.scene.enter('name');
      }
    });
    lookingForAge.on('text', async (ctx) => {
      if (/^\d{1,2}-\d{1,2}$/.test(ctx.message.text)) {
        const [minAge, maxAge] = ctx.message.text.split('-').map(Number);
        if (minAge >= 17 && maxAge <= 99 && minAge <= maxAge) {
          ctx.session.userForm.lookingForMinAge = minAge;
          ctx.session.userForm.lookingForMaxAge = maxAge;
          if (this.isOneTimeChange) {
            this.isOneTimeChange = false;
            await this.updateUserPropertyToDatabase(ctx.session.userForm, {
              lookingForMinAge: ctx.session.userForm.lookingForMinAge,
              lookingForMaxAge: ctx.session.userForm.lookingForMaxAge,
            });
            await this.db.collection('events').updateMany(
              { userId: ctx.session.userForm.userId },
              {
                $set: {
                  lookingForMinAge: ctx.session.userForm.lookingForMinAge,
                  lookingForMaxAge: ctx.session.userForm.lookingForMaxAge,
                },
              }
            );
            await ctx.scene.enter('lookForMatchEdit');
          } else {
            await ctx.scene.enter('name');
          }
        } else {
          await ctx.reply(
            '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–∏–º –∑–∞ 17, –∞ —Ç–∞–∫–æ–∂ –±—É—Ç–∏ –º–µ–Ω—à–∏–º –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π'
          );
        }
      } else {
        await ctx.reply(
          '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç—É–≤—É–π —Ñ–æ—Ä–º–∞—Ç —è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ: 18-22'
        );
      }
    });
    lookingForAge.on('message', async (ctx) => {
      await ctx.reply(
        '–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–∫–∞–∂–∏ –≤—ñ–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–∫–∞–≤–∏—Ö —Ç–æ–±—ñ –ª—é–¥–µ–π, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 18-22',
        Markup.keyboard([keyboardButtons]).oneTime().resize()
      );
    });
    return lookingForAge;
  }

  AboutScene(): Scenes.BaseScene<MySceneContext> {
    const about = new Scenes.BaseScene<MySceneContext>('about');
    about.enter(async (ctx) => {
      const isPremiumUser = ctx.session.userForm.isPremium;
      const hasAbout = ctx.session.userForm?.about;
      const premiumMessage = isPremiumUser ? ' –∞–±–æ –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–µ' : '';
      const defaultMessage = `–ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª—ñ–≤ –ø—Ä–æ —Å–µ–±–µ: —â–æ –ø–æ–ª—é–±–ª—è—î—à, –∫–æ–≥–æ —à—É–∫–∞—î—à${premiumMessage}`;
      const keyboardOptions = hasAbout
        ? ['–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏', '–ó–∞–ª–∏—à–∏—Ç–∏ —è–∫ —î']
        : ['–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏'];
      await ctx.reply(
        defaultMessage,
        Markup.keyboard(keyboardOptions).oneTime().resize()
      );
    });
    this.addCommands(about);
    about.hears('–ó–∞–ª–∏—à–∏—Ç–∏ —è–∫ —î', async (ctx) => {
      if (this.isOneTimeChange) {
        this.isOneTimeChange = false;
        await ctx.scene.enter('userform');
      } else {
        await ctx.scene.enter('socialLinks');
      }
    });
    about.hears('–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏', async (ctx) => {
      ctx.session.userForm.about = undefined;
      if (this.isOneTimeChange) {
        this.isOneTimeChange = false;
        await this.updateUserPropertyToDatabase(ctx.session.userForm, {
          about: ctx.session.userForm.about,
        });
        await ctx.scene.enter('userform');
      } else {
        await ctx.scene.enter('socialLinks');
      }
    });
    about.on('voice', async (ctx) => {
      if (!ctx.session.userForm.isPremium) {
        await ctx.reply('–ì–æ–ª–æ—Å–æ–≤—ñ –º–æ–∂—É—Ç—å –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –ª–∏—à–µ –ø—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ');
      } else {
        ctx.session.userForm.about = {
          type: 'voice',
          content: ctx.message.voice.file_id,
        };
        if (this.isOneTimeChange) {
          this.isOneTimeChange = false;
          await this.updateUserPropertyToDatabase(ctx.session.userForm, {
            about: ctx.session.userForm.about,
          });
          await ctx.scene.enter('userform');
        } else {
          await ctx.scene.enter('socialLinks');
        }
      }
    });
    about.on('text', async (ctx) => {
      const userAbout = ctx.message.text;
      if (userAbout.length > 300) {
        await ctx.reply('–ó–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑—Ä–æ–±–∏ —Ç—Ä–æ—Ö–∏ –º–µ–Ω—à–∏–º');
      } else {
        ctx.session.userForm.about = {
          type: 'text',
          content: userAbout,
        };
        if (this.isOneTimeChange) {
          this.isOneTimeChange = false;
          await this.updateUserPropertyToDatabase(ctx.session.userForm, {
            about: ctx.session.userForm.about,
          });
          await ctx.scene.enter('userform');
        } else {
          await ctx.scene.enter('socialLinks');
        }
      }
    });
    about.on('message', async (ctx) => {
      await ctx.reply('–ë—É–¥—å-–ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à–∏ –ø—Ä–æ —Å–µ–±–µ');
    });
    return about;
  }

  socialLinksScene(): Scenes.BaseScene<MySceneContext> {
    const socialLinks = new Scenes.BaseScene<MySceneContext>('socialLinks');
    let inst = '';
    let tiktok = '';
    let isInstField = false;
    let isTikTokField = false;
    let links: string[] = [];
    socialLinks.enter(async (ctx) => {
      isInstField = false;
      isTikTokField = false;
      inst = '';
      tiktok = '';
      links = [];
      const upperKeyboard = [];
      const lowerKeyboard = [];
      if (
        ctx.session.userForm.socialLinks &&
        ctx.session.userForm.socialLinks.length > 0
      ) {
        upperKeyboard.push('–ó–∞–ª–∏—à–∏—Ç–∏ —è–∫ —î');
      }
      if (!inst) {
        lowerKeyboard.push('Instagram');
      }
      if (!tiktok) {
        lowerKeyboard.push('TikTok');
      }
      upperKeyboard.push('–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏');
      await ctx.reply(
        '–ú–æ–∂–µ—à –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤–æ—é —Å–æ—Ü–º–µ—Ä–µ–∂—É (–ø—Ä–µ–º—ñ—É–º-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –∑–∞–ª–∏—à–∞—Ç–∏ –¥–æ 2 –ø–æ—Å–∏–ª–∞–Ω—å)',
        Markup.keyboard([upperKeyboard, lowerKeyboard]).oneTime().resize()
      );
    });
    socialLinks.hears('–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏', async (ctx) => {
      ctx.session.userForm.socialLinks = links;
      if (this.isOneTimeChange) {
        this.isOneTimeChange = false;
        await this.updateUserPropertyToDatabase(ctx.session.userForm, {
          socialLinks: ctx.session.userForm.socialLinks,
        });
        await ctx.scene.enter('userform');
      } else {
        await ctx.scene.enter('photo');
      }
    });
    socialLinks.hears('–ó–∞–ª–∏—à–∏—Ç–∏ —è–∫ —î', async (ctx) => {
      if (this.isOneTimeChange) {
        this.isOneTimeChange = false;
        await ctx.scene.enter('userform');
      } else {
        await ctx.scene.enter('photo');
      }
    });
    socialLinks.hears('–¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏', async (ctx) => {
      ctx.session.userForm.socialLinks = links;
      if (this.isOneTimeChange) {
        this.isOneTimeChange = false;
        await this.updateUserPropertyToDatabase(ctx.session.userForm, {
          socialLinks: ctx.session.userForm.socialLinks,
        });
        await ctx.scene.enter('userform');
      } else {
        await ctx.scene.enter('photo');
      }
    });
    socialLinks.hears('Instagram', async (ctx) => {
      isInstField = true;
      isTikTokField = false;
      await ctx.reply('–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Å–≤—ñ–π –Ω—ñ–∫–Ω–µ–π–º –≤ Instagram');
    });
    socialLinks.hears('TikTok', async (ctx) => {
      isTikTokField = true;
      isInstField = false;
      await ctx.reply('–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Å–≤—ñ–π –Ω—ñ–∫–Ω–µ–π–º –≤ TikTok');
    });
    this.addCommands(socialLinks);
    socialLinks.on('text', async (ctx) => {
      const availableLinks = ctx.session.userForm.isPremium ? 2 : 1;

      if (ctx.message.text.length > 300) {
        await ctx.reply('–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ç–µ–∫—Å—Ç—É, —è–∫ –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω—å');
      } else {
        let linkText = '';
        if (isInstField) {
          inst = `https://www.instagram.com/${ctx.message.text}`;
          linkText = `[Instagram](${inst})`;
        } else if (isTikTokField) {
          tiktok = `https://www.tiktok.com/@${ctx.message.text}`;
          linkText = `[TikTok](${tiktok})`;
        }
        links.push(linkText);
        await ctx.reply('‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ');
        if (links.length < availableLinks) {
          const keyboard = [];
          if (!inst) {
            keyboard.push('Instagram');
          }
          if (!tiktok) {
            keyboard.push('TikTok');
          }
          keyboard.push('–¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏');
          await ctx.reply(
            '–ó–∞–ª–∏—à—Ç–µ —â–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏".',
            Markup.keyboard([keyboard]).oneTime().resize()
          );
        } else {
          ctx.session.userForm.socialLinks = links;
          if (this.isOneTimeChange) {
            this.isOneTimeChange = false;
            await this.updateUserPropertyToDatabase(ctx.session.userForm, {
              socialLinks: ctx.session.userForm.socialLinks,
            });
            await ctx.scene.enter('userform');
          } else {
            await ctx.scene.enter('photo');
          }
        }
      }
    });
    socialLinks.on('message', async (ctx) => {
      await ctx.reply(
        '–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º, –∑–∞–ª–∏—à –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤–æ—é —Å–æ—Ü–º–µ—Ä–µ–∂—É (–ø—Ä–µ–º—ñ—É–º-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –∑–∞–ª–∏—à–∞—Ç–∏ –¥–æ 3 –ø–æ—Å–∏–ª–∞–Ω—å)'
      );
    });
    return socialLinks;
  }

  locationScene(): Scenes.BaseScene<MySceneContext> {
    const location = new Scenes.BaseScene<MySceneContext>('location');
    location.enter(async (ctx) => {
      if (ctx.session.userForm.location) {
        await ctx.reply(
          '–ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞?',
          Markup.keyboard([
            `${ctx.session.userForm.location}`,
            Markup.button.locationRequest('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è'),
          ])
            .oneTime()
            .resize()
        );
      } else {
        await ctx.reply(
          '–ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞?',
          Markup.keyboard([
            Markup.button.locationRequest('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è'),
          ])
            .oneTime()
            .resize()
        );
      }
    });
    this.addCommands(location);
    location.on('location', async (ctx) => {
      try {
        ctx.session.userForm.coordinates = ctx.message.location;
        const userLocationName = await this.getUserCityFromCoordinates(
          ctx.session.userForm.coordinates.latitude,
          ctx.session.userForm.coordinates.longitude
        );
        ctx.session.userForm.actualLocation = userLocationName.toLowerCase();
        ctx.session.userForm.location = userLocationName;
        if (ctx.session.userForm.actualLocation !== '–æ–¥–µ—Å–∞') {
          await ctx.reply(
            '‚ö†Ô∏è –ù–∞ –∂–∞–ª—å, –ø–æ–∫–∏ —â–æ, —Ü–µ–π –±–æ—Ç –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –Ω–∞ –º–µ—à–∫–∞–Ω—Ü—ñ–≤ –û–¥–µ—Å–∏, –∞–ª–µ —Å–∫–æ—Ä–æ –≤—ñ–Ω –±—É–¥–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –π —ñ–Ω—à—ñ –º—ñ—Å—Ç–∞, –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∞ —Å–ª—ñ–¥–∫—É–π –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —É —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ',
            Markup.inlineKeyboard([
              Markup.button.url('–ö–∞–Ω–∞–ª', 'https://t.me/crush_ua'),
            ])
          );
        }
        if (this.isOneTimeChange) {
          this.isOneTimeChange = false;
          await this.updateUserPropertyToDatabase(ctx.session.userForm, {
            coordinates: ctx.session.userForm.coordinates,
            location: ctx.session.userForm.location,
            actualLocation: ctx.session.userForm.actualLocation,
          });
          await ctx.scene.enter('userform');
        } else {
          await ctx.scene.enter('about');
        }
      } catch (error) {
        console.error('Location detection error: ', error);
      }
    });
    location.on('text', async (ctx) => {
      if (
        ctx.session.userForm.location &&
        ctx.session.userForm.actualLocation &&
        ctx.session.userForm.location === ctx.message.text
      ) {
        if (this.isOneTimeChange) {
          this.isOneTimeChange = false;
          await ctx.scene.enter('userform');
        } else {
          await ctx.scene.enter('about');
        }
      } else {
        const rawData = fs.readFileSync('./UA.json', 'utf8');
        const dataArray = JSON.parse(rawData);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const cityNamesArray: any[] = [];

        dataArray.forEach(
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (entry: { type: string; public_name: string; name: any }) => {
            const type = entry.type.toLowerCase();
            const isState = type === 'state';
            const nameToUse = isState ? entry.public_name : entry.name;

            if (['city', 'urban', 'settlement', 'state'].includes(type)) {
              let variations = [
                nameToUse.en.toLowerCase(),
                nameToUse.ru.toLowerCase(),
                nameToUse.uk.toLowerCase(),
              ];
              let original = nameToUse.uk;
              if (isState) {
                original = nameToUse.uk.replace(/ –æ–±–ª\.$/, ' –æ–±–ª–∞—Å—Ç—å');
                variations = variations.map((variation) =>
                  variation.replace(/ –æ–±–ª\.$/, ' –æ–±–ª–∞—Å—Ç—å')
                );
              }
              cityNamesArray.push({ variations, original, type });
            }
          }
        );
        let userInput = ctx.message.text;
        const isInputEnglish = /[a-zA-Z]/.test(userInput);
        if (isInputEnglish) {
          userInput = userInput
            .trim()
            .toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '');
        } else {
          userInput = userInput.trim().toLowerCase();
        }

        const options = {
          includeScore: true,
          keys: ['variations'],
          threshold: 0.2,
        };
        const priorityOrder = ['city', 'urban', 'state', 'settlement'];
        const matchingCities = [];
        for (const type of priorityOrder) {
          const citiesOfType = cityNamesArray.filter(
            (item) => item.type === type
          );
          const fuse = new Fuse(citiesOfType, options);
          const bestMatches = fuse.search(userInput);
          const matchingOfType = bestMatches.filter((match) =>
            priorityOrder.includes(match.item.type)
          );
          if (matchingOfType.length > 0) {
            matchingCities.push(matchingOfType[0]);
          }
        }
        ctx.session.userForm.coordinates = null;
        if (matchingCities.length > 0) {
          ctx.session.userForm.actualLocation =
            matchingCities[0].item.original.toLowerCase();
          ctx.session.userForm.location = ctx.message.text;
          if (ctx.session.userForm.actualLocation !== '–æ–¥–µ—Å–∞') {
            await ctx.reply(
              '‚ö†Ô∏è –ù–∞ –∂–∞–ª—å, –ø–æ–∫–∏ —â–æ, —Ü–µ–π –±–æ—Ç –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –Ω–∞ –º–µ—à–∫–∞–Ω—Ü—ñ–≤ –û–¥–µ—Å–∏, –∞–ª–µ —Å–∫–æ—Ä–æ –≤—ñ–Ω –±—É–¥–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –π —ñ–Ω—à—ñ –º—ñ—Å—Ç–∞, –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∞ —Å–ª—ñ–¥–∫—É–π –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —É —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ',
              Markup.inlineKeyboard([
                Markup.button.url('–ö–∞–Ω–∞–ª', 'https://t.me/crush_ua'),
              ])
            );
          }
          if (this.isOneTimeChange) {
            this.isOneTimeChange = false;
            await this.updateUserPropertyToDatabase(ctx.session.userForm, {
              coordinates: ctx.session.userForm.coordinates,
              location: ctx.session.userForm.location,
              actualLocation: ctx.session.userForm.actualLocation,
            });
            await ctx.scene.enter('userform');
          } else {
            await ctx.scene.enter('about');
          }
        } else {
          ctx.session.userForm.location = ctx.message.text;
          ctx.session.userForm.actualLocation = ctx.message.text.toLowerCase();
          if (ctx.session.userForm.actualLocation !== '–æ–¥–µ—Å–∞') {
            await ctx.reply(
              '‚ö†Ô∏è –ù–∞ –∂–∞–ª—å, –ø–æ–∫–∏ —â–æ, —Ü–µ–π –±–æ—Ç –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –Ω–∞ –º–µ—à–∫–∞–Ω—Ü—ñ–≤ –û–¥–µ—Å–∏, –∞–ª–µ —Å–∫–æ—Ä–æ –≤—ñ–Ω –±—É–¥–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –π —ñ–Ω—à—ñ –º—ñ—Å—Ç–∞, –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∞ —Å–ª—ñ–¥–∫—É–π –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —É —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ',
              Markup.inlineKeyboard([
                Markup.button.url('–ö–∞–Ω–∞–ª', 'https://t.me/crush_ua'),
              ])
            );
          }
          if (this.isOneTimeChange) {
            this.isOneTimeChange = false;
            await this.updateUserPropertyToDatabase(ctx.session.userForm, {
              coordinates: ctx.session.userForm.coordinates,
              location: ctx.session.userForm.location,
              actualLocation: ctx.session.userForm.actualLocation,
            });
            await ctx.scene.enter('userform');
          } else {
            await ctx.scene.enter('about');
          }
        }
      }
    });
    location.on('message', async (ctx) => {
      await ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ –º—ñ—Å—Ç–∞ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è');
    });

    return location;
    // function mapLatinToCyrillic(character: string, nextCharacter?: string): string {
    //   const lowercaseCharacter = character.toLowerCase()
    //   const latinToCyrillicMap: { [key: string]: string } = {
    //     a: '–∞',
    //     b: '–±',
    //     c: '—Ü',
    //     d: '–¥',
    //     e: '–µ',
    //     f: '—Ñ',
    //     g: '–≥',
    //     h: '—Ö',
    //     i: '–∏',
    //     j: '–π',
    //     k: '–∫',
    //     l: '–ª',
    //     m: '–º',
    //     n: '–Ω',
    //     o: '–æ',
    //     p: '–ø',
    //     q: '–∫',
    //     r: '—Ä',
    //     s: '—Å',
    //     t: '—Ç',
    //     u: '—É',
    //     v: '–≤',
    //     w: '–≤',
    //     x: '–∫—Å',
    //     y: '–∏',
    //     z: '–∑',
    //     —å: nextCharacter && /[–∞–µ–∏–æ—É—è—é]/.test(nextCharacter) ? '' : '—å',
    //   };
    //   return latinToCyrillicMap[lowercaseCharacter] || character;
    // }
  }

  private maxPhotoCount: number = 3;
  private maxVideoDuration: number = 15;
  private isUploaded = false;
  private uploadNumber = 0;
  private mediaIds: { type: string; id: string }[] = [];
  photoScene(): Scenes.BaseScene<MySceneContext> {
    const photo = new Scenes.BaseScene<MySceneContext>('photo');
    let type: string;
    const isMediaLimitReached = () => this.uploadNumber >= this.maxPhotoCount;
    const handleMediaUpload = async (
      ctx: MySceneContext,
      mediaType: string,
      mediaId: string
    ) => {
      if (!isMediaLimitReached()) {
        this.mediaIds.push({ type: mediaType, id: mediaId });
        this.uploadNumber++;
      }
      if (mediaType === 'video') {
        type = '–í—ñ–¥–µ–æ';
      } else {
        type = '–§–æ—Ç–æ';
      }
      if (!isMediaLimitReached()) {
        await ctx.reply(
          `‚úÖ ${type} ‚Ññ${this.uploadNumber} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –≤ —Ç–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å`,
          Markup.keyboard([['–¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏ –º–µ–¥—ñ–∞']])
            .oneTime()
            .resize()
        );
      } else if (!this.isUploaded) {
        this.isUploaded = true;
        await ctx.reply(
          `‚úÖ ${type} ‚Ññ${this.uploadNumber} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –≤ —Ç–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å`,
          Markup.keyboard([['–¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏ –º–µ–¥—ñ–∞']])
            .oneTime()
            .resize()
        );
        ctx.session.userForm.mediaIds = this.mediaIds;
        await this.saveUserFormToDatabase(ctx.session.userForm);
        await this.db.collection('events').updateMany(
          { userId: ctx.session.userForm.userId },
          {
            $set: {
              lookingForMinAge: ctx.session.userForm.lookingForMinAge,
              lookingForMaxAge: ctx.session.userForm.lookingForMaxAge,
            },
          }
        );
        await ctx.scene.enter('userform');
      }
    };
    photo.enter(async (ctx) => {
      this.maxPhotoCount = ctx.session.userForm.isPremium ? 7 : 3;
      this.maxVideoDuration = ctx.session.userForm.isPremium ? 60 : 15;
      this.mediaIds = [];
      this.uploadNumber = 0;
      this.isUploaded = false;
      const photoPrompt = `–û–±–µ—Ä–∏ —Å–≤–æ—ó –Ω–∞–π–∫—Ä–∞—â—ñ —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º ${this.maxPhotoCount}) –∞–±–æ –≤—ñ–¥–µ–æ (—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é –¥–æ ${this.maxVideoDuration} —Å–µ–∫—É–Ω–¥), —è–∫—ñ –±—É–¥—É—Ç—å –±–∞—á–∏—Ç–∏ —ñ–Ω—à—ñ`;
      if (ctx.session.userForm.mediaIds.length > 0) {
        await ctx.reply(
          photoPrompt,
          Markup.keyboard([['–ó–∞–ª–∏—à–∏—Ç–∏ —è–∫ —î']])
            .oneTime()
            .resize()
        );
      } else {
        await ctx.reply(photoPrompt, Markup.removeKeyboard());
      }
    });

    this.addCommands(photo);
    photo.hears('–ó–∞–ª–∏—à–∏—Ç–∏ —è–∫ —î', async (ctx) => {
      if (ctx.session.userForm.mediaIds.length > 0) {
        this.isUploaded = true;
        await this.saveUserFormToDatabase(ctx.session.userForm);
        await this.db.collection('events').updateMany(
          { userId: ctx.session.userForm.userId },
          {
            $set: {
              lookingForMinAge: ctx.session.userForm.lookingForMinAge,
              lookingForMaxAge: ctx.session.userForm.lookingForMaxAge,
            },
          }
        );
        await ctx.scene.enter('userform');
      }
    });
    photo.on('photo', async (ctx) => {
      const photos = ctx.message.photo;
      photos.sort((a, b) => {
        const resolutionA = a.width * a.height;
        const resolutionB = b.width * b.height;
        return resolutionB - resolutionA;
      });
      await handleMediaUpload(ctx, 'photo', photos[0].file_id);
    });

    photo.on('video', async (ctx) => {
      const video = ctx.message.video;
      if (video.duration <= this.maxVideoDuration) {
        await handleMediaUpload(ctx, 'video', video.file_id);
      } else {
        await ctx.reply(
          `–í—ñ–¥–µ–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ë—É–¥—å-–ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂ –≤—ñ–¥–µ–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é –¥–æ ${this.maxVideoDuration} —Å–µ–∫—É–Ω–¥`
        );
      }
    });
    photo.hears('–¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏ –º–µ–¥—ñ–∞', async (ctx) => {
      this.isUploaded = true;
      ctx.session.userForm.mediaIds = this.mediaIds;
      await this.saveUserFormToDatabase(ctx.session.userForm);
      await this.db.collection('events').updateMany(
        { userId: ctx.session.userForm.userId },
        {
          $set: {
            lookingForMinAge: ctx.session.userForm.lookingForMinAge,
            lookingForMaxAge: ctx.session.userForm.lookingForMaxAge,
          },
        }
      );
      await ctx.scene.enter('userform');
    });
    photo.hears('üë´ –ó–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫', async (ctx) => {
      await ctx.scene.enter('lookForMatch');
    });
    photo.hears('üçæ –ü–æ–¥—ñ—ó', async (ctx) => {
      await ctx.scene.enter('eventChoose');
    });
    photo.on('message', async (ctx) => {
      await ctx.reply(
        '–ó–∞–≤–∞–Ω—Ç–∞–∂, –±—É–¥—å-–ª–∞—Å–∫–∞, —Å–≤–æ—î —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ',
        Markup.removeKeyboard()
      );
    });
    return photo;
  }

  userFormScene(): Scenes.BaseScene<MySceneContext> {
    const userFormScene = new Scenes.BaseScene<MySceneContext>('userform');
    userFormScene.enter(async (ctx) => {
      const userId = ctx.from?.id;
      if (userId) {
        const userForm = await this.getUserFormDataFromDatabase(userId);
        if (userForm) {
          if (!ctx.session.userForm) {
            ctx.session.userForm = new UserFormModel({});
          }
          Object.assign(ctx.session.userForm, userForm);
          try {
            const chatMember = await ctx.telegram.getChatMember(
              `@crush_ua`,
              userId
            );
            const isMember = ['member', 'administrator'].includes(
              chatMember.status
            );
            if (isMember) {
              ctx.session.userForm.isSubscribedToChannel = true;
              await this.updateUserPropertyToDatabase(ctx.session.userForm, {
                isSubscribedToChannel:
                  ctx.session.userForm.isSubscribedToChannel,
              });
            } else {
              ctx.session.userForm.isSubscribedToChannel = false;
              await this.updateUserPropertyToDatabase(ctx.session.userForm, {
                isSubscribedToChannel:
                  ctx.session.userForm.isSubscribedToChannel,
              });
            }
          } catch (error) {
            console.error('Error checking user membership:', error);
          }
          await this.registerUserLastActivity(userForm.userId);
          let caption =
            `–¢–∞–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:\n\n` +
            (userForm.isPremium && userForm.showPremiumLabel
              ? `‚≠êÔ∏è *Premium Crush*\n\n`
              : '') +
            `*–Ü–º'—è:* ${userForm.username}\n*–í—ñ–∫:* ${userForm.age}\n*–ú—ñ—Å—Ç–æ:* ${userForm.location}`;

          if (userForm.about?.type === 'text') {
            caption = caption + `\n*–ü—Ä–æ —Å–µ–±–µ:* ${userForm.about.content}`;
          }
          caption =
            caption +
            (userForm.isPremium && userForm.showLikesCount
              ? `\n\n*‚ù§Ô∏è ‚Äî ${userForm.likesCount ?? 0}*`
              : '');
          if (userForm.socialLinks && userForm.socialLinks.length > 0) {
            let message = '';
            for (const link of userForm.socialLinks) {
              message = message ? message + ' | ' : message + '';
              message = message + link;
            }
            caption = caption + '\n\n' + message;
          }
          const mediaGroup: MediaGroup = userForm.mediaIds.map(
            (mediaObj: { type: string; id: string }, index: number) => ({
              type: mediaObj.type as 'document',
              media: mediaObj.id,
              caption: index === 0 ? caption : undefined,
              parse_mode: index === 0 ? 'Markdown' : undefined,
            })
          );
          await ctx.replyWithMediaGroup(mediaGroup);
          if (ctx.session.userForm.about?.type === 'voice') {
            await ctx.replyWithVoice(ctx.session.userForm.about.content, {
              caption: '*–ü—Ä–æ —Å–µ–±–µ:*',
              parse_mode: 'Markdown',
            });
          }
          await ctx.reply(
            `‚úçüèª ‚Äî –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å
üÜï ‚Äî –î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é
üéü ‚Äî –ú–æ—ó –ø–æ–¥—ñ—ó
üóÑ ‚Äî –ê—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫
‚≠êÔ∏è ‚Äî –ü—Ä–µ–º—ñ—É–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è`,
            Markup.keyboard([['‚úçüèª', 'üÜï', 'üéü', 'üóÑ', '‚≠êÔ∏è']])
              .oneTime()
              .resize()
          );
        } else {
          await ctx.scene.enter('gender');
        }
      }
    });
    userFormScene.hears('‚úçüèª', async (ctx) => {
      ctx.session.previousScene = ctx.scene.current!.id;
      await ctx.scene.enter('userformEdit');
    });
    userFormScene.hears('üÜï', async (ctx) => {
      ctx.session.previousScene = ctx.scene.current!.id;
      await ctx.scene.enter('eventName');
    });
    userFormScene.hears('üéü', async (ctx) => {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      let events: any;
      let currentEventIndex = 0;
      const userForm = await this.getUserFormDataFromDatabase(ctx.from!.id);
      if (userForm) {
        events = await this.getUserEventsFromDatabase(userForm.userId);
        ctx.session.userForm.userId = ctx.from!.id;
        if (events && events.length > 0) {
          await ctx.reply(`–û—Å—å —Ç–≤–æ—ó –ø–æ–¥—ñ—ó üëáüèª `, Markup.removeKeyboard());
          // eslint-disable-next-line no-empty-pattern
          for (let {} of events) {
            await this.showUserEvent(events, currentEventIndex, ctx);
            currentEventIndex++;
          }
        } else {
          await ctx.reply(
            '–í —Ç–µ–±–µ –Ω–µ–º–∞—î –ø–æ–¥—ñ–π, –º–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É',
            Markup.removeKeyboard()
          );
        }
      } else {
        await ctx.reply(
          '–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–¥—ñ—ó —Å—Ç–≤–æ—Ä–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å',
          Markup.removeKeyboard()
        );
        ctx.session.previousScene = ctx.scene.current!.id;
        await ctx.scene.enter('gender');
      }
      const regex = new RegExp(/^deleteEvent:(.*)$/);
      userFormScene.action(regex, async (ctx) => {
        const userId = +ctx.match[1];

        await this.db.collection('events').deleteOne({ userId: userId });
        await ctx.deleteMessage();
      });
    });
    userFormScene.hears('üóÑ', async (ctx) => {
      ctx.session.previousScene = ctx.scene.current!.id;
      await ctx.scene.enter('likeArchive');
    });
    userFormScene.hears('‚≠êÔ∏è', async (ctx) => {
      if (ctx.session.userForm.isPremium) {
        ctx.session.previousScene = ctx.scene.current!.id;
        await ctx.scene.enter('premiumSettings');
      } else {
        await ctx.reply(
          '–í —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø—Ä–µ–º—ñ—É–º—É, –∞–ª–µ —Ç–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—à –π–æ–≥–æ –ø—Ä–∏–¥–±–∞—Ç–∏ –∞–±–æ –∂ –ø—Ä–æ—Å—Ç–æ –∑–Ω—è—Ç–∏ –ø—Ä–æ –Ω–∞—à –±–æ—Ç –≤—ñ–¥–µ–æ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ—Å—è—á–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –ø—Ä–µ–º—ñ—É–º ü§≥',
          Markup.keyboard([['‚≠êÔ∏è –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º', '–ü—Ä–µ–º—ñ—É–º –∑–∞ –≤—ñ–¥–µ–æ ü§≥']])
            .oneTime()
            .resize()
        );
      }
    });
    userFormScene.hears('‚≠êÔ∏è –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º', async (ctx) => {
      ctx.session.previousScene = ctx.scene.current!.id;
      await ctx.scene.enter('premiumBenefits');
    });
    userFormScene.hears('–ü—Ä–µ–º—ñ—É–º –∑–∞ –≤—ñ–¥–µ–æ ü§≥', async (ctx) => {
      ctx.session.previousScene = ctx.scene.current!.id;
      await ctx.scene.enter('premiumVideo');
    });
    this.addCommands(userFormScene);
    userFormScene.on('message', async (ctx) => {
      await ctx.reply(
        `‚úçüèª ‚Äî –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å
üÜï ‚Äî –î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é
üéü ‚Äî –ú–æ—ó –ø–æ–¥—ñ—ó
üóÑ ‚Äî –ê—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫
‚≠êÔ∏è ‚Äî –ü—Ä–µ–º—ñ—É–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è`,
        Markup.keyboard([['‚úçüèª', 'üÜï', 'üéü', 'üóÑ', '‚≠êÔ∏è']])
          .oneTime()
          .resize()
      );
    });
    return userFormScene;
  }
  private isOneTimeChange = false;
  userFormEditScene(): Scenes.BaseScene<MySceneContext> {
    const userFormEditScene = new Scenes.BaseScene<MySceneContext>(
      'userformEdit'
    );
    userFormEditScene.enter(async (ctx) => {
      await ctx.reply(
        `üë§ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏
‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–æ—à—É–∫—É`,
        Markup.keyboard([['üë§', '‚öôÔ∏è'], ['üîô –ù–∞–∑–∞–¥']])
          .oneTime()
          .resize()
      );
    });
    userFormEditScene.hears('üë§', async (ctx) => {
      ctx.session.previousScene = ctx.scene.current!.id;
      await ctx.scene.enter('profileEdit');
    });
    userFormEditScene.hears('‚öôÔ∏è', async (ctx) => {
      ctx.session.previousScene = ctx.scene.current!.id;
      await ctx.scene.enter('lookForMatchEdit');
    });
    userFormEditScene.hears('üîô –ù–∞–∑–∞–¥', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    this.addCommands(userFormEditScene);
    userFormEditScene.on('message', async (ctx) => {
      await ctx.reply(
        '–û–±–µ—Ä–∏ —â–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏',
        Markup.keyboard([['üë§', '‚öôÔ∏è']])
          .oneTime()
          .resize()
      );
    });
    return userFormEditScene;
  }

  lookForMatchEditScene(): Scenes.BaseScene<MySceneContext> {
    const lookForMatchEditScene = new Scenes.BaseScene<MySceneContext>(
      'lookForMatchEdit'
    );
    lookForMatchEditScene.enter(async (ctx) => {
      let lookingFor = '—ñ —Ö–ª–æ–ø—Ü—ñ–≤ —ñ –¥—ñ–≤—á–∞—Ç';
      if (ctx.session.userForm.lookingFor === 'male') {
        lookingFor = '—Ö–ª–æ–ø—Ü—è';
      } else if (ctx.session.userForm.lookingFor === 'female') {
        lookingFor = '–¥—ñ–≤—á–∏–Ω—É';
      } else {
        lookingFor = '—ñ —Ö–ª–æ–ø—Ü—ñ–≤ —ñ –¥—ñ–≤—á–∞—Ç';
      }
      let ageRangeMessage = `–≤—ñ–∫–æ–º –≤—ñ–¥ *${ctx.session.userForm.lookingForMinAge}* –¥–æ *${ctx.session.userForm.lookingForMaxAge}*`;
      if (
        ctx.session.userForm.lookingForMinAge === 17 &&
        ctx.session.userForm.lookingForMaxAge === 99
      ) {
        ageRangeMessage = '*–±—É–¥—å\\-—è–∫–æ–≥–æ –≤—ñ–∫—É*';
      }
      await ctx.replyWithMarkdownV2(
        `–ù–∞—Ä–∞–∑—ñ —Ç–∏ —à—É–∫–∞—î—à *${lookingFor.replace(
          /([_*[\]()~`>#+=|{}.!-])/g,
          '\\$1'
        )}* ${ageRangeMessage}\n\n1\\. –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—å, —è–∫—É —à—É–∫–∞—é\n2\\. –ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω`,
        Markup.keyboard([['1', '2'], ['üîô –ù–∞–∑–∞–¥']])
          .resize()
          .oneTime()
      );
    });
    lookForMatchEditScene.hears('1', async (ctx) => {
      this.isOneTimeChange = true;
      await ctx.scene.enter('lookingFor');
    });
    lookForMatchEditScene.hears('2', async (ctx) => {
      this.isOneTimeChange = true;
      await ctx.scene.enter('lookingForAge');
    });
    lookForMatchEditScene.hears('üîô –ù–∞–∑–∞–¥', async (ctx) => {
      await ctx.scene.enter(ctx.session.previousScene);
    });
    this.addCommands(lookForMatchEditScene);
    lookForMatchEditScene.on('message', async (ctx) => {
      await ctx.reply(
        '–û–±–µ—Ä–∏ —â–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏',
        Markup.keyboard([['1', '2']])
          .resize()
          .oneTime()
      );
    });
    return lookForMatchEditScene;
  }
  profileEditScene(): Scenes.BaseScene<MySceneContext> {
    const profileEditScene = new Scenes.BaseScene<MySceneContext>(
      'profileEdit'
    );
    profileEditScene.enter(async (ctx) => {
      await ctx.reply(
        `1. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ
2. –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ
3. –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ —Å–µ–±–µ
4. –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ
5. –ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ
6. –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å`,
        Markup.keyboard([['1', '2', '3', '4', '5', '6'], ['üîô –ù–∞–∑–∞–¥']])
          .resize()
          .oneTime()
      );
    });
    profileEditScene.hears('1', async (ctx) => {
      await ctx.scene.enter('gender');
    });
    profileEditScene.hears('2', async (ctx) => {
      await ctx.scene.enter('photo');
    });
    profileEditScene.hears('3', async (ctx) => {
      this.isOneTimeChange = true;
      await ctx.scene.enter('about');
    });
    profileEditScene.hears('4', async (ctx) => {
      this.isOneTimeChange = true;
      await ctx.scene.enter('socialLinks');
    });
    profileEditScene.hears('5', async (ctx) => {
      this.isOneTimeChange = true;
      await ctx.scene.enter('location');
    });
    profileEditScene.hears('6', async (ctx) => {
      await ctx.reply(
        `–ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.
        
–ê–Ω–∫–µ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è, —è–∫—â–æ –≤–∏ –∑–Ω–æ–≤—É —Ä–æ–∑–ø–æ—á–Ω–µ—Ç–µ –ø–æ—à—É–∫ üë•
        
–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–±—Ä–∞—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∑ –ø–æ—à—É–∫—É?`,
        Markup.keyboard([
          ['‚úÖ –¢–∞–∫, –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑ –ø–æ—à—É–∫—É', '‚ùå –ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥'],
        ]).resize()
      );
    });
    profileEditScene.hears('üîô –ù–∞–∑–∞–¥', async (ctx) => {
      await ctx.scene.enter(ctx.session.previousScene);
    });
    profileEditScene.hears('‚úÖ –¢–∞–∫, –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑ –ø–æ—à—É–∫—É', async (ctx) => {
      await this.db
        .collection('users')
        .updateOne({ userId: ctx.from.id }, { $set: { isActive: false } });
      await ctx.reply(
        '–î—è–∫—É—î–º–æ –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º. –°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—å, —â–æ –≤–∏ —á—É–¥–æ–≤–æ –ø—Ä–æ–≤–µ–ª–∏ —á–∞c üñ§',
        Markup.removeKeyboard()
      );
    });
    profileEditScene.hears('‚ùå –ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥', async (ctx) => {
      await ctx.reply(
        `1. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ
2. –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ
3. –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ —Å–µ–±–µ
4. –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ
5. –ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ
6. –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å`,
        Markup.keyboard([['1', '2', '3', '4', '5', '6']])
          .resize()
          .oneTime()
      );
    });
    this.addCommands(profileEditScene);
    profileEditScene.on('message', async (ctx) => {
      await ctx.reply(
        '–û–±–µ—Ä–∏ —â–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏',
        Markup.keyboard([['1', '2', '3', '4', '5', '6']])
          .oneTime()
          .resize()
      );
    });
    return profileEditScene;
  }
  eventMenuScene(): Scenes.BaseScene<MySceneContext> {
    const eventMenu = new Scenes.BaseScene<MySceneContext>('eventMenu');
    eventMenu.enter(async (ctx) => {
      await ctx.reply(
        `–ß—É–¥–æ–≤–æ ) –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ 
–ø–µ—Ä–µ–ª—ñ–∫–æ–º –ø–æ–¥—ñ–π –∞–±–æ –¥–æ–¥–∞—Ç–∏ —Å–≤–æ—é`,
        Markup.inlineKeyboard([
          Markup.button.callback('–î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é', 'addEvent'),
          Markup.button.callback('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–æ—Å–æ–∫ –ø–æ–¥—ñ–π', 'viewEvent'),
        ])
      );
    });
    this.addCommands(eventMenu);
    eventMenu.action('addEvent', async (ctx) => {
      await ctx.scene.enter('eventName');
    });
    eventMenu.action('viewEvent', async (ctx) => {
      await ctx.scene.enter('eventList');
    });
    eventMenu.on('message', async (ctx) => {
      await ctx.reply('–î–æ–¥–∞–π –ø–æ–¥—ñ—é –∞–±–æ –æ–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É');
    });
    return eventMenu;
  }
  eventNameScene(): Scenes.BaseScene<MySceneContext> {
    const eventName = new Scenes.BaseScene<MySceneContext>('eventName');
    eventName.enter(async (ctx) => {
      this.event = {
        userId: NaN,
        eventId: Math.floor(Math.random() * 1000),
        eventName: '',
        date: '',
        about: undefined,
        lookingFor: '',
        location: '',
        lookingForMinAge: NaN,
        lookingForMaxAge: NaN,
      };
      ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó', Markup.removeKeyboard());
    });
    this.addCommands(eventName);
    eventName.on('text', async (ctx) => {
      this.event.eventName = ctx.message.text;
      this.event.userId = ctx.message.from.id;
      await ctx.scene.enter('eventTime');
    });
    eventName.on('message', async (ctx) => {
      await ctx.reply('–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó');
    });
    return eventName;
  }
  eventTimeScene(): Scenes.BaseScene<MySceneContext> {
    const eventTime = new Scenes.BaseScene<MySceneContext>('eventTime');
    eventTime.enter(async (ctx) => {
      ctx.reply('–í–∫–∞–∂–∏ –¥–∞—Ç—É –ø–æ–¥—ñ—ó');
    });
    this.addCommands(eventTime);
    eventTime.on('text', async (ctx) => {
      this.event.date = ctx.message.text;
      await ctx.scene.enter('eventAbout');
    });
    eventTime.on('message', async (ctx) => {
      await ctx.reply('–í–∫–∞–∂–∏ –¥–∞—Ç—É –ø–æ–¥—ñ—ó');
    });

    return eventTime;
  }
  eventAboutScene(): Scenes.BaseScene<MySceneContext> {
    const eventAbout = new Scenes.BaseScene<MySceneContext>('eventAbout');
    eventAbout.enter(async (ctx) => {
      ctx.reply(
        '–£—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó/–ø–æ–¥—ñ—ó',
        Markup.keyboard(['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']).resize()
      );
    });
    this.addCommands(eventAbout);
    eventAbout.hears('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', async (ctx) => {
      this.event.about = undefined;
      await ctx.scene.enter('eventLookingFor');
    });
    eventAbout.on('text', async (ctx) => {
      this.event.about = ctx.message.text;
      await ctx.scene.enter('eventLookingFor');
    });
    eventAbout.on('message', async (ctx) => {
      await ctx.reply('–í–∫–∞–∂–∏ –¥–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó');
    });

    return eventAbout;
  }
  eventLookigForScene(): Scenes.BaseScene<MySceneContext> {
    const eventLookingFor = new Scenes.BaseScene<MySceneContext>(
      'eventLookingFor'
    );
    eventLookingFor.enter(async (ctx) => {
      await ctx.reply(
        '–ß—É–¥–æ–≤–æ! –ö–æ–≥–æ –±–∞–∂–∞—î—à –∑–∞–ø—Ä–æ—Å–∏—Ç–∏',
        Markup.keyboard([['–î—ñ–≤—á–∏–Ω—É', '–•–ª–æ–ø—Ü—è', '–ë—É–¥—å-–∫–æ–≥–æ']]).resize()
      );
    });
    this.addCommands(eventLookingFor);
    eventLookingFor.on('text', async (ctx) => {
      switch (ctx.message.text) {
        case '–î—ñ–≤—á–∏–Ω—É':
          this.event.lookingFor = 'female';
          break;
        case '–•–ª–æ–ø—Ü—è':
          this.event.lookingFor = 'male';
          break;
        case '–ë—É–¥—å-–∫–æ–≥–æ':
          this.event.lookingFor = 'both';
          break;
        default:
          await ctx.reply(
            '–û–±–µ—Ä–∏ –∫–æ–≥–æ –±–∞–∂–∞—î—à –∑–∞–ø—Ä–æ—Å–∏—Ç–∏',
            Markup.keyboard([['–î—ñ–≤—á–∏–Ω—É', '–•–ª–æ–ø—Ü—è', '–ë—É–¥—å-–∫–æ–≥–æ']]).resize()
          );
      }
      if (this.event.lookingFor) {
        await ctx.scene.enter('eventLocation');
      }
    });
    eventLookingFor.on('message', async (ctx) => {
      await ctx.reply(
        '–û–±–µ—Ä–∏ –∫–æ–≥–æ –±–∞–∂–∞—î—à –∑–∞–ø—Ä–æ—Å–∏—Ç–∏',
        Markup.keyboard([['–î—ñ–≤—á–∏–Ω—É', '–•–ª–æ–ø—Ü—è', '–ë—É–¥—å-–∫–æ–≥–æ']]).resize()
      );
    });
    return eventLookingFor;
  }

  eventLocationScene(): Scenes.BaseScene<MySceneContext> {
    const eventLocation = new Scenes.BaseScene<MySceneContext>('eventLocation');
    eventLocation.enter(async (ctx) => {
      if (ctx.session.userForm.location) {
        await ctx.reply(
          '–í–∫–∞–∂–∏ –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –±—É–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏—Å—è –ø–æ–¥—ñ—è',
          Markup.keyboard([[ctx.session.userForm.location]])
            .oneTime()
            .resize()
        );
      } else {
        await ctx.reply(
          '–í–∫–∞–∂–∏ –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –±—É–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏—Å—è –ø–æ–¥—ñ—è',
          Markup.removeKeyboard()
        );
      }
    });
    this.addCommands(eventLocation);
    eventLocation.hears('üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    eventLocation.on('text', async (ctx) => {
      if (ctx.message.text.length > 30) {
        await ctx.reply('–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞');
      } else {
        this.event.location = ctx.message.text;
        this.event.lookingForMinAge = ctx.session.userForm.lookingForMinAge;
        this.event.lookingForMaxAge = ctx.session.userForm.lookingForMaxAge;
        await this.saveEventToDatabase(this.event);
        await ctx.reply(
          `–ë—ñ–Ω–≥–æ! ü•≥\n–¢–≤–æ—è –ø–æ–¥—ñ—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞, —Ç–æ–º—É –æ—á—ñ–∫—É–π –Ω–∞ —Å–≤—ñ–π perfect match —Ç–∞ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–π —á–∞—Å`,
          Markup.keyboard([['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', 'üë´ –ó–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫']])
            .oneTime()
            .resize()
        );
      }
    });
    eventLocation.on('message', async (ctx) => {
      if (ctx.session.userForm.location) {
        await ctx.reply(
          '–í–∫–∞–∂–∏ –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –±—É–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏—Å—è –ø–æ–¥—ñ—è',
          Markup.keyboard([[ctx.session.userForm.location]])
            .oneTime()
            .resize()
        );
      } else {
        await ctx.reply(
          '–í–∫–∞–∂–∏ –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –±—É–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏—Å—è –ø–æ–¥—ñ—è',
          Markup.removeKeyboard()
        );
      }
    });
    return eventLocation;
  }
  // eventAgeRangeScene(): Scenes.BaseScene<MySceneContext> {
  //   const eventAgeRange = new Scenes.BaseScene<MySceneContext>('eventAgeRange');
  //   eventAgeRange.enter(async (ctx) => {
  //     ctx.reply(
  //       '–Ø–∫–∏–π –≤—ñ–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω?',
  //       Markup.keyboard([['18-20', '20-22', '22-25', '–ë—É–¥—å-—è–∫–∏–π']]).resize()
  //     );
  //   });
  //   this.addCommands(eventAgeRange);
  //   const handleAgeRange = async (ctx: MySceneContext, ageRange: string) => {
  //     this.event.ageRange = ageRange;
  //     await ctx.reply(
  //       `–ë—ñ–Ω–≥–æ! –û—á—ñ–∫—É–π –Ω–∞ —Å–≤—ñ–π perfect match —Ç–∞ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–π —á–∞—Å )`,
  //       Markup.removeKeyboard()
  //     );
  //     await this.saveEventToDatabase(this.event);
  //   };

  //   eventAgeRange.hears('18-20', async (ctx) => {
  //     await handleAgeRange(ctx, '18-20');
  //   });

  //   eventAgeRange.hears('20-22', async (ctx) => {
  //     await handleAgeRange(ctx, '20-22');
  //   });

  //   eventAgeRange.hears('22-25', async (ctx) => {
  //     await handleAgeRange(ctx, '22-25');
  //   });

  //   eventAgeRange.hears('–ë—É–¥—å-—è–∫–∏–π', async (ctx) => {
  //     await handleAgeRange(ctx, '–ë—É–¥—å-—è–∫–∏–π');
  //   });
  //   eventAgeRange.on('message', async (ctx) => {
  //     await ctx.reply('–û–±–µ—Ä–∏ –≤—ñ–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω');
  //   });

  //   return eventAgeRange;
  // }
  eventChooseScene(): Scenes.BaseScene<MySceneContext> {
    const eventChoose = new Scenes.BaseScene<MySceneContext>('eventChoose');
    eventChoose.enter(async (ctx) => {
      await ctx.reply(
        `–û–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–¥—ñ–π, —è–∫—ñ —Ö–æ—á–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏\n\nüçæ ‚Äî –ü–æ–¥—ñ—ó, —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏\nüé´ ‚Äî –ü–æ–¥—ñ—ó, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ Crush`,
        Markup.keyboard([['üçæ', 'üé´']])
          .oneTime()
          .resize()
      );
    });
    eventChoose.hears('üçæ', async (ctx) => {
      await ctx.scene.enter('eventList');
    });
    eventChoose.hears('üé´', async (ctx) => {
      await ctx.scene.enter('botEventList');
    });
    this.addCommands(eventChoose);
    eventChoose.on('message', async (ctx) => {
      await ctx.reply(
        `–û–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–¥—ñ–π, —è–∫—ñ —Ö–æ—á–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏\n\nüçæ ‚Äî –ü–æ–¥—ñ—ó, —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏\nüé´ ‚Äî –ü–æ–¥—ñ—ó, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ Crush`,
        Markup.keyboard([['üçæ', 'üé´']])
          .oneTime()
          .resize()
      );
    });
    return eventChoose;
  }

  botEventNameScene(): Scenes.BaseScene<MySceneContext> {
    const botEventName = new Scenes.BaseScene<MySceneContext>('botEventName');
    botEventName.enter(async (ctx) => {
      await ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó', Markup.removeKeyboard());
    });
    this.addCommands(botEventName);
    botEventName.on('text', async (ctx) => {
      this.botEvent.eventName = ctx.message.text;
      this.botEvent.eventId = Math.floor(Math.random() * 1000);
      await ctx.scene.enter('botEventTime');
    });
    botEventName.on('message', async (ctx) => {
      await ctx.reply('–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó');
    });
    return botEventName;
  }
  botEventTimeScene(): Scenes.BaseScene<MySceneContext> {
    const botEventTime = new Scenes.BaseScene<MySceneContext>('botEventTime');
    botEventTime.enter(async (ctx) => {
      await ctx.reply('–í–∫–∞–∂–∏ –¥–∞—Ç—É –ø–æ–¥—ñ—ó');
    });
    this.addCommands(botEventTime);
    botEventTime.on('text', async (ctx) => {
      this.botEvent.date = ctx.message.text;
      await ctx.scene.enter('botEventAbout');
    });
    botEventTime.on('message', async (ctx) => {
      await ctx.reply('–í–∫–∞–∂–∏ –¥–∞—Ç—É –ø–æ–¥—ñ—ó');
    });

    return botEventTime;
  }
  botEventAboutScene(): Scenes.BaseScene<MySceneContext> {
    const botEventAbout = new Scenes.BaseScene<MySceneContext>('botEventAbout');
    botEventAbout.enter(async (ctx) => {
      await ctx.reply(
        '–£—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó/–ø–æ–¥—ñ—ó',
        Markup.keyboard(['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']).oneTime().resize()
      );
    });
    this.addCommands(botEventAbout);
    botEventAbout.hears('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', async (ctx) => {
      this.botEvent.about = '';
      await ctx.scene.enter('botEventLocation');
    });
    botEventAbout.on('text', async (ctx) => {
      this.botEvent.about = ctx.message.text;
      await ctx.scene.enter('botEventLocation');
    });
    botEventAbout.on('message', async (ctx) => {
      await ctx.reply('–í–∫–∞–∂–∏ –¥–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó');
    });

    return botEventAbout;
  }

  botEventLocationScene(): Scenes.BaseScene<MySceneContext> {
    const botEventLocation = new Scenes.BaseScene<MySceneContext>(
      'botEventLocation'
    );
    botEventLocation.enter(async (ctx) => {
      if (ctx.session.userForm.location) {
        await ctx.reply(
          '–í–∫–∞–∂–∏ –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –±—É–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏—Å—è –ø–æ–¥—ñ—è',
          Markup.keyboard([[ctx.session.userForm.location]])
            .oneTime()
            .resize()
        );
      } else {
        await ctx.reply(
          '–í–∫–∞–∂–∏ –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –±—É–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏—Å—è –ø–æ–¥—ñ—è',
          Markup.removeKeyboard()
        );
      }
    });
    this.addCommands(botEventLocation);
    botEventLocation.on('text', async (ctx) => {
      if (ctx.message.text.length > 30) {
        await ctx.reply('–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞');
      } else {
        this.botEvent.location = ctx.message.text;
        await ctx.scene.enter('botEventPhoto');
      }
    });
    botEventLocation.on('message', async (ctx) => {
      if (ctx.session.userForm.location) {
        await ctx.reply(
          '–í–∫–∞–∂–∏ –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –±—É–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏—Å—è –ø–æ–¥—ñ—è',
          Markup.keyboard([[ctx.session.userForm.location]])
            .oneTime()
            .resize()
        );
      } else {
        await ctx.reply(
          '–í–∫–∞–∂–∏ –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –±—É–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏—Å—è –ø–æ–¥—ñ—è',
          Markup.removeKeyboard()
        );
      }
    });
    return botEventLocation;
  }

  botEventPhotoScene(): Scenes.BaseScene<MySceneContext> {
    const botEventPhoto = new Scenes.BaseScene<MySceneContext>('botEventPhoto');
    const handleMediaUpload = async (
      ctx: MySceneContext,
      mediaType: string,
      mediaId: string
    ) => {
      let type = '–§–æ—Ç–æ';
      this.botEvent.mediaIds.push({ type: mediaType, id: mediaId });
      if (mediaType === 'video') {
        type = '–í—ñ–¥–µ–æ';
      } else {
        type = '–§–æ—Ç–æ';
      }
      await ctx.reply(
        `‚úÖ ${type} ‚Ññ${this.botEvent.mediaIds.length} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ`,
        Markup.keyboard([['–¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏ –º–µ–¥—ñ–∞']])
          .oneTime()
          .resize()
      );
    };
    botEventPhoto.enter(async (ctx) => {
      await ctx.reply(
        '–ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –ø–æ–¥—ñ—ó',
        Markup.keyboard([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']])
          .oneTime()
          .resize()
      );
      this.botEvent.mediaIds = [];
    });
    botEventPhoto.on('photo', async (ctx) => {
      const photos = ctx.message.photo;
      photos.sort((a, b) => {
        const resolutionA = a.width * a.height;
        const resolutionB = b.width * b.height;
        return resolutionB - resolutionA;
      });
      await handleMediaUpload(ctx, 'photo', photos[0].file_id);
    });
    botEventPhoto.on('video', async (ctx) => {
      await handleMediaUpload(ctx, 'video', ctx.message.video.file_id);
    });
    botEventPhoto.hears('–¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏ –º–µ–¥—ñ–∞', async (ctx) => {
      await this.db.collection('bot_events').insertOne(this.botEvent);
      await ctx.reply('–ü–æ–¥—ñ—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ ü•≥');
    });
    this.addCommands(botEventPhoto);
    botEventPhoto.hears('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', async (ctx) => {
      this.botEvent.mediaIds = [];
      await this.db.collection('bot_events').insertOne(this.botEvent);
      await ctx.reply('–ü–æ–¥—ñ—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ ü•≥');
    });
    botEventPhoto.on('message', async (ctx) => {
      await ctx.reply(
        '–ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –ø–æ–¥—ñ—ó',
        Markup.keyboard([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']])
          .oneTime()
          .resize()
      );
    });
    return botEventPhoto;
  }

  botEventListScene(): Scenes.BaseScene<MySceneContext> {
    const botEventList = new Scenes.BaseScene<MySceneContext>('botEventList');
    let currentEventIndex = 0;
    let events: Event[];
    botEventList.enter(async (ctx) => {
      const user = await this.getUserFormDataFromDatabase(ctx.from!.id);
      if (user) {
        if (!ctx.session.userForm) {
          ctx.session.userForm = new UserFormModel({});
        }
        Object.assign(ctx.session.userForm, user);
        events = (await this.getBotEventsListFromDatabase(
          user.actualLocation
        )) as unknown as Event[];
        if (events && events.length > 0) {
          await ctx.reply(
            '–û—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π —É —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ üëáüèª',
            Markup.keyboard([['‚ù§Ô∏è', 'üëé']]).resize()
          );
          currentEventIndex = 0;
          try {
            await this.showBotEvent(events, currentEventIndex, ctx);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
          } catch (error: any) {
            if (error instanceof TelegramError) {
              if (
                error.description !== 'Bad Request: chat not found' &&
                error.description !== 'Forbidden: bot was blocked by the user'
              ) {
                console.error('Error showing bot event', error);
              }
            } else {
              console.error(error);
            }
          }
        } else {
          await ctx.reply(
            `–°—Ö–æ–∂–µ –≤ —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ –ø–æ–¥—ñ–π –Ω–µ–º–∞—î, –∑–≤'—è–∂–∏—Å—å –∑ –ø—ñ–¥—Ä–∏–º–∫–æ—é, —è–∫—â–æ —Ö–æ—á–µ—à –ø–æ–±–∞—á–∏—Ç–∏ –ø—ñ–¥–±—ñ—Ä–∫—É –ø–æ–¥—ñ–π —É —Å–≤–æ—î–º—É –º—ñ—Å—Ç—ñ`,
            Markup.removeKeyboard()
          );
        }
        await this.registerUserLastActivity(user.userId);
      }
    });
    botEventList.hears('‚ù§Ô∏è', async (ctx) => {
      if (!ctx.session.eventDetails?.lookingFor) {
        ctx.session.eventDetails = {
          lookingFor: '',
          eventId: 0,
        };
      }
      ctx.session.eventDetails.eventId = events[currentEventIndex].eventId;
      currentEventIndex++;
      await ctx.scene.enter('botEventLookingFor');
    });
    botEventList.hears('üëé', async (ctx) => {
      currentEventIndex++;
      await this.showBotEvent(events, currentEventIndex, ctx);
    });
    botEventList.hears('üë§ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    this.addCommands(botEventList);
    botEventList.on('message', async (ctx) => {
      await ctx.reply('–û–±–µ—Ä–∏ –ø–æ–¥—ñ—é –Ω–∞ —è–∫—É —Ö–æ—á–µ—à –ø—ñ—Ç–∏ –∑ –∫–∏–º–æ—Å—å');
    });
    return botEventList;
  }

  private isLookingForEventMatch = false;
  botEventLookingForScene(): Scenes.BaseScene<MySceneContext> {
    const botEventLookingFor = new Scenes.BaseScene<MySceneContext>(
      'botEventLookingFor'
    );
    botEventLookingFor.enter(async (ctx) => {
      await ctx.reply(
        '–ß—É–¥–æ–≤–æ! –ö–æ–≥–æ –±–∞–∂–∞—î—à –∑–∞–ø—Ä–æ—Å–∏—Ç–∏',
        Markup.keyboard([['–î—ñ–≤—á–∏–Ω—É', '–•–ª–æ–ø—Ü—è', '–ë—É–¥—å-–∫–æ–≥–æ']]).resize()
      );
    });
    this.addCommands(botEventLookingFor);
    botEventLookingFor.on('text', async (ctx) => {
      switch (ctx.message.text) {
        case '–î—ñ–≤—á–∏–Ω—É':
          ctx.session.eventDetails.lookingFor = 'female';
          break;
        case '–•–ª–æ–ø—Ü—è':
          ctx.session.eventDetails.lookingFor = 'male';
          break;
        case '–ë—É–¥—å-–∫–æ–≥–æ':
          ctx.session.eventDetails.lookingFor = 'both';
          break;
        default:
          await ctx.reply(
            '–û–±–µ—Ä–∏ –∫–æ–≥–æ –±–∞–∂–∞—î—à –∑–∞–ø—Ä–æ—Å–∏—Ç–∏',
            Markup.keyboard([['–î—ñ–≤—á–∏–Ω—É', '–•–ª–æ–ø—Ü—è', '–ë—É–¥—å-–∫–æ–≥–æ']]).resize()
          );
      }
      if (ctx.session.eventDetails.lookingFor) {
        this.isLookingForEventMatch = true;
        await ctx.scene.enter('lookForMatch');
      }
    });
    botEventLookingFor.on('message', async (ctx) => {
      await ctx.reply(
        '–û–±–µ—Ä–∏ –∫–æ–≥–æ –±–∞–∂–∞—î—à –∑–∞–ø—Ä–æ—Å–∏—Ç–∏',
        Markup.keyboard([['–î—ñ–≤—á–∏–Ω—É', '–•–ª–æ–ø—Ü—è', '–ë—É–¥—å-–∫–æ–≥–æ']]).resize()
      );
    });
    return botEventLookingFor;
  }

  eventListScene(): Scenes.BaseScene<MySceneContext> {
    const eventList = new Scenes.BaseScene<MySceneContext>('eventList');
    let currentEventIndex = 0;
    let eventUserId = 0;
    let eventId = 0;
    let event: Event | null;
    //let currentUserIndex = 0;
    let events: Event[];
    eventList.enter(async (ctx) => {
      const userForm = await this.getUserFormDataFromDatabase(ctx.from!.id);
      if (userForm) {
        if (!ctx.session.userForm?.userId) {
          ctx.session.userForm = new UserFormModel({});
        }
        Object.assign(ctx.session.userForm, userForm);
        eventUserId = 0;
        eventId = 0;
        event = null;
        events = (await this.getEventsFromDatabase(
          userForm.userId,
          userForm.gender,
          userForm.actualLocation,
          userForm.age
        )) as unknown as Event[];
        await ctx.reply(`üçæ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –ø–æ—à—É–∫ –ø–æ–¥—ñ–π...

–°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—å, –≤–∏ —á—É–¥–æ–≤–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ —á–∞—Å.
        
üëÄ –ù–∞–≥–∞–¥–∞—î–º–æ, —â–æ —Ç—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ —Ü—ñ–∫–∞–≤—É –¥–ª—è —Å–µ–±–µ –ø–æ–¥—ñ—é —Ç–∞ –ø—ñ—Ç–∏ –Ω–∞ –Ω–µ—ó –∑ —Ç–∏–º, —Ö—Ç–æ —Å—Ç–≤–æ—Ä–∏–≤ —Ü—é –ø–æ–¥—ñ—é!`);
        currentEventIndex = 0;
        ctx.session.userForm.userId = ctx.from!.id;
        if (events && events.length > 0) {
          await ctx.reply('–°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π üëáüèª', Markup.removeKeyboard());
          await this.showEvent(events, currentEventIndex, ctx);
        } else {
          await ctx.reply(
            '–ë—ñ–ª—å—à–µ –ø–æ–¥—ñ–π –Ω–µ–º–∞—î, –º–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É',
            Markup.removeKeyboard()
          );
        }
        await this.registerUserLastActivity(userForm.userId);
      } else {
        await ctx.reply(
          '–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–¥—ñ—ó —Å—Ç–≤–æ—Ä–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å',
          Markup.removeKeyboard()
        );
        await ctx.scene.enter('gender');
      }
    });

    eventList.action('nextEvent', async (ctx) => {
      currentEventIndex++;
      await this.showEvent(events, currentEventIndex, ctx);
      await ctx.editMessageReplyMarkup(undefined);
    });
    const regex = new RegExp(/^inviteToEvent:(.*):(.*)$/);
    eventList.action(regex, async (ctx) => {
      eventUserId = +ctx.match[1];
      eventId = +ctx.match[2];
      const eventUser = (await this.getUserFormDataFromDatabase(
        eventUserId
      )) as unknown as UserForm;
      if (eventUser) {
        event = (await this.getEventFromDatabase(
          eventUserId,
          eventId
        )) as unknown as Event;
        if (event) {
          await ctx.editMessageReplyMarkup(undefined);
          const mediaGroup = this.showUserProfile(
            eventUser,
            ctx.session.userForm
          );
          await ctx.reply(
            '–Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é üëáüèª',
            Markup.keyboard([['‚ù§Ô∏è', 'üëé']]).resize()
          );
          await ctx.replyWithMediaGroup(mediaGroup);
          if (eventUser.about && eventUser.about.type === 'voice') {
            await ctx.replyWithVoice(eventUser.about.content, {
              caption: '*–ü—Ä–æ —Å–µ–±–µ:*',
              parse_mode: 'Markdown',
            });
          }
        } else {
          await ctx.reply('–°—Ö–æ–∂–µ —Ç–∞–∫–æ—ó –ø–æ–¥—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
      } else {
        await ctx.reply('–°—Ö–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—Ö–æ–≤–∞–≤ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å');
      }

      // Intive to event code
      // currentUserIndex = 0;
      // const userId = ctx.from!.id;
      // const eventName = ctx.match[1];
      // const eventDate = ctx.match[2];
      // try {
      //   const userFormData = await this.getUserFormDataFromDatabase(userId);
      //   if (userFormData) {
      //     Object.assign(ctx.session.userForm, userFormData);
      //   }
      //   // eslint-disable-next-line @typescript-eslint/no-explicit-any
      //   const query: any = {
      //     userId: { $ne: userId },
      //     actualLocation: ctx.session.userForm.actualLocation,
      //     gender:
      //       ctx.session.userForm.lookingFor === 'both'
      //         ? { $in: ['male', 'female'] }
      //         : ctx.session.userForm.lookingFor,
      //     lookingFor: { $in: [ctx.session.userForm.gender, 'both'] },
      //   };
      //
      //
      //   const userMatchForms = await db
      //     .collection('users')
      //     .find(query)
      //     .toArray();
      //   await this.sendUserDetails(
      //     userMatchForms as unknown as UserForm[],
      //     currentUserIndex,
      //     ctx
      //   );
      //   eventList.hears('‚ù§Ô∏è', async () => {
      //     currentUserIndex++;
      //     this.sendUserDetails(
      //       userMatchForms as unknown as UserForm[],
      //       currentUserIndex,
      //       ctx
      //     );
      //     if (currentUserIndex > 0) {
      //       const previousUser = userMatchForms[currentUserIndex - 1];
      //       const previousUserId = previousUser.userId;
      //       try {
      //         let username = ctx.from?.username;
      //         if (username) {
      //           username = '@' + username;
      //         }
      //         const userId = ctx.from!.id;
      //         const userLink = `tg://user?id=${userId}`;
      //         const mentionMessage =
      //           username || `[${ctx.from?.first_name}](${userLink})`;
      //         const userForm = await this.getUserFormDataFromDatabase(userId);
      //       if (userForm) {
      //         await ctx.telegram.sendPhoto(previousUserId, userForm.photoId, {
      //           caption: `${ctx.session.userForm.username}, ${ctx.session.userForm.age}, ${ctx.session.userForm.location}, —Ö–æ—á–µ –ø—ñ—Ç–∏ –∑ —Ç–æ–±–æ—é –Ω–∞ –ø–æ–¥—ñ—é ${eventName} ${eventDate}. –û–±–≥–æ–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—ñ —Ç–∞ –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ–¥—ñ—Ç—å —Ü–µ–π —á–∞—Å üëã`,
      //           parse_mode: 'Markdown',
      //           reply_markup: {
      //             inline_keyboard: [
      //               [
      //                 {
      //                   text: '‚ù§Ô∏è',
      //                   callback_data: `likeEvent:${userId}:${mentionMessage}`,
      //                 },
      //                 {
      //                   text: 'üëé',
      //                   callback_data: `dislikeEvent:${userId}:${ctx.from?.username}`,
      //                 },
      //               ],
      //             ],
      //           },
      //         });
      //         await ctx.reply(
      //           `–°—É–ø–µ—Ä! –û—á—ñ–∫—É–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞ –ø–æ–¥—ñ—ó ü•≥ –ë–∞–∂–∞—é –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å üëã`,
      //           Markup.removeKeyboard()
      //         );
      //       }
      //     } catch (error) {
      //       console.error('Error sending notification:', error);
      //     }
      //   }
      // });
      // eventList.hears('üëé', () => {
      //   currentUserIndex++;
      //   this.sendUserDetails(
      //     userMatchForms as unknown as UserForm[],
      //     currentUserIndex,
      //     ctx
      //   );
      // });
      // } catch (error) {
      //   console.error('Error getting userForm data from db', error);
      // }
    });
    eventList.hears('‚ù§Ô∏è', async (ctx) => {
      const userForm = await this.getUserFormDataFromDatabase(ctx.from.id);
      if (userForm) {
        let username = ctx.from?.username;
        if (username) {
          username = '@' + username;
        }
        const userId = ctx.from!.id;
        const userLink = `tg://user?id=${userId}`;
        const mentionMessage =
          username || `[${ctx.from?.first_name}](${userLink})`;
        // const userAbout = userForm.about ? `, ${userForm.about}` : '';
        // const eventAbout = event.about ? `, ${event.about}` : '';
        const insertData: {
          senderId: number;
          receiverId: number;
          senderMentionMessage: string;
          eventId?: number;
          isUserEvent: boolean;
        } = {
          senderId: userId,
          receiverId: eventUserId,
          senderMentionMessage: mentionMessage,
          eventId: eventId,
          isUserEvent: true,
        };
        if (eventUserId === 0) {
          return;
        }
        const result = await this.db.collection('matches').updateOne(
          {
            eventId: eventId,
            senderId: userId,
            receiverId: eventUserId,
            isUserEvent: true,
          },
          { $set: insertData },
          { upsert: true }
        );
        //               await ctx.telegram.sendPhoto(eventUserId, userForm.photoId, {
        //                 caption: `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –±–∞–∂–∞—î –ø—ñ—Ç–∏ –∑ —Ç–æ–±–æ—é –Ω–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É —Ç–æ–±–æ—é –ø–æ–¥—ñ—é:

        // üßòüèº*–ö—Ä–∞—à:* ${userForm.username}, ${userForm.age}, ${userForm.location}${userAbout}

        // üéü *–ü–æ–¥—ñ—è:* ${event.eventName}, ${event.date}${eventAbout}`,
        //                 parse_mode: 'Markdown',
        //                 reply_markup: {
        //                   inline_keyboard: [
        //                     [
        //                       {
        //                         text: '‚ù§Ô∏è',
        //                         callback_data: `likeEvent:${userId}:${mentionMessage}`,
        //                       },
        //                       {
        //                         text: 'üëé',
        //                         callback_data: `dislikeEvent`,
        //                       },
        //                     ],
        //                   ],
        //                 },
        //               });
        if (result.upsertedCount === 1) {
          try {
            let message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –≤—ñ–¥–≥—É–∫–Ω—É–≤—Å—è –Ω–∞ —Ç–≤–æ—é –ø–æ–¥—ñ—é, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
            if (event) {
              message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –≤—ñ–¥–≥—É–∫–Ω—É–≤—Å—è –Ω–∞ —Ç–≤–æ—é –ø–æ–¥—ñ—é *${event.eventName}*, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
            }
            await ctx.telegram.sendMessage(eventUserId, message, {
              parse_mode: 'Markdown',
              reply_markup: {
                keyboard: [['üóÑ –ü–µ—Ä–µ–π—Ç–∏ —É –∞—Ä—Ö—ñ–≤']],
                resize_keyboard: true,
              },
            });
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
          } catch (error: any) {
            if (error instanceof TelegramError) {
              if (
                error.description !== 'Bad Request: chat not found' &&
                error.description !== 'Forbidden: bot was blocked by the user'
              ) {
                console.error('Event like error:', error);
              }
            } else {
              console.error(error);
            }
          }
        }
        await ctx.reply(
          `–°—É–ø–µ—Ä! –û—á—ñ–∫—É–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞ –ø–æ–¥—ñ—ó ü•≥\n\n–ú–æ–∂–µ—à —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫, –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ —ñ–Ω—à–∏–º–∏ –ø–æ–¥—ñ—è–º–∏ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\nüë´ ‚Äî –†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫\nüçæ ‚Äî –û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ —ñ–Ω—à–∏–º–∏ –ø–æ–¥—ñ—è–º–∏\nüë§ ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å`,
          Markup.keyboard([['üë´', 'üçæ', 'üë§']])
            .oneTime()
            .resize()
        );
        await this.db
          .collection('users')
          .updateOne({ userId: eventUserId }, { $inc: { likesCount: 1 } });
        eventUserId = 0;
      } else {
        await ctx.reply('–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É');
        await ctx.scene.enter('gender');
      }
    });
    eventList.hears('üëé', async (ctx) => {
      if (eventUserId === 0) {
        return;
      }
      await ctx.reply('–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —à—É–∫–∞—Ç–∏...');
      currentEventIndex++;
      await this.showEvent(events, currentEventIndex, ctx);
      eventUserId = 0;
    });
    eventList.hears('üë´', async (ctx) => {
      await ctx.scene.enter('lookForMatch');
    });
    eventList.hears('üçæ', async (ctx) => {
      await ctx.scene.enter('eventChoose');
    });
    eventList.hears('üë§', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    this.addCommands(eventList);
    eventList.on('message', async (ctx) => {
      await ctx.reply('–û–±–µ—Ä–∏ –ø–æ–¥—ñ—é –Ω–∞ —è–∫—É –±–∞–∂–∞—î—à –ø—ñ—Ç–∏');
    });
    return eventList;
  }
  private reportedUserId: number | undefined = undefined;
  private isProfilesEnded = false;
  private isProfilesWithLocationEnded = false;
  private isLikeMessage = false;
  private insertData: Match | undefined;
  lookForMatchScene(): Scenes.BaseScene<MySceneContext> {
    const lookForMatch = new Scenes.BaseScene<MySceneContext>('lookForMatch');
    let currentUserIndex = 0;
    let userMaxLikesLimit = MAX_LIKES_LIMIT;
    let isMaxLikeCount = false;
    let additionalChannelMembershipCheck = false;
    let job: cron.ScheduledTask;
    let userMatchForms: UserForm[];
    lookForMatch.enter(async (ctx) => {
      this.isProfilesEnded = false;
      this.isLikeMessage = false;
      this.insertData = undefined;
      isMaxLikeCount = false;
      this.isProfilesWithLocationEnded = false;
      const userFormData = await this.getUserFormDataFromDatabase(ctx.from!.id);
      if (userFormData && userFormData.banExpirationDate) {
        await ctx.reply('–¢–∏ –≤ –±–∞–Ω—ñ');
        return;
      }
      currentUserIndex = 0;
      if (userFormData) {
        if (!ctx.session.userForm) {
          ctx.session.userForm = new UserFormModel({});
        }
        Object.assign(ctx.session.userForm, userFormData);
        try {
          const chatMember = await ctx.telegram.getChatMember(
            `@crush_ua`,
            ctx.session.userForm.userId
          );
          const isMember = ['member', 'administrator'].includes(
            chatMember.status
          );
          if (isMember) {
            ctx.session.userForm.isSubscribedToChannel = true;
            userMaxLikesLimit = MAX_LIKES_LIMIT + 3;
            isMaxLikeCount = true;
            await this.updateUserPropertyToDatabase(ctx.session.userForm, {
              isSubscribedToChannel: ctx.session.userForm.isSubscribedToChannel,
            });
          } else {
            ctx.session.userForm.isSubscribedToChannel = false;
            userMaxLikesLimit = MAX_LIKES_LIMIT;
            isMaxLikeCount = false;
            await this.updateUserPropertyToDatabase(ctx.session.userForm, {
              isSubscribedToChannel: ctx.session.userForm.isSubscribedToChannel,
            });
          }
        } catch (error) {
          console.error('Error checking user membership:', error);
        }
        await this.registerUserLastActivity(userFormData.userId);
        await ctx.reply(
          `üë´ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫...

–°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—å, —Ç–∏ –∑–Ω–∞–π–¥–µ—à —Å–≤–æ–≥–æ –∫—Ä–∞—à–∞
            
üëÄ –ü–∞–º —è—Ç–∞–π—Ç–µ, —â–æ –ª—é–¥–∏ –≤ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ —Ç–∏–º–∏, –∑–∞ –∫–æ–≥–æ —Å–µ–±–µ –≤–∏–¥–∞—é—Ç—å`,
          Markup.keyboard([['‚ù§Ô∏è', '‚ù§Ô∏è‚Äçüî•', 'üëé', 'üëÆ‚Äç‚ôÇÔ∏è –°–∫–∞—Ä–≥–∞']]).resize()
        );
        if (!ctx.session.userForm.isActive) {
          ctx.session.userForm.isActive = true;
          await this.db
            .collection('users')
            .updateOne({ userId: ctx.from!.id }, { $set: { isActive: true } });
          await ctx.reply('–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º —Ç–µ–±–µ ü§ó\n–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –∑–Ω–æ–≤—É —É –ø–æ—à—É–∫—É');
        }
        const viewQuery = [
          {
            $match: {
              viewerUserId: ctx.session.userForm.userId,
            },
          },
          {
            $group: {
              _id: null,
              viewedUserIds: { $addToSet: '$viewedUserId' },
            },
          },
        ];

        const aggregationResult = await this.db
          .collection('viewed_profiles')
          .aggregate(viewQuery)
          .toArray();
        let distinctViewedUserIds = [];
        if (aggregationResult.length > 0) {
          distinctViewedUserIds = aggregationResult[0].viewedUserIds;
        }
        const pipeline = [
          {
            $match: {
              $and: [
                {
                  userId: { $ne: ctx.session.userForm.userId },
                  actualLocation: ctx.session.userForm.actualLocation,
                  gender:
                    ctx.session.userForm.lookingFor === 'both'
                      ? { $in: ['male', 'female'] }
                      : ctx.session.userForm.lookingFor,
                  lookingFor: { $in: [ctx.session.userForm.gender, 'both'] },
                  isActive: true,
                  isIncognito: false,
                },
                {
                  userId: { $nin: distinctViewedUserIds },
                },
                {
                  $expr: {
                    $and: [
                      {
                        $gte: ['$age', ctx.session.userForm.lookingForMinAge],
                      },
                      {
                        $lte: ['$age', ctx.session.userForm.lookingForMaxAge],
                      },
                      // {
                      //   $lte: ['$lookingForMinAge', ctx.session.userForm.age],
                      // },
                      // {
                      //   $gte: ['$lookingForMaxAge', ctx.session.userForm.age], // CODE FOR AGE RANGE
                      // },
                    ],
                  },
                },
              ],
            },
          },
          {
            $addFields: {
              randomWeight: { $rand: {} },
            },
          },
          {
            $addFields: {
              isPremiumWeight: {
                $cond: {
                  if: { $eq: ['$isPremium', true] },
                  then: { $add: ['$randomWeight', 0.5] },
                  else: '$randomWeight',
                },
              },
            },
          },
          {
            $sort: { isPremiumWeight: -1 },
          },
        ];

        userMatchForms = (await this.db
          .collection('users')
          .aggregate(pipeline)
          .toArray()) as unknown as UserForm[];
        if (userMatchForms.length > 0) {
          await this.sendUserDetails(
            userMatchForms as unknown as UserForm[],
            currentUserIndex,
            ctx
          );
        } else if (userMatchForms.length === 0) {
          userMatchForms = await this.loadProfilesWithoutLocationSpecified(ctx);
          if (userMatchForms.length > 0) {
            await this.sendUserDetails(
              userMatchForms as unknown as UserForm[],
              currentUserIndex,
              ctx
            );
          } else {
            await ctx.reply(
              '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n–°–ø—Ä–æ–±—É–π –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É –∞–±–æ –∑–∞—á–µ–∫–∞–π',
              Markup.removeKeyboard()
            );
          }
        }
        job = cron.schedule('*/2 * * * *', async () => {
          try {
            //every 3 minutes
            console.log('scheduler lookForMatch works!');
            const newProfiles = (await this.db
              .collection('users')
              .aggregate(pipeline)
              .toArray()) as unknown as UserForm[];
            // const unseenProfiles = userMatchForms.slice(currentUserIndex);
            // console.log('unseen :', unseenProfiles)
            const updatedNewProfiles = newProfiles.filter((newProfile) => {
              return !userMatchForms.some((existingProfile) => {
                return existingProfile.userId === newProfile.userId;
              });
            });
            console.log('updatedNewProfiles :', updatedNewProfiles);
            userMatchForms = userMatchForms.concat(updatedNewProfiles);
            console.log('userMatchForms :', userMatchForms);
            const user = await this.getUserFormDataFromDatabase(ctx.from!.id);
            Object.assign(ctx.session.userForm, user);
          } catch (error) {
            console.error(
              'Error while updating profilesList in lookForMatch scene: ',
              error
            );
          }
        });
      } else {
        await ctx.reply(
          '–©–æ–± –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –Ω–µ–æ–±—Ö—ñ–æ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π',
          Markup.removeKeyboard()
        );
        await ctx.scene.enter('gender');
      }
    });
    lookForMatch.hears('‚ù§Ô∏è', async (ctx) => {
      this.isLikeMessage = false;
      if (
        ctx.session.userForm.referrerUserId &&
        !ctx.session.userForm.isRegisteredReferee
      ) {
        ctx.session.userForm.isRegisteredReferee = true;
        await this.db
          .collection('users')
          .updateOne(
            { userId: ctx.session.userForm.referrerUserId },
            { $push: { referees: ctx.from.id } }
          );
        await this.updateUserPropertyToDatabase(ctx.session.userForm, {
          isRegisteredReferee: ctx.session.userForm.isRegisteredReferee,
        });
        const referrerUser = (await this.getUserFormDataFromDatabase(
          ctx.session.userForm.referrerUserId
        )) as unknown as UserForm;
        if (referrerUser) {
          const referralBonusesEndTime = new Date();
          referralBonusesEndTime.setTime(
            referralBonusesEndTime.getTime() + REFERRAL_BONUSES_TIME_DURUATION
          );
          referrerUser.isReferralBonusesActive = true;
          referrerUser.referralBonusesEndTime = referralBonusesEndTime;
          await this.updateUserPropertyToDatabase(referrerUser, {
            isReferralBonusesActive: true,
            referralBonusesEndTime: referralBonusesEndTime,
          });
        }
        await ctx.telegram.sendMessage(
          ctx.session.userForm.referrerUserId,
          `‚ú® –ó–∞ —Ç–≤–æ—ó–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è–º –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –æ–¥–∏–Ω –∫—Ä–∞—à\n–¢–≤–æ—ó –±–æ–Ω—É—Å–∏ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ üéâ`,
          {
            parse_mode: 'Markdown',
          }
        );
      }
      await this.registerUserLastActivity(ctx.session.userForm.userId);
      if (additionalChannelMembershipCheck) {
        try {
          const chatMember = await ctx.telegram.getChatMember(
            `@crush_ua`,
            ctx.session.userForm.userId
          );
          const isMember = ['member', 'administrator'].includes(
            chatMember.status
          );
          if (isMember) {
            ctx.session.userForm.isSubscribedToChannel = true;
            userMaxLikesLimit = MAX_LIKES_LIMIT + 3;
            isMaxLikeCount = true;
            additionalChannelMembershipCheck = false;
            await this.updateUserPropertyToDatabase(ctx.session.userForm, {
              isSubscribedToChannel: ctx.session.userForm.isSubscribedToChannel,
            });
          } else {
            ctx.session.userForm.isSubscribedToChannel = false;
            userMaxLikesLimit = MAX_LIKES_LIMIT;
            isMaxLikeCount = false;
            additionalChannelMembershipCheck = true;
            await this.updateUserPropertyToDatabase(ctx.session.userForm, {
              isSubscribedToChannel: ctx.session.userForm.isSubscribedToChannel,
            });
          }
        } catch (error) {
          console.error('Error checking user membership:', error);
        }
      }
      if (
        ctx.session.userForm.isPremium ||
        ctx.session.userForm.likesSentCount < userMaxLikesLimit ||
        ctx.session.userForm.isReferralBonusesActive
      ) {
        if (!ctx.session.userForm.isPremium) {
          ctx.session.userForm.likesSentCount++;
          await this.db
            .collection('users')
            .updateOne(
              { userId: ctx.session.userForm.userId },
              { $set: { likesSentCount: ctx.session.userForm.likesSentCount } }
            );
        }
        currentUserIndex++;
        this.isProfilesWithLocationEnded = await this.sendUserDetails(
          userMatchForms as unknown as UserForm[],
          currentUserIndex,
          ctx
        );
        if (currentUserIndex > 0) {
          const previousUser = userMatchForms[currentUserIndex - 1];
          const previousUserId = previousUser.userId;
          try {
            const viewerUserId = ctx.session.userForm.userId;
            if (previousUserId) {
              await this.db.collection('viewed_profiles').insertOne({
                viewerUserId: viewerUserId,
                viewedUserId: previousUserId,
                expiryTimestamp: new Date(Date.now() + TIME_TO_VIEW_EXPIRE),
              });
              let username = ctx.from?.username;
              if (username) {
                username = '@' + username;
              }
              const userId = ctx.from!.id;
              const userLink = `tg://user?id=${userId}`;
              const mentionMessage =
                username || `[${ctx.from?.first_name}](${userLink})`;
              let message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –ø–æ—Å—Ç–∞–≤–∏–≤ –≤–ø–æ–¥–æ–±–∞–π–∫—É —Ç–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
              await this.db
                .collection('users')
                .updateOne(
                  { userId: previousUserId },
                  { $inc: { likesCount: 1 } }
                );
              if (this.isLookingForEventMatch) {
                message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –∑–∞–ø—Ä–æ—à—É—î —Ç–µ–±–µ –∫—É–¥–∏—Å—å, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
              }
              await ctx.telegram.sendMessage(previousUserId, message, {
                parse_mode: 'Markdown',
                reply_markup: {
                  keyboard: [['üóÑ –ü–µ—Ä–µ–π—Ç–∏ —É –∞—Ä—Ö—ñ–≤']],
                  resize_keyboard: true,
                },
              });
              this.insertData = {
                senderId: userId,
                receiverId: previousUserId,
                senderMentionMessage: mentionMessage,
                likeMessage: null,
              };
              if (ctx.session.eventDetails?.eventId) {
                this.insertData.eventId = ctx.session.eventDetails.eventId;
              }
              const updateQuery: {
                senderId: number;
                receiverId: number;
                eventId?: number;
              } = {
                senderId: this.insertData.senderId,
                receiverId: this.insertData.receiverId,
              };
              if (this.insertData.eventId) {
                updateQuery.eventId = this.insertData.eventId;
              }
              await this.db.collection('matches').updateOne(
                updateQuery,
                {
                  $set: this.insertData,
                },
                {
                  upsert: true,
                }
              );
            }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
          } catch (error: any) {
            if (error instanceof TelegramError) {
              if (
                error.description !== 'Bad Request: chat not found' &&
                error.description !== 'Forbidden: bot was blocked by the user'
              ) {
                console.error('Error sending  match notification:', error);
              }
            } else {
              console.error(error);
            }
          }
          if (this.isProfilesWithLocationEnded && !this.isProfilesEnded) {
            userMatchForms = await this.loadProfilesWithoutLocationSpecified(
              ctx
            );
            currentUserIndex = 0;
            this.isProfilesEnded = await this.sendUserDetails(
              userMatchForms as unknown as UserForm[],
              currentUserIndex,
              ctx
            );
          }
          if (this.isProfilesEnded) {
            await ctx.reply(
              '–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –ª—é–¥–µ–π, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∏',
              Markup.removeKeyboard()
            );
          }
        }
      } else {
        if (isMaxLikeCount) {
          await ctx.replyWithMarkdownV2(
            `–¢–∏ –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
          
–©–æ–± –º–∞—Ç–∏ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –º–æ–∂–µ—à *–æ—Ñ–æ—Ä–º–∏—Ç–∏ Premium –ø—ñ–¥–ø–∏—Å–∫—É* (–æ—Ç—Ä–∏–º–∞—î—à –ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç Premium —Ñ—É–Ω–∫—Ü—ñ–π)
–î—è–∫—É—î–º–æ, —â–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π (-–∞) –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ü´∂üèª`.replace(
              /([_[\]()~`>#+=|{}.!-])/g,
              '\\$1'
            ),
            Markup.inlineKeyboard([
              Markup.button.callback('–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º', `premiumBuyScene`),
            ])
          );
          additionalChannelMembershipCheck = false;
        } else {
          await ctx.replyWithMarkdownV2(
            `–¢–∏ –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
          
–©–æ–± –º–∞—Ç–∏ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –æ–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: 
*‚Ä¢ –æ—Ñ–æ—Ä–º–∏ Premium –ø—ñ–¥–ø–∏—Å–∫—É* (–æ—Ç—Ä–∏–º–∞—î—à –ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç Premium —Ñ—É–Ω–∫—Ü—ñ–π)
*‚Ä¢ –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª* (–æ—Ç—Ä–∏–º–∞—î—à –¥–æ–¥–∞—Ç–∫–æ–≤–æ 3 –≤–ø–æ–¥–æ–±–∞–π–∫–∏ —Ç–∞ 1 –ø–µ—Ä–µ–≥–ª—è–¥ –º–µ—Ç—á—É –Ω–∞ –¥–µ–Ω—å)`.replace(
              /([_[\]()~`>#+=|{}.!-])/g,
              '\\$1'
            ),
            Markup.inlineKeyboard([
              Markup.button.callback('–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º', `premiumBuyScene`),
              Markup.button.url('–ö–∞–Ω–∞–ª', 'https://t.me/crush_ua'),
            ])
          );
          additionalChannelMembershipCheck = true;
        }
      }

      // await ctx.telegram.sendPhoto(previousUserId, userForm.photoId, {
      //   caption: message,
      //   parse_mode: 'Markdown',
      //   reply_markup: {
      //     inline_keyboard: [
      //       [
      //         {
      //           text: '‚ù§Ô∏è',
      //           callback_data: `like:${userId}:${mentionMessage}`,
      //         },
      //         {
      //           text: 'üëé',
      //           callback_data: `dislike`,
      //         },
      //       ],
      //     ],
      //   },
      // });
      // await ctx.reply(
      //   `–°—É–ø–µ—Ä! –û—á—ñ–∫—É–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞ –ø–æ–¥—ñ—ó ü•≥ –ë–∞–∂–∞—é –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å üëã`
      // , Markup.removeKeyboard());

      // await ctx.telegram.sendMessage(
      //   previousUserId,
      //   `${ctx.session.userForm.username} –∑–∞–ø—Ä–æ—à—É—î —Ç–µ–±–µ –Ω–∞ –ø–æ–¥—ñ—é ${eventName} ${eventDate}. –û–±–≥–æ–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—ñ...`,
      //   {
      //     parse_mode: 'Markdown',
      //     reply_markup: {
      //       inline_keyboard: [
      //         [
      //           {
      //             text: '‚ù§Ô∏è',
      //             callback_data: `like:${userId}:${mentionMessage}`,
      //           },
      //           {
      //             text: 'üëé',
      //             callback_data: `dislike:${userId}:${
      //               ctx.from!.username
      //             }`,
      //           },
      //         ],
      //       ],
      //     },
      //   }
      // );

      //         const regex = /^(like|dislike):(.+)$/;
      //         userEvents.action(regex, async (ctx) => {
      //           console.log('in userEvents');
      //           const actionType = ctx.match[1]; // 'like' or 'dislike'
      //           const initiatorUserId = ctx.match[2]; // User ID of the initiator
      //           const initiatorUsername = ctx.match[3]; // Username of the initiator
      //           if (actionType === 'like') {
      //             // Notify the sender about the ‚ù§Ô∏è
      //             try {
      //               await ctx.telegram.sendMessage(
      //                 initiatorUserId,
      //                 `@${
      //                   ctx.from!.username
      //                 } –ø—Ä–∏–π–Ω—è–≤ –≤–∞—à–µ —Ç–≤–æ—î –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é ${eventName} ${eventDate}. –û–±–≥–æ–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—ñ...`
      //               );
      //               await ctx.reply(`@${initiatorUsername}
      // –¢–∏ –ø—Ä–∏–π–Ω—è–≤ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é ü•≥. –ë–∞–∂–∞—é –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å üëã`);
      //             } catch (error) {
      //               console.error('Error sending notification:', error);
      //             }
      //           }
      //         });
    });
    lookForMatch.hears('‚ù§Ô∏è‚Äçüî•', async (ctx) => {
      if (
        ctx.session.userForm.referrerUserId &&
        !ctx.session.userForm.isRegisteredReferee
      ) {
        ctx.session.userForm.isRegisteredReferee = true;
        await this.db
          .collection('users')
          .updateOne(
            { userId: ctx.session.userForm.referrerUserId },
            { $push: { referees: ctx.from.id } }
          );
        await this.updateUserPropertyToDatabase(ctx.session.userForm, {
          isRegisteredReferee: ctx.session.userForm.isRegisteredReferee,
        });
        const referrerUser = (await this.getUserFormDataFromDatabase(
          ctx.session.userForm.referrerUserId
        )) as unknown as UserForm;
        if (referrerUser) {
          const referralBonusesEndTime = new Date();
          referralBonusesEndTime.setTime(
            referralBonusesEndTime.getTime() + REFERRAL_BONUSES_TIME_DURUATION
          );
          referrerUser.isReferralBonusesActive = true;
          referrerUser.referralBonusesEndTime = referralBonusesEndTime;
          await this.updateUserPropertyToDatabase(referrerUser, {
            isReferralBonusesActive: true,
            referralBonusesEndTime: referralBonusesEndTime,
          });
        }
        await ctx.telegram.sendMessage(
          ctx.session.userForm.referrerUserId,
          `‚ú® –ó–∞ —Ç–≤–æ—ó–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è–º –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –æ–¥–∏–Ω –∫—Ä–∞—à\n–¢–≤–æ—ó –±–æ–Ω—É—Å–∏ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ üéâ`,
          {
            parse_mode: 'Markdown',
          }
        );
      }
      await this.registerUserLastActivity(ctx.session.userForm.userId);
      if (additionalChannelMembershipCheck) {
        try {
          const chatMember = await ctx.telegram.getChatMember(
            `@crush_ua`,
            ctx.session.userForm.userId
          );
          const isMember = ['member', 'administrator'].includes(
            chatMember.status
          );
          if (isMember) {
            ctx.session.userForm.isSubscribedToChannel = true;
            userMaxLikesLimit = MAX_LIKES_LIMIT + 3;
            isMaxLikeCount = true;
            additionalChannelMembershipCheck = false;
            await this.updateUserPropertyToDatabase(ctx.session.userForm, {
              isSubscribedToChannel: ctx.session.userForm.isSubscribedToChannel,
            });
          } else {
            ctx.session.userForm.isSubscribedToChannel = false;
            userMaxLikesLimit = MAX_LIKES_LIMIT;
            isMaxLikeCount = false;
            additionalChannelMembershipCheck = true;
            await this.updateUserPropertyToDatabase(ctx.session.userForm, {
              isSubscribedToChannel: ctx.session.userForm.isSubscribedToChannel,
            });
          }
        } catch (error) {
          console.error('Error checking user membership:', error);
        }
      }
      if (
        ctx.session.userForm.isPremium ||
        ctx.session.userForm.likesSentCount < userMaxLikesLimit ||
        ctx.session.userForm.isReferralBonusesActive
      ) {
        const symbolCount = ctx.session.userForm.isPremium ? 300 : 70;
        const premiumMessage = ctx.session.userForm.isPremium
          ? '–∫–∞—Ä—Ç–∏–Ω–∫—É, –≤—ñ–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫—Ä—É–∂–æ–∫ –∞–±–æ'
          : '';
        await ctx.reply(
          `–ú–æ–∂–µ—à –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ ${premiumMessage} –∫–æ—Ä–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ *${symbolCount}* —Å–∏–º–≤–æ–ª—ñ–≤ —Ä–∞–∑–æ–º –∑ –≤–ø–æ–¥–æ–±–∞–π–∫–æ—é`,
          { parse_mode: 'Markdown' }
        );
        if (!ctx.session.userForm.isPremium) {
          ctx.session.userForm.likesSentCount++;
          await this.db
            .collection('users')
            .updateOne(
              { userId: ctx.session.userForm.userId },
              { $set: { likesSentCount: ctx.session.userForm.likesSentCount } }
            );
        }
        this.isLikeMessage = true;
      } else {
        if (isMaxLikeCount) {
          await ctx.replyWithMarkdownV2(
            `–¢–∏ –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
          
–©–æ–± –º–∞—Ç–∏ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –º–æ–∂–µ—à *–æ—Ñ–æ—Ä–º–∏—Ç–∏ Premium –ø—ñ–¥–ø–∏—Å–∫—É* (–æ—Ç—Ä–∏–º–∞—î—à –ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç Premium —Ñ—É–Ω–∫—Ü—ñ–π)
–î—è–∫—É—î–º–æ, —â–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π (-–∞) –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ü´∂üèª`.replace(
              /([_[\]()~`>#+=|{}.!-])/g,
              '\\$1'
            ),
            Markup.inlineKeyboard([
              Markup.button.callback('–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º', `premiumBuyScene`),
            ])
          );
          additionalChannelMembershipCheck = false;
        } else {
          await ctx.replyWithMarkdownV2(
            `–¢–∏ –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
          
–©–æ–± –º–∞—Ç–∏ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –æ–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: 
*‚Ä¢ –æ—Ñ–æ—Ä–º–∏ Premium –ø—ñ–¥–ø–∏—Å–∫—É* (–æ—Ç—Ä–∏–º–∞—î—à –ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç Premium —Ñ—É–Ω–∫—Ü—ñ–π)
*‚Ä¢ –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª* (–æ—Ç—Ä–∏–º–∞—î—à –¥–æ–¥–∞—Ç–∫–æ–≤–æ 3 –≤–ø–æ–¥–æ–±–∞–π–∫–∏ —Ç–∞ 1 –ø–µ—Ä–µ–≥–ª—è–¥ –º–µ—Ç—á—É –Ω–∞ –¥–µ–Ω—å)`.replace(
              /([_[\]()~`>#+=|{}.!-])/g,
              '\\$1'
            ),
            Markup.inlineKeyboard([
              Markup.button.callback('–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º', `premiumBuyScene`),
              Markup.button.url('–ö–∞–Ω–∞–ª', 'https://t.me/crush_ua'),
            ])
          );
          additionalChannelMembershipCheck = true;
        }
      }
    });
    lookForMatch.hears('üëé', async (ctx) => {
      this.isLikeMessage = false;
      await this.registerUserLastActivity(ctx.from.id);
      currentUserIndex++;
      this.isProfilesWithLocationEnded = await this.sendUserDetails(
        userMatchForms as unknown as UserForm[],
        currentUserIndex,
        ctx
      );
      if (currentUserIndex > 0) {
        const previousUser = userMatchForms[currentUserIndex - 1];
        const previousUserId = previousUser.userId;
        const viewerUserId = ctx.session.userForm.userId;
        if (previousUserId) {
          await this.db.collection('viewed_profiles').insertOne({
            viewerUserId: viewerUserId,
            viewedUserId: previousUserId,
            expiryTimestamp: new Date(Date.now() + TIME_TO_VIEW_EXPIRE),
          });
          await this.db
            .collection('users')
            .updateOne(
              { userId: previousUserId },
              { $inc: { dislikesCount: 1 } }
            );
        }
      }
      if (this.isProfilesWithLocationEnded && !this.isProfilesEnded) {
        userMatchForms = await this.loadProfilesWithoutLocationSpecified(ctx);
        currentUserIndex = 0;
        this.isProfilesEnded = await this.sendUserDetails(
          userMatchForms as unknown as UserForm[],
          currentUserIndex,
          ctx
        );
      }
      if (this.isProfilesEnded) {
        await ctx.reply(
          '–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –ª—é–¥–µ–π, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∏',
          Markup.removeKeyboard()
        );
      }
    });
    lookForMatch.hears('üëÆ‚Äç‚ôÇÔ∏è –°–∫–∞—Ä–≥–∞', async (ctx) => {
      this.reportedUserId = userMatchForms[currentUserIndex]?.userId;
      currentUserIndex++;
      await ctx.scene.enter('complaint');
    });
    lookForMatch.action('premiumBuyScene', async (ctx) => {
      await ctx.reply(
        '–¢–∏ –º–æ–∂–µ—à –ø—Ä–∏–¥–±–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º –∞–±–æ –∂ –ø—Ä–æ—Å—Ç–æ –∑–Ω—è—Ç–∏ –ø—Ä–æ –Ω–∞—à –±–æ—Ç –≤—ñ–¥–µ–æ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ—Å—è—á–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –ø—Ä–µ–º—ñ—É–º ü§≥',
        Markup.keyboard([['‚≠êÔ∏è –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º', '–ü—Ä–µ–º—ñ—É–º –∑–∞ –≤—ñ–¥–µ–æ ü§≥']])
          .oneTime()
          .resize()
      );
    });
    lookForMatch.hears('‚≠êÔ∏è –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º', async (ctx) => {
      await ctx.scene.enter('premiumBenefits');
    });
    lookForMatch.hears('–ü—Ä–µ–º—ñ—É–º –∑–∞ –≤—ñ–¥–µ–æ ü§≥', async (ctx) => {
      await ctx.scene.enter('premiumVideo');
    });
    this.addCommands(lookForMatch);
    lookForMatch.on('text', async (ctx) => {
      if (this.isLikeMessage) {
        const allowedSymbolsLength = ctx.session.userForm.isPremium ? 300 : 70;
        if (ctx.message.text.length > allowedSymbolsLength) {
          await ctx.reply(
            `–ó–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ç–æ–±—ñ –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ *${allowedSymbolsLength}*`,
            {
              parse_mode: 'Markdown',
            }
          );
        } else {
          const previousUser = userMatchForms[currentUserIndex];
          const previousUserId = previousUser.userId;
          const viewerUserId = ctx.session.userForm.userId;
          if (previousUserId) {
            await this.db.collection('viewed_profiles').insertOne({
              viewerUserId: viewerUserId,
              viewedUserId: previousUserId,
              expiryTimestamp: new Date(Date.now() + TIME_TO_VIEW_EXPIRE),
            });
            let username = ctx.from?.username;
            if (username) {
              username = '@' + username;
            }
            const userId = ctx.from!.id;
            const userLink = `tg://user?id=${userId}`;
            const mentionMessage =
              username || `[${ctx.from?.first_name}](${userLink})`;
            let message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –ø–æ—Å—Ç–∞–≤–∏–≤ –≤–ø–æ–¥–æ–±–∞–π–∫—É —Ç–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
            await this.db
              .collection('users')
              .updateOne(
                { userId: previousUserId },
                { $inc: { likesCount: 1 } }
              );
            if (this.isLookingForEventMatch) {
              message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –∑–∞–ø—Ä–æ—à—É—î —Ç–µ–±–µ –∫—É–¥–∏—Å—å, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
            }
            this.insertData = {
              senderId: userId,
              receiverId: previousUserId,
              senderMentionMessage: mentionMessage,
              likeMessage: {
                type: 'text',
                content: ctx.message.text,
              },
            };
            if (ctx.session.eventDetails?.eventId) {
              this.insertData.eventId = ctx.session.eventDetails.eventId;
            }
            const updateQuery: {
              senderId: number;
              receiverId: number;
              eventId?: number;
            } = {
              senderId: this.insertData.senderId,
              receiverId: this.insertData.receiverId,
            };
            if (this.insertData.eventId) {
              updateQuery.eventId = this.insertData.eventId;
            }
            this.isLikeMessage = false;
            await ctx.reply(
              '‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–∞–∑–æ–º –∑ –≤–ø–æ–¥–æ–±–∞–π–∫–æ—é',
              Markup.keyboard([['‚ù§Ô∏è', '‚ù§Ô∏è‚Äçüî•', 'üëé', 'üëÆ‚Äç‚ôÇÔ∏è –°–∫–∞—Ä–≥–∞']]).resize()
            );
            currentUserIndex++;
            this.isProfilesWithLocationEnded = await this.sendUserDetails(
              userMatchForms as unknown as UserForm[],
              currentUserIndex,
              ctx
            );
            if (this.isProfilesWithLocationEnded && !this.isProfilesEnded) {
              userMatchForms = await this.loadProfilesWithoutLocationSpecified(
                ctx
              );
              currentUserIndex = 0;
              this.isProfilesEnded = await this.sendUserDetails(
                userMatchForms as unknown as UserForm[],
                currentUserIndex,
                ctx
              );
            }
            if (this.isProfilesEnded) {
              await ctx.reply(
                '–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –ª—é–¥–µ–π, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∏',
                Markup.removeKeyboard()
              );
            }
            try {
              await ctx.telegram.sendMessage(
                this.insertData.receiverId,
                message,
                {
                  parse_mode: 'Markdown',
                  reply_markup: {
                    keyboard: [['üóÑ –ü–µ—Ä–µ–π—Ç–∏ —É –∞—Ä—Ö—ñ–≤']],
                    resize_keyboard: true,
                  },
                }
              );
              await this.db.collection('matches').updateOne(
                updateQuery,
                {
                  $set: this.insertData,
                },
                {
                  upsert: true,
                }
              );
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
            } catch (error: any) {
              if (error instanceof TelegramError) {
                if (
                  error.description !== 'Bad Request: chat not found' &&
                  error.description !== 'Forbidden: bot was blocked by the user'
                ) {
                  console.error('Like message send error :', error);
                }
              } else {
                console.error(error);
              }
            }
          }
        }
      } else {
        await ctx.reply(
          '‚ù§Ô∏è ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è, üëé ‚Äî —è–∫—â–æ –Ω—ñ, —Å–∫–∞—Ä–≥–∞ ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞, –Ω–∞ —Ç–≤–æ—é –¥—É–º–∫—É, –ø–æ–≥–∞–Ω–æ —Å–µ–±–µ –≤–µ–¥–µ. –í—Å–µ –ø—Ä–æ—Å—Ç–æ üòâ'
        );
      }
    });
    lookForMatch.on('voice', async (ctx) => {
      if (this.isLikeMessage) {
        if (!ctx.session.userForm.isPremium) {
          await ctx.reply(
            '–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –ø—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º'
          );
        } else {
          if (ctx.message.voice.duration > 60) {
            await ctx.reply(
              '–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ –≥–æ–ª–æ—Å–æ–≤–µ, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤–∫–ª–∞—Å—Ç–∏—Å—å —É 60 —Å–µ–∫—É–Ω–¥'
            );
          } else {
            const previousUser = userMatchForms[currentUserIndex];
            const previousUserId = previousUser.userId;
            const viewerUserId = ctx.session.userForm.userId;
            if (previousUserId) {
              await this.db.collection('viewed_profiles').insertOne({
                viewerUserId: viewerUserId,
                viewedUserId: previousUserId,
                expiryTimestamp: new Date(Date.now() + TIME_TO_VIEW_EXPIRE),
              });
              let username = ctx.from?.username;
              if (username) {
                username = '@' + username;
              }
              const userId = ctx.from!.id;
              const userLink = `tg://user?id=${userId}`;
              const mentionMessage =
                username || `[${ctx.from?.first_name}](${userLink})`;
              let message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –ø–æ—Å—Ç–∞–≤–∏–≤ –≤–ø–æ–¥–æ–±–∞–π–∫—É —Ç–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
              await this.db
                .collection('users')
                .updateOne(
                  { userId: previousUserId },
                  { $inc: { likesCount: 1 } }
                );
              if (this.isLookingForEventMatch) {
                message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –∑–∞–ø—Ä–æ—à—É—î —Ç–µ–±–µ –∫—É–¥–∏—Å—å, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
              }
              this.insertData = {
                senderId: userId,
                receiverId: previousUserId,
                senderMentionMessage: mentionMessage,
                likeMessage: {
                  type: 'voice',
                  content: ctx.message.voice.file_id,
                },
              };
              if (ctx.session.eventDetails?.eventId) {
                this.insertData.eventId = ctx.session.eventDetails.eventId;
              }
              const updateQuery: {
                senderId: number;
                receiverId: number;
                eventId?: number;
              } = {
                senderId: this.insertData.senderId,
                receiverId: this.insertData.receiverId,
              };
              if (this.insertData.eventId) {
                updateQuery.eventId = this.insertData.eventId;
              }
              this.isLikeMessage = false;
              await ctx.reply(
                '‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —Ç–≤–æ—î –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–∞–∑–æ–º –∑ –≤–ø–æ–¥–æ–±–∞–π–∫–æ—é',
                Markup.keyboard([['‚ù§Ô∏è', '‚ù§Ô∏è‚Äçüî•', 'üëé', 'üëÆ‚Äç‚ôÇÔ∏è –°–∫–∞—Ä–≥–∞']]).resize()
              );
              currentUserIndex++;
              this.isProfilesWithLocationEnded = await this.sendUserDetails(
                userMatchForms as unknown as UserForm[],
                currentUserIndex,
                ctx
              );
              if (this.isProfilesWithLocationEnded && !this.isProfilesEnded) {
                userMatchForms =
                  await this.loadProfilesWithoutLocationSpecified(ctx);
                currentUserIndex = 0;
                this.isProfilesEnded = await this.sendUserDetails(
                  userMatchForms as unknown as UserForm[],
                  currentUserIndex,
                  ctx
                );
              }
              if (this.isProfilesEnded) {
                await ctx.reply(
                  '–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –ª—é–¥–µ–π, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∏',
                  Markup.removeKeyboard()
                );
              }
              try {
                await ctx.telegram.sendMessage(
                  this.insertData.receiverId,
                  message,
                  {
                    parse_mode: 'Markdown',
                    reply_markup: {
                      keyboard: [['üóÑ –ü–µ—Ä–µ–π—Ç–∏ —É –∞—Ä—Ö—ñ–≤']],
                      resize_keyboard: true,
                    },
                  }
                );
                await this.db.collection('matches').updateOne(
                  updateQuery,
                  {
                    $set: this.insertData,
                  },
                  {
                    upsert: true,
                  }
                );
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
              } catch (error: any) {
                if (error instanceof TelegramError) {
                  if (
                    error.description !== 'Bad Request: chat not found' &&
                    error.description !==
                      'Forbidden: bot was blocked by the user'
                  ) {
                    console.error('Like message send error:', error);
                  }
                } else {
                  console.error(error);
                }
              }
            }
          }
        }
      } else {
        await ctx.reply(
          '‚ù§Ô∏è ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è, üëé ‚Äî —è–∫—â–æ –Ω—ñ, —Å–∫–∞—Ä–≥–∞ ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞, –Ω–∞ —Ç–≤–æ—é –¥—É–º–∫—É, –ø–æ–≥–∞–Ω–æ —Å–µ–±–µ –≤–µ–¥–µ. –í—Å–µ –ø—Ä–æ—Å—Ç–æ üòâ'
        );
      }
    });
    lookForMatch.on('photo', async (ctx) => {
      if (this.isLikeMessage) {
        if (!ctx.session.userForm.isPremium) {
          await ctx.reply(
            '–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –ø—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º'
          );
        } else {
          const previousUser = userMatchForms[currentUserIndex];
          const previousUserId = previousUser.userId;
          const viewerUserId = ctx.session.userForm.userId;
          if (previousUserId) {
            await this.db.collection('viewed_profiles').insertOne({
              viewerUserId: viewerUserId,
              viewedUserId: previousUserId,
              expiryTimestamp: new Date(Date.now() + TIME_TO_VIEW_EXPIRE),
            });
            let username = ctx.from?.username;
            if (username) {
              username = '@' + username;
            }
            const userId = ctx.from!.id;
            const userLink = `tg://user?id=${userId}`;
            const mentionMessage =
              username || `[${ctx.from?.first_name}](${userLink})`;
            let message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –ø–æ—Å—Ç–∞–≤–∏–≤ –≤–ø–æ–¥–æ–±–∞–π–∫—É —Ç–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
            await this.db
              .collection('users')
              .updateOne(
                { userId: previousUserId },
                { $inc: { likesCount: 1 } }
              );
            if (this.isLookingForEventMatch) {
              message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –∑–∞–ø—Ä–æ—à—É—î —Ç–µ–±–µ –∫—É–¥–∏—Å—å, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
            }
            const caption = ctx.message.caption || '';
            const photos = ctx.message.photo.sort((a, b) => {
              const resolutionA = a.width * a.height;
              const resolutionB = b.width * b.height;
              return resolutionB - resolutionA;
            });
            this.insertData = {
              senderId: userId,
              receiverId: previousUserId,
              senderMentionMessage: mentionMessage,
              likeMessage: {
                type: 'photo',
                content: photos[0].file_id,
                caption: caption,
              },
            };
            if (ctx.session.eventDetails?.eventId) {
              this.insertData.eventId = ctx.session.eventDetails.eventId;
            }
            const updateQuery: {
              senderId: number;
              receiverId: number;
              eventId?: number;
            } = {
              senderId: this.insertData.senderId,
              receiverId: this.insertData.receiverId,
            };
            if (this.insertData.eventId) {
              updateQuery.eventId = this.insertData.eventId;
            }
            this.isLikeMessage = false;
            await ctx.reply(
              '‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —Ç–≤–æ—î —Ñ–æ—Ç–æ —Ä–∞–∑–æ–º –∑ –≤–ø–æ–¥–æ–±–∞–π–∫–æ—é',
              Markup.keyboard([['‚ù§Ô∏è', '‚ù§Ô∏è‚Äçüî•', 'üëé', 'üëÆ‚Äç‚ôÇÔ∏è –°–∫–∞—Ä–≥–∞']]).resize()
            );
            currentUserIndex++;
            this.isProfilesWithLocationEnded = await this.sendUserDetails(
              userMatchForms as unknown as UserForm[],
              currentUserIndex,
              ctx
            );
            if (this.isProfilesWithLocationEnded && !this.isProfilesEnded) {
              userMatchForms = await this.loadProfilesWithoutLocationSpecified(
                ctx
              );
              currentUserIndex = 0;
              this.isProfilesEnded = await this.sendUserDetails(
                userMatchForms as unknown as UserForm[],
                currentUserIndex,
                ctx
              );
            }
            if (this.isProfilesEnded) {
              await ctx.reply(
                '–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –ª—é–¥–µ–π, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∏',
                Markup.removeKeyboard()
              );
            }
            try {
              await ctx.telegram.sendMessage(
                this.insertData.receiverId,
                message,
                {
                  parse_mode: 'Markdown',
                  reply_markup: {
                    keyboard: [['üóÑ –ü–µ—Ä–µ–π—Ç–∏ —É –∞—Ä—Ö—ñ–≤']],
                    resize_keyboard: true,
                  },
                }
              );
              await this.db.collection('matches').updateOne(
                updateQuery,
                {
                  $set: this.insertData,
                },
                {
                  upsert: true,
                }
              );
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
            } catch (error: any) {
              if (error instanceof TelegramError) {
                if (
                  error.description !== 'Bad Request: chat not found' &&
                  error.description !== 'Forbidden: bot was blocked by the user'
                ) {
                  console.error('Like message send error:', error);
                }
              } else {
                console.error(error);
              }
            }
          }
        }
      } else {
        await ctx.reply(
          '‚ù§Ô∏è ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è, üëé ‚Äî —è–∫—â–æ –Ω—ñ, —Å–∫–∞—Ä–≥–∞ ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞, –Ω–∞ —Ç–≤–æ—é –¥—É–º–∫—É, –ø–æ–≥–∞–Ω–æ —Å–µ–±–µ –≤–µ–¥–µ. –í—Å–µ –ø—Ä–æ—Å—Ç–æ üòâ'
        );
      }
    });
    lookForMatch.on('video', async (ctx) => {
      if (this.isLikeMessage) {
        if (!ctx.session.userForm.isPremium) {
          await ctx.reply(
            '–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –ø—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º'
          );
        } else {
          if (ctx.message.video.duration > 60) {
            await ctx.reply(
              '–í—ñ–¥–µ–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ, –±—É–¥—å-–ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤ –≤—ñ–¥–µ–æ, —è–∫–µ –Ω–µ –¥–æ–≤—à–µ 60 —Å–µ–∫—É–Ω–¥'
            );
          } else {
            const previousUser = userMatchForms[currentUserIndex];
            const previousUserId = previousUser.userId;
            const viewerUserId = ctx.session.userForm.userId;
            if (previousUserId) {
              await this.db.collection('viewed_profiles').insertOne({
                viewerUserId: viewerUserId,
                viewedUserId: previousUserId,
                expiryTimestamp: new Date(Date.now() + TIME_TO_VIEW_EXPIRE),
              });
              let username = ctx.from?.username;
              if (username) {
                username = '@' + username;
              }
              const userId = ctx.from!.id;
              const userLink = `tg://user?id=${userId}`;
              const mentionMessage =
                username || `[${ctx.from?.first_name}](${userLink})`;
              let message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –ø–æ—Å—Ç–∞–≤–∏–≤ –≤–ø–æ–¥–æ–±–∞–π–∫—É —Ç–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
              await this.db
                .collection('users')
                .updateOne(
                  { userId: previousUserId },
                  { $inc: { likesCount: 1 } }
                );
              if (this.isLookingForEventMatch) {
                message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –∑–∞–ø—Ä–æ—à—É—î —Ç–µ–±–µ –∫—É–¥–∏—Å—å, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
              }
              const caption = ctx.message.caption || '';
              this.insertData = {
                senderId: userId,
                receiverId: previousUserId,
                senderMentionMessage: mentionMessage,
                likeMessage: {
                  type: 'video',
                  content: ctx.message.video.file_id,
                  caption: caption,
                },
              };
              if (ctx.session.eventDetails?.eventId) {
                this.insertData.eventId = ctx.session.eventDetails.eventId;
              }
              const updateQuery: {
                senderId: number;
                receiverId: number;
                eventId?: number;
              } = {
                senderId: this.insertData.senderId,
                receiverId: this.insertData.receiverId,
              };
              if (this.insertData.eventId) {
                updateQuery.eventId = this.insertData.eventId;
              }
              this.isLikeMessage = false;
              await ctx.reply(
                '‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —Ç–≤–æ—î –≤—ñ–¥–µ–æ —Ä–∞–∑–æ–º –∑ –≤–ø–æ–¥–æ–±–∞–π–∫–æ—é',
                Markup.keyboard([['‚ù§Ô∏è', '‚ù§Ô∏è‚Äçüî•', 'üëé', 'üëÆ‚Äç‚ôÇÔ∏è –°–∫–∞—Ä–≥–∞']]).resize()
              );
              currentUserIndex++;
              this.isProfilesWithLocationEnded = await this.sendUserDetails(
                userMatchForms as unknown as UserForm[],
                currentUserIndex,
                ctx
              );
              if (this.isProfilesWithLocationEnded && !this.isProfilesEnded) {
                userMatchForms =
                  await this.loadProfilesWithoutLocationSpecified(ctx);
                currentUserIndex = 0;
                this.isProfilesEnded = await this.sendUserDetails(
                  userMatchForms as unknown as UserForm[],
                  currentUserIndex,
                  ctx
                );
              }
              if (this.isProfilesEnded) {
                await ctx.reply(
                  '–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –ª—é–¥–µ–π, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∏',
                  Markup.removeKeyboard()
                );
              }
              try {
                await ctx.telegram.sendMessage(
                  this.insertData.receiverId,
                  message,
                  {
                    parse_mode: 'Markdown',
                    reply_markup: {
                      keyboard: [['üóÑ –ü–µ—Ä–µ–π—Ç–∏ —É –∞—Ä—Ö—ñ–≤']],
                      resize_keyboard: true,
                    },
                  }
                );
                await this.db.collection('matches').updateOne(
                  updateQuery,
                  {
                    $set: this.insertData,
                  },
                  {
                    upsert: true,
                  }
                );
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
              } catch (error: any) {
                if (error instanceof TelegramError) {
                  if (
                    error.description !== 'Bad Request: chat not found' &&
                    error.description !==
                      'Forbidden: bot was blocked by the user'
                  ) {
                    console.error('Like message send error:', error);
                  }
                } else {
                  console.error(error);
                }
              }
            }
          }
        }
      } else {
        await ctx.reply(
          '‚ù§Ô∏è ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è, üëé ‚Äî —è–∫—â–æ –Ω—ñ, —Å–∫–∞—Ä–≥–∞ ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞, –Ω–∞ —Ç–≤–æ—é –¥—É–º–∫—É, –ø–æ–≥–∞–Ω–æ —Å–µ–±–µ –≤–µ–¥–µ. –í—Å–µ –ø—Ä–æ—Å—Ç–æ üòâ'
        );
      }
    });
    lookForMatch.on('video_note', async (ctx) => {
      if (this.isLikeMessage) {
        if (!ctx.session.userForm.isPremium) {
          await ctx.reply(
            '–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫—Ä—É–∂–∫—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –ø—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º'
          );
        } else {
          if (ctx.message.video_note.duration >= 60) {
            await ctx.reply(
              '–ö—Ä—É–∂–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π, –±—É–¥—å-–ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤ –≤—ñ–¥–µ–æ, —è–∫–µ –Ω–µ –¥–æ–≤—à–µ 60 —Å–µ–∫—É–Ω–¥'
            );
          } else {
            const previousUser = userMatchForms[currentUserIndex];
            const previousUserId = previousUser.userId;
            const viewerUserId = ctx.session.userForm.userId;
            if (previousUserId) {
              await this.db.collection('viewed_profiles').insertOne({
                viewerUserId: viewerUserId,
                viewedUserId: previousUserId,
                expiryTimestamp: new Date(Date.now() + TIME_TO_VIEW_EXPIRE),
              });
              let username = ctx.from?.username;
              if (username) {
                username = '@' + username;
              }
              const userId = ctx.from!.id;
              const userLink = `tg://user?id=${userId}`;
              const mentionMessage =
                username || `[${ctx.from?.first_name}](${userLink})`;
              let message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –ø–æ—Å—Ç–∞–≤–∏–≤ –≤–ø–æ–¥–æ–±–∞–π–∫—É —Ç–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
              await this.db
                .collection('users')
                .updateOne(
                  { userId: previousUserId },
                  { $inc: { likesCount: 1 } }
                );
              if (this.isLookingForEventMatch) {
                message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –∑–∞–ø—Ä–æ—à—É—î —Ç–µ–±–µ –∫—É–¥–∏—Å—å, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –≤–ø–æ–¥–æ–±–∞–π–æ–∫* üóÑ`;
              }
              this.insertData = {
                senderId: userId,
                receiverId: previousUserId,
                senderMentionMessage: mentionMessage,
                likeMessage: {
                  type: 'video_note',
                  content: ctx.message.video_note.file_id,
                },
              };
              if (ctx.session.eventDetails?.eventId) {
                this.insertData.eventId = ctx.session.eventDetails.eventId;
              }
              const updateQuery: {
                senderId: number;
                receiverId: number;
                eventId?: number;
              } = {
                senderId: this.insertData.senderId,
                receiverId: this.insertData.receiverId,
              };
              if (this.insertData.eventId) {
                updateQuery.eventId = this.insertData.eventId;
              }
              this.isLikeMessage = false;
              await ctx.reply(
                '‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —Ç–≤—ñ–π –∫—Ä—É–∂–µ—á–æ–∫ —Ä–∞–∑–æ–º –∑ –≤–ø–æ–¥–æ–±–∞–π–∫–æ—é',
                Markup.keyboard([['‚ù§Ô∏è', '‚ù§Ô∏è‚Äçüî•', 'üëé', 'üëÆ‚Äç‚ôÇÔ∏è –°–∫–∞—Ä–≥–∞']]).resize()
              );
              currentUserIndex++;
              this.isProfilesWithLocationEnded = await this.sendUserDetails(
                userMatchForms as unknown as UserForm[],
                currentUserIndex,
                ctx
              );
              if (this.isProfilesWithLocationEnded && !this.isProfilesEnded) {
                userMatchForms =
                  await this.loadProfilesWithoutLocationSpecified(ctx);
                currentUserIndex = 0;
                this.isProfilesEnded = await this.sendUserDetails(
                  userMatchForms as unknown as UserForm[],
                  currentUserIndex,
                  ctx
                );
              }
              if (this.isProfilesEnded) {
                await ctx.reply(
                  '–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –ª—é–¥–µ–π, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∏',
                  Markup.removeKeyboard()
                );
              }
              try {
                await ctx.telegram.sendMessage(
                  this.insertData.receiverId,
                  message,
                  {
                    parse_mode: 'Markdown',
                    reply_markup: {
                      keyboard: [['üóÑ –ü–µ—Ä–µ–π—Ç–∏ —É –∞—Ä—Ö—ñ–≤']],
                      resize_keyboard: true,
                    },
                  }
                );
                await this.db.collection('matches').updateOne(
                  updateQuery,
                  {
                    $set: this.insertData,
                  },
                  {
                    upsert: true,
                  }
                );
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
              } catch (error: any) {
                if (error instanceof TelegramError) {
                  if (
                    error.description !== 'Bad Request: chat not found' &&
                    error.description !==
                      'Forbidden: bot was blocked by the user'
                  ) {
                    console.error('Like message send error:', error);
                  }
                } else {
                  console.error(error);
                }
              }
            }
          }
        }
      } else {
        await ctx.reply(
          '‚ù§Ô∏è ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è, üëé ‚Äî —è–∫—â–æ –Ω—ñ, —Å–∫–∞—Ä–≥–∞ ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞, –Ω–∞ —Ç–≤–æ—é –¥—É–º–∫—É, –ø–æ–≥–∞–Ω–æ —Å–µ–±–µ –≤–µ–¥–µ. –í—Å–µ –ø—Ä–æ—Å—Ç–æ üòâ'
        );
      }
    });
    lookForMatch.on('message', async (ctx) => {
      await ctx.reply(
        '‚ù§Ô∏è ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è, üëé ‚Äî —è–∫—â–æ –Ω—ñ, —Å–∫–∞—Ä–≥–∞ ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞, –Ω–∞ —Ç–≤–æ—é –¥—É–º–∫—É, –ø–æ–≥–∞–Ω–æ —Å–µ–±–µ –≤–µ–¥–µ. –í—Å–µ –ø—Ä–æ—Å—Ç–æ üòâ'
      );
    });
    lookForMatch.leave(async () => {
      this.isLookingForEventMatch = false;
      console.log('leave scene');
      if (job) {
        console.log('leave job');
        job.stop();
      }
    });
    return lookForMatch;
  }

  complaintScene(): Scenes.BaseScene<MySceneContext> {
    const complaint = new Scenes.BaseScene<MySceneContext>('complaint');
    complaint.enter(async (ctx) => {
      if (!this.reportedUserId) {
        await ctx.reply(
          '–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É'
        );

        await this.db.collection('viewed_profiles').insertOne({
          viewerUserId: ctx.from!.id,
          viewedUserId: this.reportedUserId,
          expiryTimestamp: new Date(Date.now() + TIME_TO_VIEW_EXPIRE),
        });
        this.reportedUserId = undefined;
        await ctx.scene.leave();
        return;
      }
      await ctx.reply(
        `–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º, –≤–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Ä–≥–∏`,
        Markup.keyboard([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']])
          .oneTime()
          .resize()
      );
    });
    const handleComplaint = async (
      ctx: MySceneContext,
      complaintDescription: string
    ) => {
      const existingComplaint = await this.db
        .collection('complaints')
        .findOne({ userId: this.reportedUserId });

      const updateData = {
        $inc: { complaintsNum: 1 },
        $push: { descriptions: complaintDescription },
      };

      if (!existingComplaint) {
        await this.db.collection('complaints').insertOne({
          userId: this.reportedUserId,
          complaintsNum: 1,
          descriptions: [complaintDescription],
        });
      } else {
        await this.db
          .collection('complaints')
          .updateOne({ userId: this.reportedUserId }, updateData);
      }

      await ctx.reply(
        '–í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —Å–∫–∞—Ä–≥—É –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å. –î—è–∫—É—î–º–æ –∑–∞ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –º–∏ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—å –∑ –ø–æ—Ä—É—à–Ω–∏–∫–æ–º üëÆ‚Äç‚ôÇÔ∏è',
        Markup.removeKeyboard()
      );
      await this.db.collection('viewed_profiles').insertOne({
        viewerUserId: ctx.from!.id,
        viewedUserId: this.reportedUserId,
        expiryTimestamp: new Date(Date.now() + TIME_TO_VIEW_EXPIRE),
      });
      this.reportedUserId = undefined;
      await ctx.scene.enter('lookForMatch');
    };

    complaint.hears('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', async (ctx) => {
      await handleComplaint(ctx, '');
    });
    this.addCommands(complaint);

    complaint.on('text', async (ctx) => {
      const complaintDescription = ctx.message.text;
      await handleComplaint(ctx, complaintDescription);
    });

    return complaint;
  }

  likeArchiveScene(): Scenes.BaseScene<MySceneContext> {
    const likeArchive = new Scenes.BaseScene<MySceneContext>('likeArchive');
    let matches: Match[] = [];
    let likeMatches: Match[] = [];
    let botEventMatches: Match[] = [];
    let userEventMatches: Match[] = [];
    let matchesArray: Match[] = [];
    let isBotEvent = false;
    let isUserEvent = false;
    let userMaxLikesViewLimit = MAX_LIKES_VIEW_LIMIT;
    let additionalChannelMembershipCheck = false;
    let isMaxLikeCount = false;
    const getUserProfile = async (match: Match, ctx: MySceneContext) => {
      const user = (await this.db.collection('users').findOne({
        userId: match.senderId,
      })) as unknown as UserForm;
      if (user) {
        let mediaGroup;
        if (match.likeMessage) {
          mediaGroup = this.showUserProfile(
            user,
            ctx.session.userForm,
            match.likeMessage
          );
        } else {
          mediaGroup = this.showUserProfile(user, ctx.session.userForm);
        }

        await ctx.replyWithMediaGroup(mediaGroup);
        if (user.about?.type === 'voice') {
          await ctx.replyWithVoice(user.about.content, {
            caption: '*–ü—Ä–æ —Å–µ–±–µ:*',
            parse_mode: 'Markdown',
          });
        }
        if (match.likeMessage && match.likeMessage.type === 'voice') {
          await ctx.replyWithVoice(match.likeMessage.content, {
            caption: '*–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*',
            parse_mode: 'Markdown',
          });
        }
        if (match.likeMessage && match.likeMessage.type === 'photo') {
          await ctx.replyWithPhoto(match.likeMessage.content, {
            caption: `*–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:* ${match.likeMessage.caption}`,
            parse_mode: 'Markdown',
          });
        }
        if (match.likeMessage && match.likeMessage.type === 'video') {
          await ctx.replyWithVideo(match.likeMessage.content, {
            caption: `*–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:* ${match.likeMessage.caption}`,
            parse_mode: 'Markdown',
          });
        }
        if (match.likeMessage && match.likeMessage.type === 'video_note') {
          await ctx.reply('*–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*', {
            parse_mode: 'Markdown',
          });
          await ctx.replyWithVideoNote(match.likeMessage.content);
        }
      } else {
        await ctx.reply('–°—Ö–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—Ö–æ–≤–∞–≤ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å');
      }
    };
    async function handleBotEvent(
      ctx: MySceneContext,
      event: Event,
      isUserEvent: boolean
    ) {
      if (isUserEvent) {
        await ctx.reply('üëÜüèª –í—ñ–¥–≥—É–∫–Ω—É–≤—Å—è –Ω–∞ üëáüèª');
      } else {
        await ctx.reply('üëÜüèª –ó–∞–ø—Ä–æ—à—É—î —Ç–µ–±–µ –Ω–∞ üëáüèª');
      }
      let caption = `*–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó:* ${event.eventName}\n*–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø–æ–¥—ñ—ó:* ${event.date}\n*–ú—ñ—Å—Ç–æ:* ${event.location}`;
      if (event.about) {
        caption = `${caption}\n*–î–µ—Ç–∞–ª—ñ: * ${event.about}`;
      }
      if (event.mediaIds && event.mediaIds.length > 0) {
        const mediaGroup: MediaGroup = event.mediaIds.map(
          (mediaObj: { type: string; id: string }, index: number) => ({
            type: mediaObj.type as 'document',
            media: mediaObj.id,
            caption: index === 0 ? caption : undefined,
            parse_mode: index === 0 ? 'Markdown' : undefined,
          })
        );
        await ctx.replyWithMediaGroup(mediaGroup);
      } else {
        await ctx.reply(caption, {
          parse_mode: 'Markdown',
        });
      }
    }
    const checkUserViewLikesCount = async (
      ctx: MySceneContext,
      isUserEvent?: boolean,
      isBotEvent?: boolean
    ) => {
      if (additionalChannelMembershipCheck) {
        try {
          const chatMember = await ctx.telegram.getChatMember(
            `@crush_ua`,
            ctx.session.userForm.userId
          );
          const isMember = ['member', 'administrator'].includes(
            chatMember.status
          );
          if (isMember) {
            ctx.session.userForm.isSubscribedToChannel = true;
            userMaxLikesViewLimit = MAX_LIKES_VIEW_LIMIT + 1;
            isMaxLikeCount = true;
            additionalChannelMembershipCheck = false;
            await this.updateUserPropertyToDatabase(ctx.session.userForm, {
              isSubscribedToChannel: ctx.session.userForm.isSubscribedToChannel,
            });
          } else {
            ctx.session.userForm.isSubscribedToChannel = false;
            userMaxLikesViewLimit = MAX_LIKES_VIEW_LIMIT;
            isMaxLikeCount = false;
            additionalChannelMembershipCheck = true;
            await this.updateUserPropertyToDatabase(ctx.session.userForm, {
              isSubscribedToChannel: ctx.session.userForm.isSubscribedToChannel,
            });
          }
        } catch (error) {
          console.error('Error checking user membership:', error);
        }
      }
      const user = await this.getUserFormDataFromDatabase(
        ctx.session.userForm.userId
      );
      Object.assign(ctx.session.userForm, user);
      if (
        ctx.session.userForm.seenLikesCount < userMaxLikesViewLimit ||
        ctx.session.userForm.isPremium ||
        ctx.session.userForm.isReferralBonusesActive
      ) {
        let message = '–î–∏–≤–∏–º–æ—Å—å —Ö—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–±—ñ –≤–ø–æ–¥–æ–±–∞–π–∫—É... ‚ù§Ô∏è';
        if (isUserEvent) {
          message = '–î–∏–≤–∏–º–æ—Å—å —Ö—Ç–æ –≤—ñ–¥–≥—É–∫–Ω—É–≤—Å—è –Ω–∞ —Ç–≤–æ—ó –ø–æ–¥—ñ—ó... üíå';
        } else if (isBotEvent) {
          message = '–î–∏–≤–∏–º–æ—Å—å —Ö—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–≤ —Ç–µ–±–µ –Ω–∞ –ø–æ–¥—ñ—é... üéüÔ∏è';
        }
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['‚ù§Ô∏è', 'üëé']],
            resize_keyboard: true,
          },
        });
        await getUserProfile(matchesArray[0], ctx);
        if (isBotEvent) {
          const event = (await this.db
            .collection('bot_events')
            .findOne({ eventId: matchesArray[0].eventId })) as unknown as Event;
          if (event) {
            await handleBotEvent(ctx, event, false);
          } else {
            await ctx.reply('–°—Ö–æ–∂–µ —ñ—Ü—ñ–Ω—ñ–∞—Ç–æ—Ä –≤–∏–¥–∞–ª–∏–≤ —Ü—é –ø–æ–¥—ñ—é');
          }
        } else if (isUserEvent) {
          let eventId: number = NaN;
          if (matchesArray[0].eventId) {
            eventId = matchesArray[0].eventId as number;
          }

          const event = (await this.getEventFromDatabase(
            ctx.from!.id,
            eventId
          )) as unknown as Event;

          if (event) {
            await handleBotEvent(ctx, event, true);
          } else {
            await ctx.reply('–°—Ö–æ–∂–µ —ñ—Ü—ñ–Ω—ñ–∞—Ç–æ—Ä –≤–∏–¥–∞–ª–∏–≤ —Ü—é –ø–æ–¥—ñ—é');
          }
        }
      } else {
        if (isMaxLikeCount) {
          await ctx.replyWithMarkdownV2(
            `–¢–∏ –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
          
–©–æ–± –º–∞—Ç–∏ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –º–æ–∂–µ—à *–æ—Ñ–æ—Ä–º–∏—Ç–∏ Premium –ø—ñ–¥–ø–∏—Å–∫—É* (–æ—Ç—Ä–∏–º–∞—î—à –ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç Premium —Ñ—É–Ω–∫—Ü—ñ–π)
–î—è–∫—É—î–º–æ, —â–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π (-–∞) –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ü´∂üèª`.replace(
              /([_[\]()~`>#+=|{}.!-])/g,
              '\\$1'
            ),
            Markup.inlineKeyboard([
              Markup.button.callback('–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º', `premiumBuyScene`),
            ])
          );
        } else {
          await ctx.replyWithMarkdownV2(
            `–¢–∏ –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
          
–©–æ–± –º–∞—Ç–∏ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –æ–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: 
*‚Ä¢ –æ—Ñ–æ—Ä–º–∏ Premium –ø—ñ–¥–ø–∏—Å–∫—É* (–æ—Ç—Ä–∏–º–∞—î—à –ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç Premium —Ñ—É–Ω–∫—Ü—ñ–π)
*‚Ä¢ –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª* (–æ—Ç—Ä–∏–º–∞—î—à –¥–æ–¥–∞—Ç–∫–æ–≤–æ 3 –≤–ø–æ–¥–æ–±–∞–π–∫–∏ —Ç–∞ 1 –ø–µ—Ä–µ–≥–ª—è–¥ –º–µ—Ç—á—É –Ω–∞ –¥–µ–Ω—å)`.replace(
              /([_[\]()~`>#+=|{}.!-])/g,
              '\\$1'
            ),
            Markup.inlineKeyboard([
              Markup.button.callback('–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º', `premiumBuyScene`),
              Markup.button.url('–ö–∞–Ω–∞–ª', 'https://t.me/crush_ua'),
            ])
          );
        }
      }
    };
    likeArchive.enter(async (ctx) => {
      likeMatches = [];
      botEventMatches = [];
      userEventMatches = [];
      matchesArray = [];
      isMaxLikeCount = false;
      if (!this.isConnectionOpened) {
        await this.client.connect();
      }
      const userForm = await this.getUserFormDataFromDatabase(ctx.from!.id);
      if (!ctx.session.userForm?.userId) {
        ctx.session.userForm = new UserFormModel({});
      }
      Object.assign(ctx.session.userForm, userForm);
      try {
        const chatMember = await ctx.telegram.getChatMember(
          `@crush_ua`,
          ctx.session.userForm.userId
        );
        const isMember = ['member', 'administrator'].includes(
          chatMember.status
        );
        if (isMember) {
          ctx.session.userForm.isSubscribedToChannel = true;
          userMaxLikesViewLimit = MAX_LIKES_VIEW_LIMIT + 1;
          isMaxLikeCount = true;
          additionalChannelMembershipCheck = false;
          await this.updateUserPropertyToDatabase(ctx.session.userForm, {
            isSubscribedToChannel: ctx.session.userForm.isSubscribedToChannel,
          });
        } else {
          ctx.session.userForm.isSubscribedToChannel = false;
          userMaxLikesViewLimit = MAX_LIKES_VIEW_LIMIT;
          isMaxLikeCount = false;
          additionalChannelMembershipCheck = true;
          await this.updateUserPropertyToDatabase(ctx.session.userForm, {
            isSubscribedToChannel: ctx.session.userForm.isSubscribedToChannel,
          });
        }
      } catch (error) {
        console.error('Error checking user membership in like archive:', error);
      }
      if (ctx.session.userForm.isSubscribedToChannel) {
        userMaxLikesViewLimit = MAX_LIKES_VIEW_LIMIT + 1;
      } else {
        userMaxLikesViewLimit = MAX_LIKES_VIEW_LIMIT;
      }
      if (!ctx.session.eventDetails) {
        ctx.session.eventDetails = { lookingFor: '', eventId: 0 };
      }
      matches = (await this.db
        .collection('matches')
        .find({ receiverId: ctx.from!.id })
        .toArray()) as unknown as Match[];

      matches.forEach((match) => {
        if (!match.eventId && !match.isUserEvent) {
          likeMatches.push(match);
        } else if (match.eventId && !match.isUserEvent) {
          botEventMatches.push(match);
        } else if (match.eventId && match.isUserEvent) {
          userEventMatches.push(match);
        }
      });
      const keyboard = [];
      if (likeMatches.length > 0) {
        keyboard.push('üíù');
      }
      if (botEventMatches.length > 0) {
        keyboard.push('üéüÔ∏è');
      }
      if (userEventMatches.length > 0) {
        keyboard.push('üíå');
      }
      await ctx.reply(
        `üíù –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–≤–æ—ó—Ö –≤–ø–æ–¥–æ–±–∞–π–æ–∫ ‚Äî *${likeMatches.length}*\nüéüÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω—å –Ω–∞ –ø–æ–¥—ñ—é ‚Äî *${botEventMatches.length}*\nüíå –í—ñ–¥–≥—É–∫–Ω—É–ª–∏—Å—å –Ω–∞ —Ç–≤–æ—î –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è ‚Äî *${userEventMatches.length}*`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [keyboard],
            resize_keyboard: true,
          },
        }
      );
      if (keyboard.length < 1) {
        await ctx.reply(
          `–í–ø–æ–¥–æ–±–∞–π–æ–∫ –ø–æ–∫–∏ –Ω–µ–º–∞—î\n–ú–æ–∂–µ—à —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\nüë´ ‚Äî –†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫\nüë§ ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å`,
          Markup.keyboard([['üë´', 'üë§']])
            .oneTime()
            .resize()
        );
      }
    });
    likeArchive.hears('üíù', async (ctx) => {
      matchesArray = likeMatches;
      isBotEvent = false;
      isUserEvent = false;
      if (matchesArray.length < 1) {
        await ctx.reply('–í–ø–æ–¥–æ–±–∞–π–æ–∫ –ø–æ–∫–∏ –Ω–µ–º–∞—î');
        return;
      }
      await checkUserViewLikesCount(ctx);
    });
    likeArchive.action('premiumBuyScene', async (ctx) => {
      await ctx.reply(
        '–¢–∏ –º–æ–∂–µ—à –ø—Ä–∏–¥–±–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º –∞–±–æ –∂ –ø—Ä–æ—Å—Ç–æ –∑–Ω—è—Ç–∏ –ø—Ä–æ –Ω–∞—à –±–æ—Ç –≤—ñ–¥–µ–æ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ—Å—è—á–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –ø—Ä–µ–º—ñ—É–º ü§≥',
        Markup.keyboard([['‚≠êÔ∏è –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º', '–ü—Ä–µ–º—ñ—É–º –∑–∞ –≤—ñ–¥–µ–æ ü§≥']])
          .oneTime()
          .resize()
      );
    });
    likeArchive.hears('‚≠êÔ∏è –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º', async (ctx) => {
      ctx.session.previousScene = ctx.scene.current!.id;
      await ctx.scene.enter('premiumBenefits');
    });
    likeArchive.hears('–ü—Ä–µ–º—ñ—É–º –∑–∞ –≤—ñ–¥–µ–æ ü§≥', async (ctx) => {
      ctx.session.previousScene = ctx.scene.current!.id;
      await ctx.scene.enter('premiumVideo');
    });
    likeArchive.hears('üéüÔ∏è', async (ctx) => {
      matchesArray = botEventMatches;
      isBotEvent = true;
      isUserEvent = false;
      if (matchesArray.length < 1) {
        await ctx.reply('–í–ø–æ–¥–æ–±–∞–π–æ–∫ –ø–æ–∫–∏ –Ω–µ–º–∞—î');
        return;
      }
      await checkUserViewLikesCount(ctx, isBotEvent);
    });
    likeArchive.hears('üíå', async (ctx) => {
      matchesArray = userEventMatches;
      isBotEvent = false;
      isUserEvent = true;
      if (matchesArray.length < 1) {
        await ctx.reply('–í–ø–æ–¥–æ–±–∞–π–æ–∫ –ø–æ–∫–∏ –Ω–µ–º–∞—î');
        return;
      }
      await checkUserViewLikesCount(ctx, isUserEvent);
    });
    likeArchive.hears('‚ù§Ô∏è', async (ctx) => {
      if (
        ctx.session.userForm.seenLikesCount < userMaxLikesViewLimit ||
        ctx.session.userForm.isPremium ||
        ctx.session.userForm.isReferralBonusesActive
      ) {
        const senderUser = (await this.getUserFormDataFromDatabase(
          matchesArray[0].senderId
        )) as unknown as UserForm;
        const currentUser = this.showUserProfile(
          ctx.session.userForm,
          senderUser
        );
        let username = ctx.from?.username;
        if (username) {
          username = '@' + username;
        }
        const userId = ctx.from!.id;
        const userLink = `tg://user?id=${userId}`;
        const mentionMessage =
          username || `[${ctx.from?.first_name}](${userLink})`;
        try {
          await ctx.reply(
            `–ú–µ—Ç—á –∑ –∫—Ä–∞—à–µ–º –≤—ñ–¥–±—É–≤—Å—è üòç\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å: ${matchesArray[0].senderMentionMessage}\n–ë–∞–∂–∞—é –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å ü´∂üèª`,
            {
              parse_mode: 'Markdown',
            }
          );
          await this.db
            .collection('users')
            .updateOne(
              { userId: matchesArray[0].senderId },
              { $inc: { likesCount: 1 } }
            );
          await this.db.collection('matches').deleteMany({
            $or: [
              {
                senderId: ctx.session.userForm.userId,
                receiverId: matchesArray[0].senderId,
              },
              {
                senderId: matchesArray[0].senderId,
                receiverId: ctx.session.userForm.userId,
              },
            ],
          });
          await ctx.telegram.sendMediaGroup(
            matchesArray[0].senderId,
            currentUser
          );
          if (ctx.session.userForm.about?.type === 'voice') {
            await ctx.telegram.sendVoice(
              matchesArray[0].senderId,
              ctx.session.userForm.about.content,
              {
                caption: '*–ü—Ä–æ —Å–µ–±–µ:*',
                parse_mode: 'Markdown',
              }
            );
          }
          let caption = `–¢–≤—ñ–π –∫—Ä–∞—à –≤—ñ–¥–ø–æ–≤—ñ–≤ —Ç–æ–±—ñ –≤–∑–∞—î–º–Ω—ñ—Å—Ç—é üòç\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å: ${mentionMessage}\n–ë–∞–∂–∞—é –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å ü´∂üèª`;
          if (isBotEvent) {
            const botEvent = await this.db
              .collection('bot_events')
              .findOne({ eventId: matchesArray[0].eventId });
            if (botEvent) {
              caption = `–¢–≤—ñ–π –∫—Ä–∞—à –ø—Ä–∏–π–Ω—è–≤ —Ç–≤–æ—î –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é *${botEvent.eventName}* üòç\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å ${mentionMessage}\n–ë–∞–∂–∞—é –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å ü´∂üèª`;
            } else {
              caption = `–¢–≤—ñ–π –∫—Ä–∞—à –ø—Ä–∏–π–Ω—è–≤ —Ç–≤–æ—î –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é üòç\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å: ${mentionMessage}\n–ë–∞–∂–∞—é –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å ü´∂üèª`;
            }
          } else if (isUserEvent && matchesArray[0]?.eventId) {
            const event = await this.getEventFromDatabase(
              matchesArray[0].receiverId,
              matchesArray[0].eventId
            );
            if (event) {
              caption = `–¢–≤—ñ–π –∫—Ä–∞—à –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Å–ø—ñ–ª—å–Ω–∏–π –≤—ñ–∑–∏—Ç –Ω–∞ –ø–æ–¥—ñ—é *${event.eventName}* üòç\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å: ${mentionMessage}\n–ë–∞–∂–∞—é –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å ü´∂üèª`;
            } else {
              caption = `–¢–≤—ñ–π –∫—Ä–∞—à –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Å–ø—ñ–ª—å–Ω–∏–π –≤—ñ–∑–∏—Ç –Ω–∞ –ø–æ–¥—ñ—é, –∞–ª–µ —Å—Ö–æ–∂–µ –≤–∏–¥–∞–ª–∏–≤ —ó—ó\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å: ${mentionMessage}\n–ë–∞–∂–∞—é –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å ü´∂üèª`;
            }
          }
          await ctx.telegram.sendMessage(matchesArray[0].senderId, caption, {
            parse_mode: 'Markdown',
          });
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
        } catch (error: any) {
          if (error instanceof TelegramError) {
            if (
              error.description !== 'Bad Request: chat not found' &&
              error.description !== 'Forbidden: bot was blocked by the user'
            ) {
              console.error('Like archive error:', error);
            }
          } else {
            console.error(error);
          }
        }
        matchesArray.splice(0, 1);
        ctx.session.userForm.seenLikesCount++;
        await this.updateUserPropertyToDatabase(ctx.session.userForm, {
          seenLikesCount: ctx.session.userForm.seenLikesCount,
        });
      }
      if (matchesArray[0]) {
        const user = (await this.db.collection('users').findOne({
          userId: matchesArray[0].senderId,
        })) as unknown as UserForm;
        let event = null;
        if (isBotEvent) {
          event = await this.db
            .collection('bot_events')
            .findOne({ eventId: matchesArray[0].eventId });
        }
        if (user) {
          if (
            ctx.session.userForm.seenLikesCount < userMaxLikesViewLimit ||
            ctx.session.userForm.isPremium ||
            ctx.session.userForm.isReferralBonusesActive
          ) {
            let mediaGroup;
            if (matchesArray[0].likeMessage) {
              mediaGroup = this.showUserProfile(
                user,
                ctx.session.userForm,
                matchesArray[0].likeMessage
              );
            } else {
              mediaGroup = this.showUserProfile(user, ctx.session.userForm);
            }
            await ctx.replyWithMediaGroup(mediaGroup);
            if (user.about?.type === 'voice') {
              await ctx.replyWithVoice(user.about.content, {
                caption: '*–ü—Ä–æ —Å–µ–±–µ:*',
                parse_mode: 'Markdown',
              });
            }
            if (
              matchesArray[0].likeMessage &&
              matchesArray[0].likeMessage.type === 'voice'
            ) {
              await ctx.replyWithVoice(matchesArray[0].likeMessage.content, {
                caption: '*–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*',
                parse_mode: 'Markdown',
              });
            }
            if (
              matchesArray[0].likeMessage &&
              matchesArray[0].likeMessage.type === 'photo'
            ) {
              await ctx.replyWithPhoto(matchesArray[0].likeMessage.content, {
                caption: `*–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:* ${matchesArray[0].likeMessage.caption}`,
                parse_mode: 'Markdown',
              });
            }
            if (
              matchesArray[0].likeMessage &&
              matchesArray[0].likeMessage.type === 'video'
            ) {
              await ctx.replyWithVideo(matchesArray[0].likeMessage.content, {
                caption: `*–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:* ${matchesArray[0].likeMessage.caption}`,
                parse_mode: 'Markdown',
              });
            }
            if (
              matchesArray[0].likeMessage &&
              matchesArray[0].likeMessage.type === 'video_note'
            ) {
              await ctx.reply('*–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*', {
                parse_mode: 'Markdown',
              });
              await ctx.replyWithVideoNote(matchesArray[0].likeMessage.content);
            }
            if (isBotEvent && event) {
              await ctx.reply('üëÜüèª –ó–∞–ø—Ä–æ—à—É—î —Ç–µ–±–µ –Ω–∞ üëáüèª');
              let caption = `*–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó:* ${event.eventName}\n*–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø–æ–¥—ñ—ó:* ${event.date}\n*–ú—ñ—Å—Ç–æ:* ${event.location}`;
              if (event.about) {
                caption = `${caption}\n*–î–µ—Ç–∞–ª—ñ: * ${event.about}`;
              }
              if (event.mediaIds && event.mediaIds.length > 0) {
                const mediaGroup: MediaGroup = event.mediaIds.map(
                  (mediaObj: { type: string; id: string }, index: number) => ({
                    type: mediaObj.type as 'document',
                    media: mediaObj.id,
                    caption: index === 0 ? caption : undefined,
                    parse_mode: index === 0 ? 'Markdown' : undefined,
                  })
                );
                await ctx.replyWithMediaGroup(mediaGroup);
              } else {
                await ctx.reply(caption, {
                  parse_mode: 'Markdown',
                });
              }
            } else if (isUserEvent && event) {
              await ctx.reply('üëÜüèª –í—ñ–¥–≥—É–∫–Ω—É–≤—Å—è –Ω–∞  üëáüèª');
              let caption = `*–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó:* ${event.eventName}\n*–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø–æ–¥—ñ—ó:* ${event.date}\n*–ú—ñ—Å—Ç–æ:* ${event.location}`;
              if (event.about) {
                caption = `${caption}\n*–î–µ—Ç–∞–ª—ñ: * ${event.about}`;
              }
              await ctx.reply(caption, {
                parse_mode: 'Markdown',
              });
            }
          } else {
            if (isMaxLikeCount) {
              await ctx.replyWithMarkdownV2(
                `–¢–∏ –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            
–©–æ–± –º–∞—Ç–∏ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –º–æ–∂–µ—à *–æ—Ñ–æ—Ä–º–∏—Ç–∏ Premium –ø—ñ–¥–ø–∏—Å–∫—É* (–æ—Ç—Ä–∏–º–∞—î—à –ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç Premium —Ñ—É–Ω–∫—Ü—ñ–π)
–î—è–∫—É—î–º–æ, —â–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π (-–∞) –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ü´∂üèª`.replace(
                  /([_[\]()~`>#+=|{}.!-])/g,
                  '\\$1'
                ),
                Markup.inlineKeyboard([
                  Markup.button.callback('–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º', `premiumBuyScene`),
                ])
              );
            } else {
              await ctx.replyWithMarkdownV2(
                `–¢–∏ –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            
–©–æ–± –º–∞—Ç–∏ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –æ–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: 
*‚Ä¢ –æ—Ñ–æ—Ä–º–∏ Premium –ø—ñ–¥–ø–∏—Å–∫—É* (–æ—Ç—Ä–∏–º–∞—î—à –ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç Premium —Ñ—É–Ω–∫—Ü—ñ–π)
*‚Ä¢ –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª* (–æ—Ç—Ä–∏–º–∞—î—à –¥–æ–¥–∞—Ç–∫–æ–≤–æ 3 –≤–ø–æ–¥–æ–±–∞–π–∫–∏ —Ç–∞ 1 –ø–µ—Ä–µ–≥–ª—è–¥ –º–µ—Ç—á—É –Ω–∞ –¥–µ–Ω—å)`.replace(
                  /([_[\]()~`>#+=|{}.!-])/g,
                  '\\$1'
                ),
                Markup.inlineKeyboard([
                  Markup.button.callback('–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º', `premiumBuyScene`),
                  Markup.button.url('–ö–∞–Ω–∞–ª', 'https://t.me/crush_ua'),
                ])
              );
            }
          }
        }
      } else {
        if (
          likeMatches.length > 0 ||
          botEventMatches.length > 0 ||
          userEventMatches.length > 0
        ) {
          const keyboard = [];
          if (likeMatches.length > 0) {
            keyboard.push('üíù');
          }
          if (botEventMatches.length > 0) {
            keyboard.push('üéüÔ∏è');
          }
          if (userEventMatches.length > 0) {
            keyboard.push('üíå');
          }
          await ctx.reply(
            `–ü–æ–∫–∏ –≤—Å–µ, –∞–ª–µ –≤ —Ç–µ–±–µ —î —â–µ –≤–ø–æ–¥–æ–±–∞–π–∫–∏\n\nüíù –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–≤–æ—ó—Ö –≤–ø–æ–¥–æ–±–∞–π–æ–∫ ‚Äî *${likeMatches.length}*\nüéüÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω—å –Ω–∞ –ø–æ–¥—ñ—é ‚Äî *${botEventMatches.length}*\nüíå –í—ñ–¥–≥—É–∫–Ω—É–ª–∏—Å—å –Ω–∞ —Ç–≤–æ—î –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è ‚Äî *${userEventMatches.length}*`,
            {
              parse_mode: 'Markdown',
              reply_markup: {
                keyboard: [keyboard],
                resize_keyboard: true,
              },
            }
          );
        } else {
          await ctx.reply(
            `–°—Ö–æ–∂–µ —Ü–µ –≤—Å–µ\n\n –ú–æ–∂–µ—à —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\nüë´ ‚Äî –†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫\nüë§ ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å`,
            Markup.keyboard([['üë´', 'üë§']])
              .oneTime()
              .resize()
          );
        }
      }
    });
    likeArchive.hears('üëé', async (ctx) => {
      try {
        if (
          ctx.session.userForm.seenLikesCount < userMaxLikesViewLimit ||
          ctx.session.userForm.isPremium ||
          ctx.session.userForm.isReferralBonusesActive
        ) {
          await this.db
            .collection('users')
            .updateOne(
              { userId: matchesArray[0].senderId },
              { $inc: { dislikesCount: 1 } }
            );
          await this.db.collection('matches').deleteMany({
            $or: [
              {
                senderId: ctx.session.userForm.userId,
                receiverId: matchesArray[0].senderId,
              },
              {
                senderId: matchesArray[0].senderId,
                receiverId: ctx.session.userForm.userId,
              },
            ],
          });
          await ctx.reply(
            '–¢–∏ –≤—ñ–¥—Ö–∏–ª–∏–≤ –≤–ø–æ–¥–æ–±–∞–π–∫—É. –ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É —Ç–æ—á–Ω–æ –ø–æ—â–∞—Å—Ç–∏—Ç—å ü§ûüèª'
          );
          matchesArray.splice(0, 1);
          ctx.session.userForm.seenLikesCount++;
          await this.updateUserPropertyToDatabase(ctx.session.userForm, {
            seenLikesCount: ctx.session.userForm.seenLikesCount,
          });
        }
        if (matchesArray[0]) {
          const user = (await this.db.collection('users').findOne({
            userId: matchesArray[0].senderId,
          })) as unknown as UserForm;
          let event = null;
          if (isBotEvent) {
            event = await this.db
              .collection('bot_events')
              .findOne({ eventId: matchesArray[0].eventId });
          }
          if (user) {
            if (
              ctx.session.userForm.seenLikesCount < userMaxLikesViewLimit ||
              ctx.session.userForm.isPremium ||
              ctx.session.userForm.isReferralBonusesActive
            ) {
              let mediaGroup;
              if (matchesArray[0].likeMessage) {
                mediaGroup = this.showUserProfile(
                  user,
                  ctx.session.userForm,
                  matchesArray[0].likeMessage
                );
              } else {
                mediaGroup = this.showUserProfile(user, ctx.session.userForm);
              }
              await ctx.replyWithMediaGroup(mediaGroup);
              if (user.about?.type === 'voice') {
                await ctx.replyWithVoice(user.about.content, {
                  caption: '*–ü—Ä–æ —Å–µ–±–µ:*',
                  parse_mode: 'Markdown',
                });
              }
              if (
                matchesArray[0].likeMessage &&
                matchesArray[0].likeMessage.type === 'voice'
              ) {
                await ctx.replyWithVoice(matchesArray[0].likeMessage.content, {
                  caption: '*–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*',
                  parse_mode: 'Markdown',
                });
              }
              if (
                matchesArray[0].likeMessage &&
                matchesArray[0].likeMessage.type === 'photo'
              ) {
                await ctx.replyWithPhoto(matchesArray[0].likeMessage.content, {
                  caption: `*–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:* ${matchesArray[0].likeMessage.caption}`,
                  parse_mode: 'Markdown',
                });
              }
              if (
                matchesArray[0].likeMessage &&
                matchesArray[0].likeMessage.type === 'video'
              ) {
                await ctx.replyWithVideo(matchesArray[0].likeMessage.content, {
                  caption: `*–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:* ${matchesArray[0].likeMessage.caption}`,
                  parse_mode: 'Markdown',
                });
              }
              if (
                matchesArray[0].likeMessage &&
                matchesArray[0].likeMessage.type === 'video_note'
              ) {
                await ctx.reply('*–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*', {
                  parse_mode: 'Markdown',
                });
                await ctx.replyWithVideoNote(
                  matchesArray[0].likeMessage.content
                );
              }
              if (isBotEvent && event) {
                await ctx.reply('üëÜüèª –ó–∞–ø—Ä–æ—à—É—î —Ç–µ–±–µ –Ω–∞ üëáüèª');
                let caption = `*–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó:* ${event.eventName}\n*–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø–æ–¥—ñ—ó:* ${event.date}\n*–ú—ñ—Å—Ç–æ:* ${event.location}`;
                if (event.about) {
                  caption = `${caption}\n*–î–µ—Ç–∞–ª—ñ: * ${event.about}`;
                }
                if (event.mediaIds && event.mediaIds.length > 0) {
                  const mediaGroup: MediaGroup = event.mediaIds.map(
                    (
                      mediaObj: { type: string; id: string },
                      index: number
                    ) => ({
                      type: mediaObj.type as 'document',
                      media: mediaObj.id,
                      caption: index === 0 ? caption : undefined,
                      parse_mode: index === 0 ? 'Markdown' : undefined,
                    })
                  );
                  await ctx.replyWithMediaGroup(mediaGroup);
                } else {
                  await ctx.reply(caption, {
                    parse_mode: 'Markdown',
                  });
                }
              } else if (isUserEvent && event) {
                await ctx.reply('üëÜüèª –í—ñ–¥–≥—É–∫–Ω—É–≤—Å—è –Ω–∞  üëáüèª');
                let caption = `*–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó:* ${event.eventName}\n*–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø–æ–¥—ñ—ó:* ${event.date}\n*–ú—ñ—Å—Ç–æ:* ${event.location}`;
                if (event.about) {
                  caption = `${caption}\n*–î–µ—Ç–∞–ª—ñ: * ${event.about}`;
                }
                await ctx.reply(caption, {
                  parse_mode: 'Markdown',
                });
              }
            } else {
              if (isMaxLikeCount) {
                await ctx.replyWithMarkdownV2(
                  `–¢–∏ –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
                
–©–æ–± –º–∞—Ç–∏ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –º–æ–∂–µ—à *–æ—Ñ–æ—Ä–º–∏—Ç–∏ Premium –ø—ñ–¥–ø–∏—Å–∫—É* (–æ—Ç—Ä–∏–º–∞—î—à –ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç Premium —Ñ—É–Ω–∫—Ü—ñ–π)
–î—è–∫—É—î–º–æ, —â–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π (-–∞) –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ü´∂üèª`.replace(
                    /([_[\]()~`>#+=|{}.!-])/g,
                    '\\$1'
                  ),
                  Markup.inlineKeyboard([
                    Markup.button.callback(
                      '–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º',
                      `premiumBuyScene`
                    ),
                  ])
                );
              } else {
                await ctx.replyWithMarkdownV2(
                  `–¢–∏ –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
                
–©–æ–± –º–∞—Ç–∏ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ø–æ–¥–æ–±–∞–π–æ–∫ –æ–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: 
*‚Ä¢ –æ—Ñ–æ—Ä–º–∏ Premium –ø—ñ–¥–ø–∏—Å–∫—É* (–æ—Ç—Ä–∏–º–∞—î—à –ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç Premium —Ñ—É–Ω–∫—Ü—ñ–π)
*‚Ä¢ –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª* (–æ—Ç—Ä–∏–º–∞—î—à –¥–æ–¥–∞—Ç–∫–æ–≤–æ 3 –≤–ø–æ–¥–æ–±–∞–π–∫–∏ —Ç–∞ 1 –ø–µ—Ä–µ–≥–ª—è–¥ –º–µ—Ç—á—É –Ω–∞ –¥–µ–Ω—å)`.replace(
                    /([_[\]()~`>#+=|{}.!-])/g,
                    '\\$1'
                  ),
                  Markup.inlineKeyboard([
                    Markup.button.callback(
                      '–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º',
                      `premiumBuyScene`
                    ),
                    Markup.button.url('–ö–∞–Ω–∞–ª', 'https://t.me/crush_ua'),
                  ])
                );
              }
            }
          } else {
            await ctx.reply(
              `–°—Ö–æ–∂–µ —Ü–µ –≤—Å–µ\n\n –ú–æ–∂–µ—à —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\nüë´ ‚Äî –†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫\nüë§ ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å`,
              Markup.keyboard([['üë´', 'üë§']])
                .oneTime()
                .resize()
            );
          }
        } else {
          if (
            likeMatches.length > 0 ||
            botEventMatches.length > 0 ||
            userEventMatches.length > 0
          ) {
            const keyboard = [];
            if (likeMatches.length > 0) {
              keyboard.push('üíù');
            }
            if (botEventMatches.length > 0) {
              keyboard.push('üéüÔ∏è');
            }
            if (userEventMatches.length > 0) {
              keyboard.push('üíå');
            }
            await ctx.reply(
              `–ü–æ–∫–∏ –≤—Å–µ, –∞–ª–µ –≤ —Ç–µ–±–µ —î —â–µ –≤–ø–æ–¥–æ–±–∞–π–∫–∏\n\nüíù –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–≤–æ—ó—Ö –≤–ø–æ–¥–æ–±–∞–π–æ–∫ ‚Äî *${likeMatches.length}*\nüéüÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω—å –Ω–∞ –ø–æ–¥—ñ—é ‚Äî *${botEventMatches.length}*\nüíå –í—ñ–¥–≥—É–∫–Ω—É–ª–∏—Å—å –Ω–∞ —Ç–≤–æ—î –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è ‚Äî *${userEventMatches.length}*`,
              {
                parse_mode: 'Markdown',
                reply_markup: {
                  keyboard: [keyboard],
                  resize_keyboard: true,
                },
              }
            );
          } else {
            await ctx.reply(
              `–°—Ö–æ–∂–µ —Ü–µ –≤—Å–µ\n\n –ú–æ–∂–µ—à —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\nüë´ ‚Äî –†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫\nüë§ ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å`,
              Markup.keyboard([['üë´', 'üë§']])
                .oneTime()
                .resize()
            );
          }
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      } catch (error: any) {
        if (error instanceof TelegramError) {
          if (
            error.description !== 'Bad Request: chat not found' &&
            error.description !== 'Forbidden: bot was blocked by the user'
          ) {
            console.error('Like archive error:', error);
          }
        } else {
          console.error(error);
        }
      }
    });
    likeArchive.hears('üë´', async (ctx) => {
      await ctx.scene.enter('lookForMatch');
    });
    likeArchive.hears('üë§', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    this.addCommands(likeArchive);
    return likeArchive;
  }

  referralScene(): Scenes.BaseScene<MySceneContext> {
    const referral = new Scenes.BaseScene<MySceneContext>('referral');
    let user: UserForm;
    referral.enter(async (ctx) => {
      if (!this.isConnectionOpened) {
        await this.client.connect();
      }
      user = (await this.getUserFormDataFromDatabase(
        ctx.from!.id
      )) as unknown as UserForm;
      if (user) {
        if (!ctx.session.userForm) {
          ctx.session.userForm = new UserFormModel({});
        }
        Object.assign(ctx.session.userForm, user);
        if (
          ctx.session.userForm.referees.length >= 5 &&
          ctx.session.userForm.canGetPremiumForReferrees
        ) {
          await ctx.replyWithMarkdownV2(
            `–ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤ —ñ –∑–∞ –∫–æ–∂–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞—î—à –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—å –≤–ø–æ–¥–æ–±–∞–π–æ–∫ —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –º–µ—Ç—á—ñ–≤ –Ω–∞ –¥–æ–±—É, –∞ —è–∫—â–æ –∑–∞–ø—Ä–æ—Å–∏—à 5 –¥—Ä—É–∑—ñ–≤, –æ—Ç—Ä–∏–º–∞—î—à –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –º—ñ—Å—è—Ü—å ‚≠êÔ∏è\n–í–∞—à–µ –æ—Å–æ–±–∏—Å—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è: https://t.me/DemoPS_bot?start=${user.referralToken}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: *${user.referees.length}*\n\n–ë–æ–Ω—É—Å–∏ –∑–∞—Ä–∞—Ö—É—é—Ç—å—Å—è –∫–æ–ª–∏ –¥—Ä—É–≥ —Å—Ç–≤–æ—Ä–∏—Ç—å —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å –Ω–∞ –≤–ø–æ–¥–æ–±–∞—î —Ö–æ—á–∞ –± –æ–¥–Ω—É –ª—é–¥–∏–Ω—É\n\n–í—ñ—Ç–∞—é, —Ç–∏ –º–æ–∂–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø—Ä–µ–º—ñ—É–º –Ω–∞ –º—ñ—Å—è—Ü—å ü•≥`.replace(
              /([_[\]()~`>#+=|{}.!-])/g,
              '\\$1'
            ),
            Markup.keyboard([['‚≠êÔ∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º']])
              .oneTime()
              .resize()
          );
        } else {
          await ctx.replyWithMarkdownV2(
            `–ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤ —ñ –∑–∞ –∫–æ–∂–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞—î—à –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—å –≤–ø–æ–¥–æ–±–∞–π–æ–∫ —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –º–µ—Ç—á—ñ–≤ –Ω–∞ –¥–æ–±—É, –∞ —è–∫—â–æ –∑–∞–ø—Ä–æ—Å–∏—à 5 –¥—Ä—É–∑—ñ–≤, –æ—Ç—Ä–∏–º–∞—î—à –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –º—ñ—Å—è—Ü—å ‚≠êÔ∏è\n–í–∞—à–µ –æ—Å–æ–±–∏—Å—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è: https://t.me/DemoPS_bot?start=${user.referralToken}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: *${user.referees.length}*\n\n–ë–æ–Ω—É—Å–∏ –∑–∞—Ä–∞—Ö—É—é—Ç—å—Å—è –∫–æ–ª–∏ –¥—Ä—É–≥ —Å—Ç–≤–æ—Ä–∏—Ç—å —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å –Ω–∞ –≤–ø–æ–¥–æ–±–∞—î —Ö–æ—á–∞ –± –æ–¥–Ω—É –ª—é–¥–∏–Ω—É`.replace(
              /([_[\]()~`>#+=|{}.!-])/g,
              '\\$1'
            )
          );
        }
      } else {
        await ctx.reply(
          `–°–ø–æ—á–∞—Ç–∫—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å`,
          Markup.keyboard([['üë§ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']])
            .oneTime()
            .resize()
        );
      }
    });
    this.addCommands(referral);
    referral.hears('‚≠êÔ∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º', async (ctx) => {
      const premiumEndTime = new Date();
      premiumEndTime.setTime(
        premiumEndTime.getTime() + SUBSCRIPTION_DURATION_1MONTH
      );
      ctx.session.userForm.isPremium = true;
      ctx.session.userForm.premiumEndTime = premiumEndTime;
      ctx.session.userForm.canGetPremiumForReferrees = false;
      await this.updateUserPropertyToDatabase(ctx.session.userForm, {
        isPremium: true,
        premiumEndTime: premiumEndTime,
        canGetPremiumForReferrees: false,
      });
      await ctx.reply(
        '–ü—Ä–µ–º—ñ—É–º –Ω–∞ –º—ñ—Å—è—Ü—å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ üéâ',
        Markup.removeKeyboard()
      );
    });
    referral.hears('üë§ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    referral.on('message', async (ctx) => {
      await ctx.replyWithMarkdownV2(
        `–ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤ —ñ –∑–∞ –∫–æ–∂–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞—î—à –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—å –≤–ø–æ–¥–æ–±–∞–π–æ–∫ —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –º–µ—Ç—á—ñ–≤ –Ω–∞ –¥–æ–±—É, –∞ —è–∫—â–æ –∑–∞–ø—Ä–æ—Å–∏—à 5 –¥—Ä—É–∑—ñ–≤, –æ—Ç—Ä–∏–º–∞—î—à –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –º—ñ—Å—è—Ü—å ‚≠êÔ∏è\n–í–∞—à–µ –æ—Å–æ–±–∏—Å—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è: https://t.me/DemoPS_bot?start=${user.referralToken}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: *${user.referees.length}*\n\n–ë–æ–Ω—É—Å–∏ –∑–∞—Ä–∞—Ö—É—é—Ç—å—Å—è –∫–æ–ª–∏ –¥—Ä—É–≥ —Å—Ç–≤–æ—Ä–∏—Ç—å —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å –Ω–∞ –≤–ø–æ–¥–æ–±–∞—î —Ö–æ—á–∞ –± –æ–¥–Ω—É –ª—é–¥–∏–Ω—É`.replace(
          /([_[\]()~`>#+=|{}.!-])/g,
          '\\$1'
        )
      );
    });
    return referral;
  }

  promocodeScene(): Scenes.BaseScene<MySceneContext> {
    const promocode = new Scenes.BaseScene<MySceneContext>('promocode');
    promocode.enter(async (ctx) => {
      await ctx.reply(
        '–Ø–∫—â–æ –º–∞—î—à –ø—Ä–æ–º–æ–∫–æ–¥ –≤–≤–µ–¥–∏ –π–æ–≥–æ —Ç—É—Ç üëáüèª',
        Markup.removeKeyboard()
      );
      if (!this.isConnectionOpened) {
        await this.client.connect();
      }
    });
    this.addCommands(promocode);
    promocode.hears('üë§ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    promocode.on('text', async (ctx) => {
      const userCode = ctx.message.text;
      const promoCode = await this.db
        .collection('promocodes')
        .findOne({ promocode: userCode });
      if (promoCode) {
        const user = await this.db
          .collection('users')
          .findOne({ userId: ctx.from.id });
        if (user) {
          if (!ctx.session.userForm) {
            ctx.session.userForm = new UserFormModel({});
          }
          Object.assign(ctx.session.userForm, user);
          if (!promoCode.usedBy.includes(user.userId)) {
            if (promoCode.amount > 0) {
              if (promoCode.type === 'premium') {
                if (user.isPremium) {
                  await ctx.reply(
                    '–ù–∞ –∂–∞–ª—å, –≤ —Ç–µ–±–µ –≤–∂–µ —î –ø—Ä–µ–º—ñ—É–º. –ê–ª–µ —Ü–µ–π –ø—Ä–æ–º–æ–∫–æ–¥ —Ç–∏ –º–æ–∂–µ—à –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—î–º—É –∑–Ω–∞–π–æ–º–æ–º—É'
                  );
                } else {
                  let subscriptionDurationMs = 0;
                  switch (promoCode.premiumPeriod) {
                    case '1 –º—ñ—Å—è—Ü—å':
                      subscriptionDurationMs = SUBSCRIPTION_DURATION_1MONTH;
                      break;
                    case '6 –º—ñ—Å—è—Ü—ñ–≤':
                      subscriptionDurationMs = SUBSCRIPTION_DURATION_6MONTHS;
                      break;
                    case '1 —Ä—ñ–∫':
                      subscriptionDurationMs = SUBSCRIPTION_DURATION_1YEAR;
                      break;
                  }
                  const premiumEndTime = new Date();
                  premiumEndTime.setTime(
                    premiumEndTime.getTime() + subscriptionDurationMs
                  );

                  await this.db.collection('users').updateOne(
                    { userId: user.userId },
                    {
                      $set: {
                        isPremium: true,
                        premiumEndTime: premiumEndTime,
                        likesSentCount: 0,
                      },
                    }
                  );
                  await ctx.reply(
                    `–í —Ç–µ–±–µ —Ç–µ–ø–µ—Ä —î –ø—Ä–µ–º—ñ—É–º –Ω–∞ ${promoCode.premiumPeriod} ü•≥`
                  );
                  await this.db.collection('promocodes').updateOne(
                    { promocode: userCode },
                    {
                      $push: { usedBy: user.userId },
                      $inc: { amount: -1 },
                    }
                  );
                }
              }
            } else {
              await ctx.reply(
                '–¶–µ–π –ø—Ä–æ–º–æ–∫–æ–¥ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏, –Ω–∞—Å—Ç—É–ø–æ–≥–æ —Ä–∞–∑—É –ø–æ—â–∞—Å—Ç–∏—Ç—å –±—ñ–ª—å—à–µ ü§ó'
              );
            }
          } else {
            await ctx.reply('–¢–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ —Ü–µ–π –ø—Ä–æ–º–æ–∫–æ–¥');
          }
        } else {
          await ctx.reply(
            '–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ —Å–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç',
            Markup.keyboard([['üë§ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']])
              .oneTime()
              .resize()
          );
        }
      } else {
        await ctx.reply(
          '–¢–∞–∫–æ–≥–æ –ø—Ä–æ–∫–º–æ–∫–æ–¥–∞ –Ω–µ —ñ—Å–Ω—É—î, –ø–µ—Ä–µ–≤—ñ—Ä –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —ñ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑'
        );
      }
    });
    promocode.on('message', async (ctx) => {
      await ctx.reply(
        '–Ø–∫—â–æ –º–∞—î—à –ø—Ä–æ–º–æ–∫–æ–¥ –≤–≤–µ–¥–∏ –π–æ–≥–æ —Ç—É—Ç üëáüèª',
        Markup.removeKeyboard()
      );
    });
    return promocode;
  }

  premiumSettingsScene(): Scenes.BaseScene<MySceneContext> {
    const premiumSettings = new Scenes.BaseScene<MySceneContext>(
      'premiumSettings'
    );
    let premiumMessage = '';
    premiumSettings.enter(async (ctx) => {
      if (ctx.session.userForm.isPremium) {
        let remainingTime = '';
        if (ctx.session.userForm?.premiumEndTime) {
          const premiumEndTime = new Date(ctx.session.userForm.premiumEndTime);
          const timeDifference =
            premiumEndTime.getTime() - new Date().getTime();
          if (timeDifference >= 0) {
            const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
            const hours = Math.floor(
              (timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
            );
            const minutes = Math.floor(
              (timeDifference % (1000 * 60 * 60)) / (1000 * 60)
            );
            if (days > 0) {
              remainingTime = `–ü—Ä–µ–º—ñ—É–º –¥—ñ—è—Ç–∏–º–µ —â–µ *${this.formatTimeUnits(
                days,
                '–¥–µ–Ω—å'
              )}*`;
            } else if (hours > 0) {
              remainingTime = `–ü—Ä–µ–º—ñ—É–º –¥—ñ—è—Ç–∏–º–µ —â–µ *${this.formatTimeUnits(
                hours,
                '–≥–æ–¥–∏–Ω–∞'
              )}*`;
            } else if (minutes > 0) {
              remainingTime = `–ü—Ä–µ–º—ñ—É–º –¥—ñ—è—Ç–∏–º–µ —â–µ *${this.formatTimeUnits(
                minutes,
                '—Ö–≤–∏–ª–∏–Ω–∞'
              )}*`;
            }
          }
        }
        premiumMessage = remainingTime ? `${remainingTime}\n\n` : '';
        const labelText = ctx.session.userForm.showPremiumLabel
          ? '‚≠êÔ∏è ‚Äî –°—Ö–æ–≤–∞—Ç–∏'
          : '‚≠êÔ∏è ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏';
        const likesText = ctx.session.userForm.showLikesCount
          ? '‚ù§Ô∏è ‚Äî –°—Ö–æ–≤–∞—Ç–∏'
          : '‚ù§Ô∏è ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏';
        const isIncognitoText = ctx.session.userForm.isIncognito
          ? 'üß• ‚Äî –í–∏–π—Ç–∏ –∑ –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É'
          : 'üß• ‚Äî –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–Ω–æ–Ω—ñ–º–Ω–∏–π —Ä–µ–∂–∏–º';
        await ctx.reply(
          `${premiumMessage}${labelText} —Ñ—ñ—Ä–º–æ–≤—É –ø–æ–∑–Ω–∞—á–∫—É ‚≠êÔ∏è\n${likesText} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ–¥ –ø—Ä–æ—Ñ—ñ–ª–µ–º\n${isIncognitoText}`,
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['‚≠êÔ∏è', '‚ù§Ô∏è', 'üß•'], ['üîô –ù–∞–∑–∞–¥']],
              resize_keyboard: true,
            },
          }
        );
      }
    });
    premiumSettings.hears('‚≠êÔ∏è', async (ctx) => {
      const message = ctx.session.userForm.showPremiumLabel
        ? '‚úÖ –§—ñ—Ä–º–æ–≤—É –ø–æ–∑–Ω–∞—á–∫—É –±—É–ª–æ –ø—Ä–∏–±—Ä–∞–Ω–æ. –¢–∏ –º–æ–∂–µ—à –≤ –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç –¥–æ–¥–∞—Ç–∏ —ó—ó'
        : '‚úÖ –§—ñ—Ä–º–æ–≤—É –ø–æ–∑–Ω–∞—á–∫—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ';
      const updateField = ctx.session.userForm.showPremiumLabel
        ? { showPremiumLabel: false }
        : { showPremiumLabel: true };
      await this.db
        .collection('users')
        .updateOne({ userId: ctx.from.id }, { $set: updateField });
      ctx.session.userForm.showPremiumLabel =
        !ctx.session.userForm.showPremiumLabel;
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          keyboard: [['‚≠êÔ∏è', '‚ù§Ô∏è', 'üß•'], ['üîô –ù–∞–∑–∞–¥']],
          resize_keyboard: true,
        },
      });
    });
    premiumSettings.hears('‚ù§Ô∏è', async (ctx) => {
      const message = ctx.session.userForm.showLikesCount
        ? '‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö —Ç–æ–±–æ—é –≤–ø–æ–¥–æ–±–∞–π–æ–∫ —Å—Ö–æ–≤–∞–Ω–æ. –á—Ö–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å *–Ω–µ –æ–±–Ω—É–ª–∏—Ç—å—Å—è*'
        : '‚úÖ  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö —Ç–æ–±–æ—é –≤–ø–æ–¥–æ–±–∞–π–æ–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –≤ —Ç–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å';
      const updateField = ctx.session.userForm.showLikesCount
        ? { showLikesCount: false }
        : { showLikesCount: true };
      await this.db
        .collection('users')
        .updateOne({ userId: ctx.from.id }, { $set: updateField });
      ctx.session.userForm.showLikesCount =
        !ctx.session.userForm.showLikesCount;
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          keyboard: [['‚≠êÔ∏è', '‚ù§Ô∏è', 'üß•'], ['üîô –ù–∞–∑–∞–¥']],
          resize_keyboard: true,
        },
      });
    });
    premiumSettings.hears('üß•', async (ctx) => {
      const message = ctx.session.userForm.isIncognito
        ? '‚úÖ –¢–∏ –≤–∏–π—à–æ–≤ –∑ –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É üß•\n–¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å –∑–Ω–æ–≤—É –º–æ–∂—É—Ç—å –±–∞—á–∏—Ç–∏ —ñ–Ω—à—ñ'
        : '‚úÖ –¢–∏ –ø–µ—Ä–µ–π—à–æ–≤ —É –∞–Ω–æ–Ω—ñ–º–Ω–∏–π —Ä–µ–∂–∏–º üß•\n–¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –±—É–¥—É—Ç—å –±–∞—á–∏—Ç–∏ —ñ–Ω—à—ñ';
      const updateField = ctx.session.userForm.isIncognito
        ? { isIncognito: false }
        : { isIncognito: true };
      await this.db
        .collection('users')
        .updateOne({ userId: ctx.from.id }, { $set: updateField });
      ctx.session.userForm.isIncognito = !ctx.session.userForm.isIncognito;
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          keyboard: [['‚≠êÔ∏è', '‚ù§Ô∏è', 'üß•'], ['üîô –ù–∞–∑–∞–¥']],
          resize_keyboard: true,
        },
      });
    });
    premiumSettings.hears('üîô –ù–∞–∑–∞–¥', async (ctx) => {
      await ctx.scene.enter(ctx.session.previousScene);
    });
    this.addCommands(premiumSettings);
    premiumSettings.on('message', async (ctx) => {
      if (ctx.session.userForm.isPremium) {
        const labelText = ctx.session.userForm.showPremiumLabel
          ? '‚≠êÔ∏è ‚Äî –°—Ö–æ–≤–∞—Ç–∏'
          : '‚≠êÔ∏è ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏';
        const likesText = ctx.session.userForm.showLikesCount
          ? '‚ù§Ô∏è ‚Äî –°—Ö–æ–≤–∞—Ç–∏'
          : '‚ù§Ô∏è ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏';
        const isIncognitoText = ctx.session.userForm.isIncognito
          ? 'üß• ‚Äî –í–∏–π—Ç–∏ –∑ –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É'
          : 'üß• ‚Äî –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–Ω–æ–Ω—ñ–º–Ω–∏–π —Ä–µ–∂–∏–º';
        await ctx.reply(
          `${premiumMessage}${labelText} —Ñ—ñ—Ä–º–æ–≤—É –ø–æ–∑–Ω–∞—á–∫—É ‚≠êÔ∏è\n${likesText} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ–¥ –ø—Ä–æ—Ñ—ñ–ª–µ–º\n${isIncognitoText}`,
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['‚≠êÔ∏è', '‚ù§Ô∏è', 'üß•'], ['üîô –ù–∞–∑–∞–¥']],
              resize_keyboard: true,
            },
          }
        );
      }
    });
    return premiumSettings;
  }

  premiumVideoScene(): Scenes.BaseScene<MySceneContext> {
    const premiumVideo = new Scenes.BaseScene<MySceneContext>('premiumVideo');
    premiumVideo.enter(async (ctx) => {
      await ctx.reply(
        `*–í–∏–∫–æ–Ω–∞–π 3 –∫—Ä–æ–∫–∏:*

1Ô∏è‚É£ –í–∏–≥–∞–¥–∞–π —Ü—ñ–∫–∞–≤—É —ñ–¥–µ—é –¥–ª—è –≤—ñ–¥–µ–æ. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –∑–Ω—ñ–º–∏ –≤—ñ–¥–µ–æ 
2Ô∏è‚É£ –û–ø—É–±–ª—ñ–∫—É–π –≤ –±—É–¥—å-—è–∫—ñ–π —Å–æ—Ü–º–µ—Ä–µ–∂—ñ —Ç–∞ —Å–∫–æ–ø—ñ—é–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è
3Ô∏è‚É£ –ù–∞–¥—ñ—à–ª–∏ –Ω–∞–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤–æ—î –≤—ñ–¥–µ–æ. –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ø—Ä–µ–º—ñ—É–º—É –±—É–¥–µ –ø—Ä–æ—Ç—è–≥–æ–º 1 –≥–æ–¥–∏–Ω–∏
        
–ù–∞–¥—Å–∏–ª–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ –Ω–∏–∂—á–µ üëáüèª`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['üîô –ù–∞–∑–∞–¥']],
            resize_keyboard: true,
          },
        }
      );
    });
    this.addCommands(premiumVideo);
    premiumVideo.hears('üîô –ù–∞–∑–∞–¥', async (ctx) => {
      await ctx.scene.enter(ctx.session.previousScene);
    });
    premiumVideo.on('text', async (ctx) => {
      const pattern =
        /^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$/g;

      if (pattern.test(ctx.message.text)) {
        await ctx.reply('üéâ –ü–æ—Å–∏–ª–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ');
        await this.db
          .collection('premium_video')
          .insertOne({ url: ctx.message.text, userId: ctx.from.id });
        await ctx.telegram.sendMessage(
          this.configService.get('TG_MODERATOR_ID'),
          '–ù–∞–¥—ñ–π—à–ª–æ –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ üëÄ',
          {
            reply_markup: {
              keyboard: [['–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ üëÄ']],
              resize_keyboard: true,
            },
          }
        );
      } else {
        await ctx.reply(
          '–°—Ö–æ–∂–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —è–∫–µ —Ç–∏ –≤–≤—ñ–≤, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ\n–ë—É–¥—å-–ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–µ'
        );
      }
    });
    premiumVideo.on('message', async (ctx) => {
      await ctx.reply(
        `*–í–∏–∫–æ–Ω–∞–π 3 –∫—Ä–æ–∫–∏:*

1Ô∏è‚É£ –í–∏–≥–∞–¥–∞–π —Ü—ñ–∫–∞–≤—É —ñ–¥–µ—é –¥–ª—è –≤—ñ–¥–µ–æ. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –∑–Ω—ñ–º–∏ –≤—ñ–¥–µ–æ 
2Ô∏è‚É£ –û–ø—É–±–ª—ñ–∫—É–π –≤ –±—É–¥—å-—è–∫—ñ–π —Å–æ—Ü–º–µ—Ä–µ–∂—ñ —Ç–∞ —Å–∫–æ–ø—ñ—é–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è
3Ô∏è‚É£ –ù–∞–¥—ñ—à–ª–∏ –Ω–∞–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤–æ—î –≤—ñ–¥–µ–æ. –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ø—Ä–µ–º—ñ—É–º—É –±—É–¥–µ –ø—Ä–æ—Ç—è–≥–æ–º 1 –≥–æ–¥–∏–Ω–∏
        
–ù–∞–¥—Å–∏–ª–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ –Ω–∏–∂—á–µ üëáüèª`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['üîô –ù–∞–∑–∞–¥']],
            resize_keyboard: true,
          },
        }
      );
    });
    return premiumVideo;
  }

  givePremiumForVideoScene(): Scenes.BaseScene<MySceneContext> {
    const givePremiumForVideo = new Scenes.BaseScene<MySceneContext>(
      'givePremiumForVideo'
    );
    let currentIndex = 0;
    let users: UserForm[] = [];
    let urls: { url: string; userId: number }[] = [];
    givePremiumForVideo.enter(async (ctx) => {
      try {
        if (!this.isConnectionOpened) {
          await this.client.connect();
        }
        currentIndex = 0;
        urls = (await this.db
          .collection('premium_video')
          .find()
          .toArray()) as unknown as { url: string; userId: number }[];
        const userIds = urls.map((urlObj) => urlObj.userId);
        users = (await this.db
          .collection('users')
          .find({
            userId: { $in: userIds },
          })
          .toArray()) as unknown as UserForm[];
        if (users.length > 0) {
          await ctx.reply(`–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å–∏–ª–∞–Ω—å ‚Äî *${urls.length}*`, {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['–î–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º', '–ù–µ –¥–∞–≤–∞—Ç–∏', '–í—ñ–¥–∫–ª–∞—Å—Ç–∏']],
              resize_keyboard: true,
            },
          });
          const url = urls[currentIndex];
          const matchingUser = users.find((user) => user.userId === url.userId);
          if (matchingUser) {
            await this.sendUserWithVideoLink(ctx, matchingUser, url.url);
          } else {
            await ctx.reply('–°—Ö–æ–∂–µ —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ —ñ—Å–Ω—É—î');
          }
        } else {
          await ctx.reply('–ù–æ–≤–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å –Ω–µ–º–∞—î', Markup.removeKeyboard());
        }
      } catch (error) {
        console.error('Error while looking for users with video url: ', error);
      }
    });
    givePremiumForVideo.hears('–î–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º', async (ctx) => {
      try {
        const premiumEndTime = new Date();
        premiumEndTime.setTime(
          premiumEndTime.getTime() + SUBSCRIPTION_DURATION_1MONTH
        );
        let url = urls[currentIndex];
        await this.db.collection('users').updateOne(
          { userId: url.userId },
          {
            $set: {
              isPremium: true,
              premiumEndTime: premiumEndTime,
              likesSentCount: 0,
            },
          }
        );
        await this.db.collection('premium_video').deleteOne({ url: url.url });
        await ctx.telegram.sendMessage(
          url.userId,
          'üéâ –í —Ç–µ–±–µ —Ç–µ–ø–µ—Ä —î –ø—Ä–µ–º—ñ—É–º –Ω–∞ –º—ñ—Å—è—Ü—å –∑–∞ –ø–æ—à–∏—Ä–µ–Ω–Ω—è –Ω–∞—à–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É'
        );
        currentIndex++;
        if (urls[currentIndex]) {
          url = urls[currentIndex];
          const matchingUser = users.find((user) => user.userId === url.userId);
          if (matchingUser) {
            await this.sendUserWithVideoLink(ctx, matchingUser, url.url);
          } else {
            await ctx.reply('–°—Ö–æ–∂–µ —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ —ñ—Å–Ω—É—î');
          }
        } else {
          await ctx.reply('–°—Ö–æ–∂–µ —Ü–µ –≤—Å–µ'), Markup.removeKeyboard();
        }
      } catch (error) {
        console.error('Error giving premium to user for video', error);
      }
    });
    givePremiumForVideo.hears('–ù–µ –¥–∞–≤–∞—Ç–∏', async (ctx) => {
      try {
        let url = urls[currentIndex];
        await this.db.collection('premium_video').deleteOne({ url: url.url });
        currentIndex++;
        if (urls[currentIndex]) {
          url = urls[currentIndex];
          const matchingUser = users.find((user) => user.userId === url.userId);
          if (matchingUser) {
            await this.sendUserWithVideoLink(ctx, matchingUser, url.url);
          } else {
            await ctx.reply('–°—Ö–æ–∂–µ —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ —ñ—Å–Ω—É—î');
          }
        } else {
          await ctx.reply('–°—Ö–æ–∂–µ —Ü–µ –≤—Å–µ'), Markup.removeKeyboard();
        }
      } catch (error) {
        console.error('Error not giving premium to user for video', error);
      }
    });
    givePremiumForVideo.hears('–í—ñ–¥–∫–ª–∞—Å—Ç–∏', async (ctx) => {
      try {
        let url = urls[currentIndex];
        currentIndex++;
        if (urls[currentIndex]) {
          url = urls[currentIndex];
          const matchingUser = users.find((user) => user.userId === url.userId);
          if (matchingUser) {
            await this.sendUserWithVideoLink(ctx, matchingUser, url.url);
          } else {
            await ctx.reply('–°—Ö–æ–∂–µ —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ —ñ—Å–Ω—É—î');
          }
        } else {
          await ctx.reply('–°—Ö–æ–∂–µ —Ü–µ –≤—Å–µ'), Markup.removeKeyboard();
        }
      } catch (error) {
        console.error('Error posponing premium to user for video', error);
      }
    });
    this.addCommands(givePremiumForVideo);
    return givePremiumForVideo;
  }

  moderateScene(): Scenes.BaseScene<MySceneContext> {
    const moderate = new Scenes.BaseScene<MySceneContext>('moderate');
    let currentIndex = 0;
    let reportedUsers: UserForm[] = [];
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let complaints: any[] = [];
    moderate.enter(async (ctx) => {
      currentIndex = 0;
      complaints = await this.db.collection('complaints').find().toArray();
      const reportedUserIds = complaints.map((complaint) => complaint.userId);
      reportedUsers = (await this.db
        .collection('users')
        .find({
          userId: { $in: reportedUserIds },
        })
        .toArray()) as unknown as UserForm[];

      if (reportedUsers.length > 0) {
        await ctx.reply(`–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—É—à–Ω–∏–∫—ñ–≤ ‚Äî *${reportedUsers.length}*`, {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['–ó–∞–±–∞–Ω–∏—Ç–∏', '–ù–µ –≤–∏–Ω–Ω–∏–π']],
            resize_keyboard: true,
          },
        });
        const reportedUser = reportedUsers[currentIndex];
        const matchingComplaint = complaints.find(
          (complaint) => complaint.userId === reportedUser.userId
        );
        const complaintsNum = matchingComplaint
          ? matchingComplaint.complaintsNum
          : 0;
        await this.sendReportedProfile(
          ctx,
          reportedUser,
          complaintsNum,
          matchingComplaint.descriptions
        );
      } else {
        await ctx.reply('–ù–æ–≤–∏—Ö —Å–∫–∞—Ä–≥ –Ω–µ–º–∞—î', Markup.removeKeyboard());
      }
    });
    moderate.hears(['–ó–∞–±–∞–Ω–∏—Ç–∏', '–ù–µ –≤–∏–Ω–Ω–∏–π'], async (ctx) => {
      if (currentIndex >= reportedUsers.length) {
        await ctx.reply('–ü–æ—Ä—É—à–Ω–∏–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å', Markup.removeKeyboard());
        return;
      }

      const reportedUser = reportedUsers[currentIndex];
      const action = ctx.match?.[0] || '';

      if (action === '–ó–∞–±–∞–Ω–∏—Ç–∏') {
        const banData = await this.db
          .collection('bans')
          .findOne({ userId: reportedUser.userId });
        const banCount = banData ? banData.banCount : 0;
        const banDuration =
          banCount === 0
            ? FIRST_BAN_TIME
            : banCount === 1
            ? SECOND_BAN_TIME
            : PERMANENT_BAN_TIME;
        const banExpirationDate = new Date(Date.now() + banDuration);
        await this.db.collection('bans').updateOne(
          { userId: reportedUser.userId },
          {
            $set: {
              banExpirationDate,
              banCount: banCount + 1,
            },
          },
          { upsert: true }
        );
      }

      currentIndex++;

      await this.db
        .collection('complaints')
        .deleteOne({ userId: reportedUser.userId });
      if (reportedUsers[currentIndex]) {
        const reportedUser = reportedUsers[currentIndex];
        const matchingComplaint = complaints.find(
          (complaint) => complaint.userId === reportedUser.userId
        );
        const complaintsNum = matchingComplaint
          ? matchingComplaint.complaintsNum
          : 0;
        await this.sendReportedProfile(
          ctx,
          reportedUsers[currentIndex],
          complaintsNum,
          matchingComplaint.descriptions
        );
      } else {
        await ctx.reply('–ü–æ—Ä—É—à–Ω–∏–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å', Markup.removeKeyboard());
      }
    });
    this.addCommands(moderate);

    return moderate;
  }

  showPremiumBenefitsScene(): Scenes.BaseScene<MySceneContext> {
    const premiumBenefits = new Scenes.BaseScene<MySceneContext>(
      'premiumBenefits'
    );
    premiumBenefits.enter(async (ctx) => {
      await ctx.reply(
        `üòé –ó *Premium –ø—ñ–¥–ø–∏—Å–∫–æ—é* —Ç–∏ –∑–º–æ–∂–µ—à:

üë§ *–í —Å–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ:* 
‚Ä¢ –î–æ–¥–∞—Ç–∏ –≤ –ø—Ä–æ—Ñ—ñ–ª—å –¥–æ 7 —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ
‚Ä¢ –ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ –≤ –ø—Ä–æ—Ñ—ñ–ª—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
‚Ä¢ –î–æ–¥–∞—Ç–∏ –≤ –ø—Ä–æ—Ñ—ñ–ª—å 2 –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤–æ—ó —Å–æ—Ü–º–µ—Ä–µ–∂—ñ (Instagram, TikTok)
‚Ä¢ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ—Ä–º–æ–≤—É –ø–æ–∑–Ω–∞—á–∫—É –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ —Ç–∞ –≤ —Å–≤–æ—ó—Ö –ø–æ–¥—ñ—è—Ö ‚≠êÔ∏è *Premium Crush* (–ø–æ–∑–Ω–∞—á–∫—É –º–æ–∂–Ω–∞ –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏) 
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤–ø–æ–¥–æ–±–∞–π–æ–∫ —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ 
        
üë´ *–í–∑–∞—î–º–æ–¥—ñ—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏:*
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å –≤—Å—ñ —Å–≤–æ—ó –º–µ—Ç—á—ñ
‚Ä¢ –ë–µ–∑ –æ–±–º–µ–∂–µ–Ω—å —Å—Ç–∞–≤–∏—Ç–∏ –≤–ø–æ–¥–æ–±–∞–π–∫–∏ —ñ–Ω—à–∏–º –∫—Ä–∞—à–∞–º
‚Ä¢ –ù–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Å—É–ø–µ—Ä-–≤–ø–æ–¥–æ–±–∞–π–∫–æ—é –¥–æ–≤–∂–∏–Ω–æ—é –¥–æ 300 —Å–∏–º–≤–æ–ª—ñ–≤
‚Ä¢ –ù–∞–¥—Å–∏–ª–∞—Ç–∏ –≤—ñ–¥–µ–æ/–∫–∞—Ä—Ç–∏–Ω–∫–∏/–≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–∞–∑–æ–º –∑ —Å—É–ø–µ—Ä-–≤–ø–æ–¥–æ–±–∞–π–∫–æ—é
‚Ä¢ –ù–∞ 50% —á–∞—Å—Ç—ñ—à–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ —Ç–≤–æ—î—ó –ø–æ–¥—ñ—ó 
‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –∞–Ω–æ–Ω—ñ–º–Ω–∏–º —Ä–µ–∂–∏–º–æ–º 
        
üéÅ *–î–æ–¥–∞—Ç–∫–æ–≤–æ:*
‚Ä¢ –í—ñ–¥–≤—ñ–¥—É–≤–∞—Ç–∏ —ñ–≤–µ–Ω—Ç–∏ –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –∑–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è–º–∏ 
‚Ä¢ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –Ω–∞—à–æ–≥–æ *–∑–∞–∫—Ä–∏—Ç–æ–≥–æ –∫–æ–º'—é–Ω—ñ—Ç—ñ*
‚Ä¢ –†–∞–Ω–Ω—ñ–π –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
        
–ß–µ–∫–∞—î–º–æ –Ω–∞ —Ç–µ–±–µ ü´∂üèª`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['‚≠êÔ∏è –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º'], ['üîô –ù–∞–∑–∞–¥']],
            resize_keyboard: true,
          },
        }
      );
    });
    premiumBenefits.hears('‚≠êÔ∏è –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º', async (ctx) => {
      ctx.session.previousScene = ctx.scene.current!.id;
      await ctx.scene.enter('premiumPeriod');
    });
    premiumBenefits.hears('üîô –ù–∞–∑–∞–¥', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    this.addCommands(premiumBenefits);
    premiumBenefits.on('message', async (ctx) => {
      await ctx.reply(
        `–¢–∏ –º–æ–∂–µ—à –∞–±–æ –∫—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥ üëáüèª`,
        Markup.keyboard([['–ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º'], ['üîô –ù–∞–∑–∞–¥']])
          .oneTime()
          .resize()
      );
    });
    return premiumBenefits;
  }

  choosePremiumPeriodScene(): Scenes.BaseScene<MySceneContext> {
    const premiumPeriod = new Scenes.BaseScene<MySceneContext>('premiumPeriod');
    premiumPeriod.enter(async (ctx) => {
      const replyMarkup = Markup.keyboard([
        ['1 –º—ñ—Å—è—Ü—å', '6 –º—ñ—Å—è—Ü—ñ–≤', '1 —Ä—ñ–∫'],
        ['üîô –ù–∞–∑–∞–¥'],
      ])
        .oneTime()
        .resize();

      await ctx.reply(
        `–ó–ú–Ü–ù–ò–¢–ò –¶–ï–ô –¢–ï–ö–°–¢\nüìÖ –Ø–∫–∏–π –ø–µ—Ä—ñ–æ–¥ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å? –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞–∫—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:\n‚ú¶ 1 –º—ñ—Å—è—Ü—å - 100 –≥—Ä–∏–≤–µ–Ω—å\n‚ú¶ 6 –º—ñ—Å—è—Ü—ñ–≤ - 450 –≥—Ä–∏–≤–µ–Ω—å (75–≥—Ä–Ω/–º—ñ—Å—è—Ü—å) –∑–∞–º—ñ—Å—Ç—å 600\n‚ú¶ 1 —Ä—ñ–∫ - 600 –≥—Ä–∏–≤–µ–Ω—å (50–≥—Ä–Ω/–º—ñ—Å—è—Ü—å) –∑–∞–º—ñ—Å—Ç—å 1200\nüí∂ –û–ø–ª–∞—Ç–∞ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —Ä–∞–∑–æ–≤–æ, –ø—ñ—Å–ª—è —á–æ–≥–æ –ø—Ä–µ–º—ñ—É–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è.`,
        replyMarkup
      );
    });
    this.addCommands(premiumPeriod);

    premiumPeriod.hears(['1 –º—ñ—Å—è—Ü—å', '6 –º—ñ—Å—è—Ü—ñ–≤', '1 —Ä—ñ–∫'], async (ctx) => {
      const userId = ctx.from!.id;
      const user = await this.getUserFormDataFromDatabase(userId);
      if (!ctx.session.userForm) {
        ctx.session.userForm = new UserFormModel({});
      }
      Object.assign(ctx.session.userForm, user);
      if (user && user.isPremium) {
        await ctx.reply('–¢–∏ –≤–∂–µ –º–∞—î—à –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫—É');
        return;
      }

      const subscriptionInfo = this.getSubscriptionInfo(ctx.message.text);
      if (subscriptionInfo) {
        const subscriptionPeriodUa = this.translateSubPeriodToUa(
          subscriptionInfo.period
        );
        const orderReference = this.generateOrderReference(
          userId,
          subscriptionInfo.period
        );
        const paymentRequest = this.createPaymentRequest(
          orderReference,
          subscriptionPeriodUa
        );
        try {
          const response = await axios.post(
            'https://api.wayforpay.com/api',
            paymentRequest
          );
          if (response.data.reason === 'Ok') {
            const invoiceUrl = response.data.invoiceUrl;
            await ctx.reply(
              `–ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ ${subscriptionPeriodUa} –∑–∞ ${subscriptionInfo.price} –≥—Ä–∏–≤–µ–Ω—å`,
              Markup.inlineKeyboard([
                Markup.button.url('–ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É', invoiceUrl),
              ])
            );
          }
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
        } catch (error: any) {
          if (error instanceof TelegramError) {
            if (
              error.description !== 'Bad Request: chat not found' &&
              error.description !== 'Forbidden: bot was blocked by the user'
            ) {
              console.error('WayForPay error', error);
            }
          } else {
            console.error(error);
          }
        }
      }
    });

    premiumPeriod.hears('üîô –ù–∞–∑–∞–¥', async (ctx) => {
      await ctx.scene.enter(ctx.session.previousScene);
    });

    return premiumPeriod;
  }

  getSubscriptionInfo(
    periodOption: string
  ): { period: string; price: number } | null {
    const subscriptionInfoMap: Record<
      string,
      { period: string; price: number }
    > = {
      '1 –º—ñ—Å—è—Ü—å': { period: '1 month', price: 100 },
      '6 –º—ñ—Å—è—Ü—ñ–≤': { period: '6 months', price: 450 },
      '1 —Ä—ñ–∫': { period: '1 year', price: 600 },
    };
    return subscriptionInfoMap[periodOption] || null;
  }

  translateSubPeriodToUa(period: string): string {
    const subscriptionInfoMap: { [key: string]: string } = {
      '1 month': '1 –º—ñ—Å—è—Ü—å',
      '6 months': '6 –º—ñ—Å—è—Ü—ñ–≤',
      '1 year': '1 —Ä—ñ–∫',
    };
    return subscriptionInfoMap[period];
  }

  generateOrderReference(userId: number, subscriptionPeriod: string): string {
    return `ORDER_${Date.now()}_${userId}_${subscriptionPeriod}`;
  }

  createPaymentRequest(orderRef: string, period: string) {
    const merchantAccount = 't_me_bbcec';
    const orderReference = orderRef;
    const orderDate = Math.floor(new Date().getTime() / 1000);
    const currency = 'UAH';
    const serviceUrl = this.configService.get('SERVICE_URL');
    const merchantDomainName = this.configService.get('MERCHANT_DOMAIN_NAME');
    const merchantSecretKey = this.configService.get('MERCHANT_SECRET_KEY');
    const productName = [`–ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ Crush. –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å ‚Äî ${period}`];
    const productCount = [1];
    const productPrice = [1];
    const orderTimeout = 49000;
    const amount = productPrice.reduce((total, price, index) => {
      return total + price * productCount[index];
    }, 0);
    const merchantAuthType = 'SimpleSignature';
    const stringToSign = `${merchantAccount};${merchantDomainName};${orderReference};${orderDate};${amount};${currency};${productName};${productCount};${productPrice}`;

    const hmac = crypto.createHmac('md5', merchantSecretKey);
    hmac.update(stringToSign, 'utf-8');
    const merchantSignature = hmac.digest('hex');

    const paymentRequest = {
      transactionType: 'CREATE_INVOICE',
      merchantAccount,
      merchantAuthType,
      merchantDomainName,
      merchantSignature,
      apiVersion: 2,
      language: 'ua',
      serviceUrl,
      orderReference,
      orderDate,
      amount,
      currency,
      orderTimeout,
      productName,
      productPrice,
      productCount,
      paymentSystems:
        'card;googlePay;applePay;privat24;visaCheckout;masterPass',
    };
    return paymentRequest;
  }

  donateScene(): Scenes.BaseScene<MySceneContext> {
    const donate = new Scenes.BaseScene<MySceneContext>('donate');
    donate.enter(async (ctx) => {
      await ctx.reply(
        `–©–æ–± —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ –Ω–∞—à –±–æ—Ç —Ç–∞ –∑–∞–ª—É—á–∞—Ç–∏ –±—ñ–ª—å—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±–∞–≥–∞—Ç–æ –∫–∞–≤–∏ —Ç–∞ –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫—ñ–≤ ü´†
          
–í–∞—à—ñ –≤–Ω–µ—Å–∫–∏ —Å–ø—Ä–∏—è—Ç–∏–º—É—Ç—å –¥–æ–≤—à—ñ–π –∂–∏—Ç—Ç—î–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ —è–∫ –±–æ—Ç–∞, —Ç–∞–∫ —ñ –π–æ–≥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤ )`,
        Markup.inlineKeyboard([
          Markup.button.url(
            'ü´∂üèª –ó—Ä–æ–±–∏—Ç–∏ –≤–Ω–µ—Å–æ–∫',
            'https://send.monobank.ua/jar/9dL7twbPY8'
          ),
        ])
      );
    });
    this.addCommands(donate);
    donate.on('message', async (ctx) => {
      await ctx.reply(
        `–©–æ–± —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ –Ω–∞—à –±–æ—Ç —Ç–∞ –∑–∞–ª—É—á–∞—Ç–∏ –±—ñ–ª—å—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±–∞–≥–∞—Ç–æ –∫–∞–≤–∏ —Ç–∞ –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫—ñ–≤ ü´†
          
–í–∞—à—ñ –≤–Ω–µ—Å–∫–∏ —Å–ø—Ä–∏—è—Ç–∏–º—É—Ç—å –¥–æ–≤—à—ñ–π –∂–∏—Ç—Ç—î–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ —è–∫ –±–æ—Ç–∞, —Ç–∞–∫ —ñ –π–æ–≥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤ )`,
        Markup.inlineKeyboard([
          Markup.button.url(
            'ü´∂üèª –ó—Ä–æ–±–∏—Ç–∏ –≤–Ω–µ—Å–æ–∫',
            'https://send.monobank.ua/jar/9dL7twbPY8'
          ),
        ])
      );
    });
    return donate;
  }
  helpScene(): Scenes.BaseScene<MySceneContext> {
    const help = new Scenes.BaseScene<MySceneContext>('help');
    help.enter(async (ctx) => {
      await ctx.reply(
        `ü¶∏‚Äç‚ôÄÔ∏è –ú–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó?
      
–ü–∏—à–∏ –Ω–∞–º —Å—é–¥–∏ [–û–ª–µ–∫—Å—ñ–π](tg://user?id=${this.configService.get(
          'TG_MODERATOR_ID'
        )})`,
        { parse_mode: 'Markdown' }
      );
    });
    help.command('moderate', async (ctx) => {
      if (
        ctx.from.id === parseInt(this.configService.get('TG_MODERATOR_ID'), 10)
      ) {
        await ctx.scene.enter('moderate');
      }
    });
    help.command('givePremiumForVideo', async (ctx) => {
      if (
        ctx.from.id === parseInt(this.configService.get('TG_MODERATOR_ID'), 10)
      ) {
        await ctx.scene.enter('givePremiumForVideo');
      }
    });
    help.command('createEvent', async (ctx) => {
      if (
        ctx.from.id === parseInt(this.configService.get('TG_MODERATOR_ID'), 10)
      ) {
        await ctx.scene.enter('botEventName');
      }
    });
    this.addCommands(help);
    help.on('message', async (ctx) => {
      await ctx.reply(
        `ü¶∏‚Äç‚ôÄÔ∏è –ú–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó?
      
–ü–∏—à–∏ –Ω–∞–º —Å—é–¥–∏ [–û–ª–µ–∫—Å—ñ–π](tg://user?id=${this.configService.get(
          'TG_MODERATOR_ID'
        )})`,
        { parse_mode: 'Markdown' }
      );
    });
    return help;
  }
  async sendReportedProfile(
    ctx: MySceneContext,
    reportedUser: UserForm,
    complaintsNum: number,
    descriptions: string[]
  ) {
    const banData = await this.db
      .collection('bans')
      .findOne({ userId: reportedUser.userId });
    const complaintsList = descriptions
      .map((complaint, index) => `*${index + 1})* ${complaint}`)
      .join('\n');
    const message = `–ù–∞ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥—ñ–π—à–ª–∞ —Å–∫–∞—Ä–≥–∞:
*–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫–∞—Ä–≥:* ${complaintsNum}
*–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–Ω—ñ–≤:* ${banData ? banData.banCount : 0}
*–Ü–º'—è:* ${reportedUser.username}
*–í—ñ–∫:* ${reportedUser.age}
*–ú—ñ—Å—Ç–æ:* ${reportedUser.location}
*–ü—Ä–æ —Å–µ–±–µ:* ${reportedUser.about?.content}
 
*–ü—Ä–∏—á–∏–Ω–∏ —Å–∫–∞—Ä–≥:*
${complaintsList}`;
    const mediaGroup: MediaGroup = reportedUser.mediaIds.map(
      (mediaObj: { type: string; id: string }, index: number) => ({
        type: mediaObj.type as 'document',
        media: mediaObj.id,
        caption: index === 0 ? message : undefined,
        parse_mode: index === 0 ? 'Markdown' : undefined,
      })
    );
    await ctx.replyWithMediaGroup(mediaGroup);
  }
  async sendUserWithVideoLink(
    ctx: MySceneContext,
    user: UserForm,
    url: string
  ) {
    const message = `*–ü–æ—Å–∏–ª–∞–Ω–Ω—è:* ${url}
*Id:* ${user.userId}
*–Ü–º'—è:* ${user.username}
*–í—ñ–∫:* ${user.age}
*–ú—ñ—Å—Ç–æ:* ${user.location}
*–ü—Ä–æ —Å–µ–±–µ:* ${user.about?.content}`.replace(/([_[\]()~`>#+=|{}.!-])/g, '\\$1');
    const mediaGroup: MediaGroup = user.mediaIds.map(
      (mediaObj: { type: string; id: string }, index: number) => ({
        type: mediaObj.type as 'document',
        media: mediaObj.id,
        caption: index === 0 ? message : undefined,
        parse_mode: index === 0 ? 'MarkdownV2' : undefined,
      })
    );
    await ctx.replyWithMediaGroup(mediaGroup);
  }
  addCommands(scene: Scenes.BaseScene<MySceneContext>) {
    scene.command('start', async (ctx) => {
      await ctx.reply(`–í—ñ—Ç–∞—î–º–æ –≤ –∫–æ–º'—é–Ω—ñ—Ç—ñ Crush! üëãüèª

üíù Crush ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ø—Ä–æ—î–∫—Ç, —è–∫–∏–π –Ω–∞–ø–æ–≤–Ω–∏—Ç—å —Ç–≤–æ—î –∂–∏—Ç—Ç—è –ø—Ä–∏—î–º–Ω–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏. –í—ñ–Ω –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–∞–Ω—å–π–æ–Ω–∞ –¥–ª—è –±—É–¥—å-—è–∫–æ—ó –ø–æ–¥—ñ—ó —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π. –ê –º–æ–∂–ª–∏–≤–æ, —Å–∞–º–µ —Ç—É—Ç —Ç–∏ –∑–Ω–∞–π–¥–µ—à —Å–æ–±—ñ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞ –∞–±–æ –ø–æ–¥—Ä—É–≥—É –¥–ª—è –Ω–µ–∑–∞–±—É—Ç–Ω—ñ—Ö —Å–ø—ñ–ª—å–Ω–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤!
      
–ö–æ–º–∞–Ω–¥–∞ Crush‚Äô–∞ –º—ñ—Ü–Ω–æ –æ–±—ñ–π–Ω—è–ª–∞ —Ç–µ–±–µü´Ç`);
      const userForm = await this.getUserFormDataFromDatabase(ctx.from.id);
      if (!ctx.session.userForm) {
        ctx.session.userForm = new UserFormModel({});
      }
      Object.assign(ctx.session.userForm, userForm);
      if (userForm) {
        await ctx.reply('‚¨áÔ∏è‚Å£');
        await this.registerUserLastActivity(userForm.userId);
      } else {
        await ctx.reply(
          '‚¨áÔ∏è‚Å£',
          Markup.keyboard([['üë§ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']])
            .oneTime()
            .resize()
        );
        try {
          const referralToken = ctx.message.text.split(' ')[1];
          if (referralToken) {
            const referrerUser = await this.db
              .collection('users')
              .findOne({ referralToken });
            if (referrerUser) {
              ctx.session.userForm.referrerUserId = referrerUser.userId;
            }
          }
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
        } catch (error: any) {
          if (error instanceof TelegramError) {
            if (
              error.description !== 'Bad Request: chat not found' &&
              error.description !== 'Forbidden: bot was blocked by the user'
            ) {
              console.error('Error detecting user token:', error);
            }
          } else {
            console.error(error);
          }
        }
      }
    });
    scene.command('events', async (ctx) => {
      await ctx.scene.enter('eventChoose');
    });
    scene.command('people', async (ctx) => {
      await ctx.scene.enter('lookForMatch');
    });
    scene.command('help', async (ctx) => {
      await ctx.scene.enter('help');
    });
    scene.command('profile', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    scene.command('donate', async (ctx) => {
      await ctx.scene.enter('donate');
    });
    scene.command('premium', async (ctx) => {
      await ctx.scene.enter('premiumBenefits');
    });
    scene.command('code', async (ctx) => {
      await ctx.scene.enter('promocode');
    });
    scene.command('referral', async (ctx) => {
      await ctx.scene.enter('referral');
    });
    scene.hears('üóÑ –ü–µ—Ä–µ–π—Ç–∏ —É –∞—Ä—Ö—ñ–≤', async (ctx) => {
      await ctx.scene.enter('likeArchive');
    });
    scene.hears('üë´ –ó–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫', async (ctx) => {
      await ctx.scene.enter('lookForMatch');
    });
    scene.hears('üçæ –ü–æ–¥—ñ—ó', async (ctx) => {
      await ctx.scene.enter('eventChoose');
    });
    scene.hears('üë§ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    scene.hears('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ üëÄ', async (ctx) => {
      if (
        ctx.from.id === parseInt(this.configService.get('TG_MODERATOR_ID'), 10)
      ) {
        await ctx.scene.enter('givePremiumForVideo');
      }
    });
    scene.command('premiumTest', async (ctx) => {
      // TEST FUNC DELETE IN PROD!!!!!
      const subscriptionDurationMs = SUBSCRIPTION_DURATION_TEST;
      const premiumEndTime = new Date();
      premiumEndTime.setTime(premiumEndTime.getTime() + subscriptionDurationMs);

      await this.db.collection('users').updateOne(
        { userId: +this.configService.get('TG_MODERATOR_ID') },
        {
          $set: {
            isPremium: true,
            premiumEndTime: premiumEndTime,
            likesSentCount: 0,
          },
        }
      );
      await ctx.telegram.sendMessage(
        this.configService.get('TG_MODERATOR_ID'),
        '–í —Ç–µ–±–µ —Ç–µ–ø–µ—Ä —î –ø—Ä–µ–º—ñ—É–º'
      );
    });
  }

  async saveUserFormToDatabase(userForm: UserForm) {
    try {
      const userFormData = new UserFormModel<UserForm>(userForm);
      const user = await this.db
        .collection('users')
        .findOne({ userId: userForm.userId });
      if (user) {
        await this.db.collection('users').updateOne(
          { userId: userForm.userId },
          {
            $set: {
              // Cannot just pass an userFormdData obj as it causes error for some reason
              userId: userForm.userId,
              username: userForm.username,
              gender: userForm.gender,
              lookingFor: userForm.lookingFor,
              lookingForMinAge: userForm.lookingForMinAge,
              lookingForMaxAge: userForm.lookingForMaxAge,
              age: userForm.age,
              about: userForm.about,
              socialLinks: userForm.socialLinks,
              coordinates: userForm.coordinates,
              actualLocation: userForm.actualLocation,
              location: userForm.location,
              mediaIds: userForm.mediaIds,
              likesSentCount: userForm.likesSentCount,
              isActive: userForm.isActive,
              isIncognito: userForm.isIncognito,
              isPremium: userForm.isPremium,
              premiumEndTime: userForm.premiumEndTime,
              showPremiumLabel: userForm.showPremiumLabel,
              lastActive: userForm.lastActive,
              likesCount: userForm.likesCount,
              dislikesCount: userForm.dislikesCount,
              registrationDate: userForm.registrationDate,
              referralToken: userForm.referralToken,
              referees: userForm.referees,
              referrerUserId: userForm.referrerUserId,
              isRegisteredReferee: userForm.isRegisteredReferee,
              isSubscribedToChannel: userForm.isSubscribedToChannel,
              seenLikesCount: userForm.seenLikesCount,
              isReferralBonusesActive: userForm.isReferralBonusesActive,
              referralBonusesEndTime: userForm.referralBonusesEndTime,
              canGetPremiumForReferrees: userForm.canGetPremiumForReferrees,
            },
          }
        );
      } else {
        const currentDate = new Date();
        const year = currentDate.getFullYear();
        const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
        const day = currentDate.getDate().toString().padStart(2, '0');
        const formattedDate = `${day}.${month}.${year}`;
        userFormData.registrationDate = formattedDate;
        userFormData.showPremiumLabel = true;
        userFormData.showLikesCount = true;
        userFormData.likesCount = 0;
        userFormData.dislikesCount = 0;
        userFormData.isActive = true;
        userFormData.isIncognito = false;
        userFormData.likesSentCount = 0;
        userFormData.seenLikesCount = 0;
        userFormData.isPremium = false;
        userFormData.isSubscribedToChannel = false;
        userFormData.referees = [];
        userFormData.isRegisteredReferee = false;
        userFormData.isReferralBonusesActive = false;
        userFormData.canGetPremiumForReferrees = true;
        userFormData.referralToken = this.generateReferralToken(
          userFormData.userId
        );
        await this.db.collection('users').insertOne(userFormData);
      }
    } catch (error) {
      console.error('Error saving UserForm data:', error);
    }
  }
  async saveEventToDatabase(event: Event) {
    try {
      const eventData = new EventModel<Event>(event);

      await this.db.collection('events').insertOne(eventData);
    } catch (error) {
      console.error('Error saving eventData data:', error);
    }
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  async updateUserPropertyToDatabase(
    user: UserForm,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    propertiesToUpdate: Record<string, any>
  ) {
    try {
      await this.db
        .collection('users')
        .updateOne(
          { userId: user.userId },
          { $set: propertiesToUpdate },
          { upsert: true }
        );
    } catch (error) {
      console.error('Error updating user property: ', error);
    }
  }
  async getUserFormDataFromDatabase(userId: number) {
    try {
      if (!this.isConnectionOpened) {
        await this.client.connect();
        console.log('connection opened');
      }
      const userForm = await this.db.collection('users').findOne({ userId });
      return userForm;
    } catch (error) {
      console.error('Error getting userForm data from db', error);
    }
  }
  async registerUserLastActivity(userId: number) {
    await this.db.collection('users').updateOne(
      { userId },
      {
        $set: {
          lastActive: new Date().toLocaleString(),
        },
      }
    );
  }
  async getEventsFromDatabase(
    userId: number,
    userGender: string,
    userLocation: string,
    userAge: number
  ) {
    try {
      const regex = new RegExp(userLocation, 'i');
      const events = await this.db
        .collection('events')
        .find({
          userId: { $ne: userId },
          location: { $regex: regex },
          lookingFor: { $in: [userGender, 'both'] },
          lookingForMinAge: { $lte: userAge },
          lookingForMaxAge: { $gte: userAge },
        })
        .toArray();
      return events;
    } catch (error) {
      console.error('Error getting events data from db', error);
    }
  }

  async getBotEventsListFromDatabase(location: string) {
    try {
      const regex = new RegExp(location, 'i');
      const events = await this.db
        .collection('bot_events')
        .find({ location: { $regex: regex } })
        .toArray();
      return events;
    } catch (error) {
      console.error('Error getting events data from db', error);
    }
  }

  async loadProfilesWithoutLocationSpecified(ctx: MySceneContext) {
    const viewQuery = [
      {
        $match: {
          viewerUserId: ctx.session.userForm.userId,
        },
      },
      {
        $group: {
          _id: null,
          viewedUserIds: { $addToSet: '$viewedUserId' },
        },
      },
    ];
    const aggregationResult = await this.db
      .collection('viewed_profiles')
      .aggregate(viewQuery)
      .toArray();
    let distinctViewedUserIds = [];
    if (aggregationResult.length > 0) {
      distinctViewedUserIds = aggregationResult[0].viewedUserIds;
    }
    const noLocationPipeline = [
      {
        $match: {
          $and: [
            {
              userId: { $ne: ctx.session.userForm.userId },
              gender:
                ctx.session.userForm.lookingFor === 'both'
                  ? { $in: ['male', 'female'] }
                  : ctx.session.userForm.lookingFor,
              lookingFor: { $in: [ctx.session.userForm.gender, 'both'] },
              isActive: true,
              isIncognito: false,
            },
            {
              userId: { $nin: distinctViewedUserIds },
            },
            {
              $expr: {
                $and: [
                  {
                    $gte: ['$age', ctx.session.userForm.lookingForMinAge],
                  },
                  {
                    $lte: ['$age', ctx.session.userForm.lookingForMaxAge],
                  },
                  // {
                  //   $lte: ['$lookingForMinAge', ctx.session.userForm.age],
                  // },
                  // {
                  //   $gte: ['$lookingForMaxAge', ctx.session.userForm.age], // CODE FOR AGE RANGE
                  // },
                ],
              },
            },
          ],
        },
      },
      {
        $addFields: {
          randomWeight: { $rand: {} },
        },
      },
      {
        $addFields: {
          isPremiumWeight: {
            $cond: {
              if: { $eq: ['$isPremium', true] },
              then: { $add: ['$randomWeight', 0.5] },
              else: '$randomWeight',
            },
          },
        },
      },
      {
        $sort: { isPremiumWeight: -1 },
      },
    ];
    return (await this.db
      .collection('users')
      .aggregate(noLocationPipeline)
      .toArray()) as unknown as UserForm[];
  }

  async getUserEventsFromDatabase(userId: number) {
    try {
      const events = await this.db
        .collection('events')
        .find({
          userId: userId,
        })
        .toArray();
      return events;
    } catch (error) {
      console.error('Error getting events data from db', error);
    }
  }
  async getEventFromDatabase(userId: number, eventId: number) {
    try {
      const event = await this.db.collection('events').findOne({
        userId: userId,
        eventId: eventId,
      });
      return event;
    } catch (error) {
      console.error('Error getting events data from db', error);
    }
  }

  async getUserCityFromCoordinates(latitude: number, longitude: number) {
    const apiUrl = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&language=uk-UA&key=${this.API_KEY}`;
    try {
      const response = await axios.get(apiUrl);
      if (response.data.results.length > 0) {
        const addressComponents = response.data.results[0].address_components;
        const cityComponent = addressComponents.find(
          (component: { types: string | string[] }) =>
            component.types.includes('locality')
        );

        if (cityComponent) {
          const cityName = cityComponent.long_name;
          return cityName;
        }
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      console.error('Error fetching user city:', error.message);
    }
  }
  async sendUserDetails(
    userArrayFromDB: UserForm[],
    currentIndex: number,
    ctx: MySceneContext
  ) {
    const user = userArrayFromDB[currentIndex];
    if (user) {
      let caption =
        (user.isPremium && user.showPremiumLabel
          ? `‚≠êÔ∏è *Premium Crush*\n\n`
          : '') +
        `*–Ü–º'—è:* ${user.username}
*–í—ñ–∫:* ${user.age}
*–ú—ñ—Å—Ç–æ:* ${user.location}`;
      if (user.about?.type === 'text') {
        caption = caption + `\n*–ü—Ä–æ —Å–µ–±–µ:* ${user.about.content}`;
      }
      let coordsNull = false;
      if (
        ctx.session.userForm?.coordinates instanceof mongoose.Document &&
        ctx.session.userForm?.coordinates.toObject() === null
      ) {
        coordsNull = true;
      }
      if (
        user?.coordinates instanceof mongoose.Document &&
        user?.coordinates.toObject() === null
      ) {
        coordsNull = true;
      }
      try {
        if (
          ctx.session.userForm.coordinates &&
          user.coordinates &&
          !coordsNull
        ) {
          let unit = '–∫–º';
          let distance = this.calculateDistance(
            ctx.session.userForm.coordinates.latitude,
            ctx.session.userForm.coordinates.longitude,
            user.coordinates.latitude,
            user.coordinates.longitude
          );
          if (distance < 1) {
            distance = Math.round(distance * 10) * 100;
            unit = '–º';
          } else {
            distance = Math.round(distance);
          }
          caption = caption + `\n*${distance}${unit}* –≤—ñ–¥ –≤–∞—Å`;
        }
      } catch (error) {
        console.error('Error while calc distance: ', error);
      }
      if (ctx.session.userForm.isPremium) {
        caption =
          caption +
          (!user.isPremium || (user.isPremium && user.showLikesCount)
            ? `\n\n*‚ù§Ô∏è ‚Äî ${user.likesCount ?? 0}*`
            : '');
      }
      if (user.socialLinks && user.socialLinks.length > 0) {
        let message = '';
        for (const link of user.socialLinks) {
          message = message ? message + ' | ' : message + '';
          message = message + link;
        }
        caption = caption + '\n\n' + message;
      }
      const mediaGroup: MediaGroup = user.mediaIds.map(
        (mediaObj: { type: string; id: string }, index: number) => ({
          type: mediaObj.type as 'document',
          media: mediaObj.id,
          caption: index === 0 ? caption : undefined,
          parse_mode: index === 0 ? 'Markdown' : undefined,
        })
      );
      await ctx.replyWithMediaGroup(mediaGroup);
      if (user.about?.type === 'voice') {
        await ctx.replyWithVoice(user.about.content, {
          caption: '*–ü—Ä–æ —Å–µ–±–µ:*',
          parse_mode: 'Markdown',
        });
      }
      return false;
    } else {
      return true;
    }
  }

  showUserProfile(
    userForm: UserForm,
    currentUser: UserForm,
    likeMessage?: { type: string; content: string }
  ): MediaGroup {
    let caption =
      (userForm.isPremium && userForm.showPremiumLabel
        ? `‚≠êÔ∏è *Premium Crush*\n\n`
        : '') +
      `*–Ü–º'—è:* ${userForm.username}
*–í—ñ–∫:* ${userForm.age}
*–ú—ñ—Å—Ç–æ:* ${userForm.location}`;
    if (userForm.about?.type === 'text') {
      caption = caption + `\n*–ü—Ä–æ —Å–µ–±–µ:* ${userForm.about.content}`;
    }
    let coordsNull = false;
    if (
      currentUser?.coordinates instanceof mongoose.Document &&
      currentUser?.coordinates.toObject() === null
    ) {
      coordsNull = true;
    }
    if (
      userForm?.coordinates instanceof mongoose.Document &&
      userForm?.coordinates.toObject() === null
    ) {
      coordsNull = true;
    }
    try {
      if (currentUser.coordinates && userForm.coordinates && !coordsNull) {
        let unit = '–∫–º';
        let distance = this.calculateDistance(
          currentUser.coordinates.latitude,
          currentUser.coordinates.longitude,
          userForm.coordinates.latitude,
          userForm.coordinates.longitude
        );
        if (distance < 1) {
          distance = Math.round(distance * 10) * 100;
          unit = '–º';
        } else {
          distance = Math.round(distance);
        }
        caption = caption + `\n*${distance}${unit}* –≤—ñ–¥ –≤–∞—Å`;
      }
    } catch (error) {
      console.error('Error while calc distance: ', error);
    }
    if (currentUser.isPremium) {
      caption =
        caption +
        (!userForm.isPremium || (userForm.isPremium && userForm.showLikesCount)
          ? `\n\n*‚ù§Ô∏è ‚Äî ${userForm.likesCount ?? 0}*`
          : '');
    }
    if (likeMessage && likeMessage.type === 'text') {
      caption =
        caption +
        '\n' +
        '*üíå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: *' +
        likeMessage.content;
    }
    if (userForm.socialLinks && userForm.socialLinks.length > 0) {
      let message = '';
      for (const link of userForm.socialLinks) {
        message = message ? message + ' | ' : message + '';
        message = message + link;
      }
      caption = caption + '\n\n' + message;
    }
    const mediaGroup: MediaGroup = userForm.mediaIds.map(
      (mediaObj: { type: string; id: string }, index: number) => ({
        type: mediaObj.type as 'document',
        media: mediaObj.id,
        caption: index === 0 ? caption : undefined,
        parse_mode: index === 0 ? 'Markdown' : undefined,
      })
    );
    return mediaGroup;
  }
  async showEvent(events: Event[], currentIndex: number, ctx: MySceneContext) {
    const event = events[currentIndex];
    if (event) {
      const eventInitiatorId = event.userId.toString();
      const message = `*–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó:* ${event.eventName.replace(
        /([_*[\]()~`>#+=|{}.!-])/g,
        '\\$1'
      )}\n*–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø–æ–¥—ñ—ó:* ${event.date.replace(
        /([_*[\]()~`>#+=|{}.!-])/g,
        '\\$1'
      )}\n*–ú—ñ—Å—Ç–æ:* ${event.location?.replace(
        /([_*[\]()~`>#+=|{}.!-])/g,
        '\\$1'
      )}`;
      const inlineKeyboardMarkup = Markup.inlineKeyboard([
        Markup.button.callback(
          '‚úÖ –•–æ—á—É –ø—ñ—Ç–∏',
          `inviteToEvent:${eventInitiatorId}:${event.eventId}`
        ),
        Markup.button.callback('‚ùå –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–æ–¥—ñ—è', `nextEvent`),
      ]);

      if (event.about) {
        await ctx.replyWithMarkdownV2(
          `${message}\n*–î–µ—Ç–∞–ª—ñ:* ${event.about.replace(
            /([_*[\]()~`>#+=|{}.!-])/g,
            '\\$1'
          )}`,
          inlineKeyboardMarkup
        );
      } else {
        await ctx.replyWithMarkdownV2(message, inlineKeyboardMarkup);
      }
    } else {
      await ctx.reply(
        '–ü–æ–¥—ñ–π, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∏, –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î, –º–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É',
        Markup.removeKeyboard()
      );
    }
  }

  async showBotEvent(
    events: Event[],
    currentIndex: number,
    ctx: MySceneContext
  ) {
    const event = events[currentIndex];
    if (event) {
      let caption = `*–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó:* ${event.eventName}\n*–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø–æ–¥—ñ—ó:* ${event.date}\n*–ú—ñ—Å—Ç–æ:* ${event.location}`;
      if (event.about) {
        caption = `${caption}\n*–î–µ—Ç–∞–ª—ñ: * ${event.about}`;
      }
      if (event.mediaIds && event.mediaIds.length > 0) {
        const mediaGroup: MediaGroup = event.mediaIds.map(
          (mediaObj: { type: string; id: string }, index: number) => ({
            type: mediaObj.type as 'document',
            media: mediaObj.id,
            caption: index === 0 ? caption : undefined,
            parse_mode: index === 0 ? 'Markdown' : undefined,
          })
        );
        await ctx.telegram.sendMediaGroup(ctx.from!.id, mediaGroup);
        return;
      }
      await ctx.reply(caption, {
        parse_mode: 'Markdown',
      });
      return;
    } else {
      await ctx.reply(
        `–°—Ö–æ–∂–µ —Ü–µ –≤—Å–µ, –ø–æ–¥—ñ–π, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∏, –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î, –º–æ–∂–µ—à –∑–∞—á–µ–∫–∞—Ç–∏ –¥–æ–∫–∏ –∑'—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ñ`,
        Markup.removeKeyboard()
      );
    }
  }

  async showUserEvent(
    events: Event[],
    currentIndex: number,
    ctx: MySceneContext
  ) {
    const event = events[currentIndex];
    if (event) {
      const message = `*–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó:* ${event.eventName.replace(
        /([_*[\]()~`>#+=|{}.!-])/g,
        '\\$1'
      )}\n*–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø–æ–¥—ñ—ó:* ${event.date.replace(
        /([_*[\]()~`>#+=|{}.!-])/g,
        '\\$1'
      )}\n*–ú—ñ—Å—Ç–æ:* ${event.location.replace(
        /([_*[\]()~`>#+=|{}.!-])/g,
        '\\$1'
      )}`;
      const inlineKeyboardMarkup = Markup.inlineKeyboard([
        Markup.button.callback(
          '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥—ñ—é',
          `deleteEvent:${event.userId}`
        ),
      ]);

      if (event.about) {
        await ctx.replyWithMarkdownV2(
          `${message}\n*–î–µ—Ç–∞–ª—ñ:* ${event.about}`,
          inlineKeyboardMarkup
        );
      } else {
        await ctx.replyWithMarkdownV2(message, inlineKeyboardMarkup);
      }
    } else {
      await ctx.reply(
        '–ü–æ–¥—ñ–π –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î, –º–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É',
        Markup.removeKeyboard()
      );
    }
  }

  formatTimeUnits(value: number, unit: string) {
    function formatUnit(unit: string, number: number) {
      const units: {
        –≥–æ–¥–∏–Ω–∞: string[];
        –¥–µ–Ω—å: string[];
        —Ö–≤–∏–ª–∏–Ω–∞: string[];
      } = {
        –≥–æ–¥–∏–Ω–∞: ['–≥–æ–¥–∏–Ω—É', '–≥–æ–¥–∏–Ω–∏', '–≥–æ–¥–∏–Ω'],
        –¥–µ–Ω—å: ['–¥–µ–Ω—å', '–¥–Ω—ñ', '–¥–Ω—ñ–≤'],
        —Ö–≤–∏–ª–∏–Ω–∞: ['—Ö–≤–∏–ª–∏–Ω—É', '—Ö–≤–∏–ª–∏–Ω–∏', '—Ö–≤–∏–ª–∏–Ω'],
      };

      let unitIndex;

      if (number % 10 === 1 && number % 100 !== 11) {
        unitIndex = 0;
      } else if (
        number % 10 >= 2 &&
        number % 10 <= 4 &&
        (number % 100 < 10 || number % 100 >= 20)
      ) {
        unitIndex = 1;
      } else {
        unitIndex = 2;
      }

      return units[unit as keyof typeof units][unitIndex];
    }

    const formattedUnit = formatUnit(unit, value);
    return `${value} ${formattedUnit}`;
  }

  calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number) {
    const radLat1 = (Math.PI * lat1) / 180;
    const radLon1 = (Math.PI * lon1) / 180;
    const radLat2 = (Math.PI * lat2) / 180;
    const radLon2 = (Math.PI * lon2) / 180;

    const earthRadius = 6371;

    const dLat = radLat2 - radLat1;
    const dLon = radLon2 - radLon1;
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(radLat1) *
        Math.cos(radLat2) *
        Math.sin(dLon / 2) *
        Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = earthRadius * c;

    return distance;
  }

  generateReferralToken(userId: number) {
    const secret = this.configService.get('REFERRAL_TOKEN_SECRET_KEY');
    const hash = crypto
      .createHmac('sha256', secret)
      .update(userId.toString())
      .digest('hex');
    const originalToken = Buffer.from(hash, 'hex').slice(0, 16);
    const truncatedToken = originalToken.slice(0, 8);
    const base64Token = truncatedToken.toString('base64');
    const computedToken = base64Token.replace(/=/g, 'X');
    return computedToken;
  }
}
