import { Markup, Scenes } from 'telegraf';
import { MySceneContext } from '../models/context.interface';
import { UserForm } from '../models/userForm.interface';
import { UserFormModel } from '../models/userForm.schema';
import { MongoClient } from 'mongodb';
import axios from 'axios';
import { IConfigService } from '../models/config.interface';
import { Event } from '../models/event.interface';
import { EventModel } from '../models/event.schema';
import Fuse from 'fuse.js';
import fs from 'fs';
import crypto from 'crypto';
import cron from 'node-cron';
import { InputMediaPhoto } from 'telegraf/typings/core/types/typegram';

const MAX_LIKES_LIMIT = 2;

export class SceneGenerator {
  constructor(
    private readonly client: MongoClient,
    private configService: IConfigService
  ) {
    cron.schedule('*/59 * * * *', async () => {
      // every minute check
      const currentDate = new Date();
      const inactiveThreshold = 5 * 60 * 1000; // 5 minutes
      await client.connect();
      const db = client.db('cluster0');
      const users = await db.collection('users').find().toArray();

      for (const user of users) {
        const lastActiveTimestamp = new Date(user.lastActive).getTime();
        const inactiveDuration = currentDate.getTime() - lastActiveTimestamp;

        if (inactiveDuration >= inactiveThreshold) {
          axios.post(
            `https://api.telegram.org/bot${this.configService.get(
              'TOKEN'
            )}/sendMessage`,
            {
              chat_id: user.userId,
              text: '–¢–µ–±–µ –¥–∞–≤–Ω–æ –Ω–µ –±—É–ª–æ —Ç—É—Ç',
            }
          );
        }
      }
      const usersToResetLikes = await db
        .collection('users')
        .find({
          isPremium: false,
          likesSentCount: { $gt: 0 },
        })
        .toArray();
      for (const user of usersToResetLikes) {
        await db
          .collection('users')
          .updateOne({ userId: user.userId }, { $set: { likesSentCount: 0 } });
        if (this.userForm.userId === user.userId) {
          this.userForm.likesSentCount = 0;
        }
      }
      const usersToCheck = await db
        .collection('users')
        .find({
          isPremium: true,
          premiumEndTime: { $lte: currentDate },
        })
        .toArray();
      for (const user of usersToCheck) {
        axios.post(
          `https://api.telegram.org/bot${this.configService.get(
            'TOKEN'
          )}/sendMessage`,
          {
            chat_id: user.userId,
            text: '–ü—Ä–µ–º—ñ—É–º –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è',
          }
        );
        await db.collection('users').updateOne(
          { userId: user.userId },
          {
            $set: {
              isPremium: false,
              premiumEndTime: null,
            },
          }
        );
      }
    });
  }
  API_KEY = this.configService.get('API_KEY');
  userForm = new UserFormModel({
    userId: NaN,
    username: '',
    gender: 'male',
    lookingFor: 'both',
    age: NaN,
    about: '',
    actualLocation: {
      longitude: NaN,
      latitude: NaN,
    },
    location: '',
    photoIds: [],
    likesSentCount: 0,
    isActive: true,
    isPremium: false,
    premiumEndTime: null,
    lastActive: new Date().toLocaleString(),
  });
  event: Event = {
    userId: NaN,
    eventId: NaN,
    eventName: '',
    date: '',
    about: undefined,
    lookingFor: '',
    //ageRange: '',
  };

  greetingScene(): Scenes.BaseScene<MySceneContext> {
    const greeting = new Scenes.BaseScene<MySceneContext>('greeting');
    greeting.enter(async (ctx) => {
      const user = await this.getUserFormDataFromDatabase(ctx.from!.id);
      if (!user) {
        await ctx.reply(
          '‚¨áÔ∏è‚Å£',
          Markup.keyboard([['–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']]).resize()
        );
      } else {
        await ctx.reply('‚¨áÔ∏è‚Å£', Markup.removeKeyboard());
        await this.registerUserLastActivity(user.userId);
      }
    });
    greeting.command('moderate', async (ctx) => {
      await ctx.scene.enter('moderate');
    });
    greeting.hears('–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å', async (ctx) => {
      await ctx.scene.enter('name');
    });
    greeting.hears('üçæ –ü–æ–¥—ñ—ó', async (ctx) => {
      await ctx.scene.enter('eventList');
    });
    this.addCommands(greeting);
    greeting.on('message', async (ctx) => {
      await ctx.reply('‚¨áÔ∏è –û–±–∏—Ä–∞–π –¥—ñ—ó –≤ –º–µ–Ω—é');
    });
    return greeting;
  }

  nameScene(): Scenes.BaseScene<MySceneContext> {
    const name = new Scenes.BaseScene<MySceneContext>('name');
    name.enter(async (ctx) => {
      await ctx.reply('–Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?', Markup.removeKeyboard());
    });
    this.addCommands(name);
    name.on('text', async (ctx) => {
      this.userForm.userId = ctx.message.from.id;
      this.userForm.username = ctx.message.text;
      if (this.userForm.username) {
        await ctx.scene.enter('age');
      }
    });
    name.on('message', async (ctx) => {
      await ctx.reply("–î–∞–≤–∞–π –∫—Ä–∞—â–µ —ñ–º'—è");
      ctx.scene.reenter();
    });

    return name;
  }
  ageScene(): Scenes.BaseScene<MySceneContext> {
    const age = new Scenes.BaseScene<MySceneContext>('age');
    age.enter(async (ctx) => {
      await ctx.reply('–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?');
    });
    this.addCommands(age);
    age.on('text', async (ctx) => {
      this.userForm.age = Number(ctx.message.text);
      if (this.userForm.age && this.userForm.age > 0) {
        await ctx.scene.enter('location');
      } else if (!this.userForm.age) {
        await ctx.reply('–í–∫–∞–∂–∏ –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏');
      } else if (this.userForm.age <= 0) {
        await ctx.reply('–í—ñ–∫ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0');
      }
    });
    age.on('message', async (ctx) => {
      ctx.reply('–î–∞–≤–∞–π –∫—Ä–∞—â–µ –≤—ñ–∫');
    });
    return age;
  }
  genderScene(): Scenes.BaseScene<MySceneContext> {
    const gender = new Scenes.BaseScene<MySceneContext>('gender');
    gender.enter(async (ctx) => {
      await ctx.reply(
        '–î–∞–≤–∞–π —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –Ø–∫–æ—ó —Ç–∏ —Å—Ç–∞—Ç—ñ?',
        Markup.keyboard([['–•–ª–æ–ø–µ—Ü—å', '–î—ñ–≤—á–∏–Ω–∞']]).resize()
      );
    });
    this.addCommands(gender);
    gender.hears('–•–ª–æ–ø–µ—Ü—å', async (ctx) => {
      this.userForm.gender = 'male';
      await ctx.scene.enter('lookingFor');
    });
    gender.hears('–î—ñ–≤—á–∏–Ω–∞', async (ctx) => {
      this.userForm.gender = 'female';
      await ctx.scene.enter('lookingFor');
    });
    gender.on('message', async (ctx) => {
      await ctx.reply(
        '–ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ —Å—Ç–∞—Ç—å',
        Markup.keyboard([['–•–ª–æ–ø–µ—Ü—å', '–î—ñ–≤—á–∏–Ω–∞']]).resize()
      );
    });
    return gender;
  }
  lookingForScene(): Scenes.BaseScene<MySceneContext> {
    const lookingFor = new Scenes.BaseScene<MySceneContext>('lookingFor');
    lookingFor.enter(async (ctx) => {
      await ctx.reply(
        '–ö–æ–≥–æ —à—É–∫–∞—î—à?',
        Markup.keyboard([['–•–ª–æ–ø—Ü—ñ', '–î—ñ–≤—á–∞—Ç–∞', '–ù–µ–≤–∞–∂–ª–∏–≤–æ']]).resize()
      );
    });
    this.addCommands(lookingFor);
    lookingFor.hears('–•–ª–æ–ø—Ü—ñ', async (ctx) => {
      this.userForm.lookingFor = 'male';
      await ctx.scene.enter('name');
    });
    lookingFor.hears('–î—ñ–≤—á–∞—Ç–∞', async (ctx) => {
      this.userForm.lookingFor = 'female';
      await ctx.scene.enter('name');
    });
    lookingFor.hears('–ù–µ–≤–∞–∂–ª–∏–≤–æ', async (ctx) => {
      this.userForm.lookingFor = 'both';
      await ctx.scene.enter('name');
    });
    lookingFor.on('message', async (ctx) => {
      await ctx.reply('–û–±–µ—Ä–∏ —Ö—Ç–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å');
    });
    return lookingFor;
  }
  AboutScene(): Scenes.BaseScene<MySceneContext> {
    const about = new Scenes.BaseScene<MySceneContext>('about');
    about.enter(async (ctx) => {
      await ctx.reply(
        '–ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª—ñ–≤ –ø—Ä–æ —Å–µ–±–µ: —â–æ –ø–æ–ª—é–±–ª—è—î—à, –∫–æ–≥–æ —à—É–∫–∞—î—à',
        Markup.keyboard(['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']).resize()
      );
    });
    this.addCommands(about);
    about.hears('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    about.on('text', async (ctx) => {
      const userAbout = ctx.message.text;
      if (userAbout.length > 140) {
        await ctx.reply('–ó–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑—Ä–æ–±–∏ —Ç—Ä–æ—Ö–∏ –º–µ–Ω—à–∏–º');
      } else {
        this.userForm.about = userAbout;
        ctx.scene.enter('photo');
      }
    });
    about.on('message', async (ctx) => {
      await ctx.reply('–ë—É–¥—å-–ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à–∏ –ø—Ä–æ —Å–µ–±–µ');
    });
    return about;
  }
  locationScene(): Scenes.BaseScene<MySceneContext> {
    const location = new Scenes.BaseScene<MySceneContext>('location');
    location.enter(async (ctx) => {
      await ctx.reply(
        '–ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞?',
        Markup.keyboard([
          Markup.button.locationRequest('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è'),
        ]).resize()
      );
    });
    this.addCommands(location);
    location.on('location', async (ctx) => {
      try {
        const { latitude, longitude } = ctx.message.location;
        const userLocationName = await this.getUserCityFromCoordinates(
          latitude,
          longitude
        );
        this.userForm.actualLocation = userLocationName.toLowerCase();
        this.userForm.location = userLocationName;
        await ctx.scene.enter('about');
      } catch (error) {
        ctx.reply('–£–ø—Å... –í—ñ–¥–±—É–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞');
      }
    });
    location.on('text', async (ctx) => {
      const rawData = fs.readFileSync('./UA.json', 'utf8');
      const dataArray = JSON.parse(rawData);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const cityNamesArray: any[] = [];

      dataArray.forEach(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (entry: { type: string; public_name: string; name: any }) => {
          const type = entry.type.toLowerCase();
          const isState = type === 'state';
          const nameToUse = isState ? entry.public_name : entry.name;

          if (['city', 'urban', 'settlement', 'state'].includes(type)) {
            let variations = [
              nameToUse.en.toLowerCase(),
              nameToUse.ru.toLowerCase(),
              nameToUse.uk.toLowerCase(),
            ];
            let original = nameToUse.uk;
            if (isState) {
              original = nameToUse.uk.replace(/ –æ–±–ª\.$/, ' –æ–±–ª–∞—Å—Ç—å');
              variations = variations.map((variation) =>
                variation.replace(/ –æ–±–ª\.$/, ' –æ–±–ª–∞—Å—Ç—å')
              );
            }
            cityNamesArray.push({ variations, original, type });
          }
        }
      );
      let userInput = ctx.message.text;
      const isInputEnglish = /[a-zA-Z]/.test(userInput);
      if (isInputEnglish) {
        userInput = userInput
          .trim()
          .toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '');
      } else {
        userInput = userInput.trim().toLowerCase();
      }

      const options = {
        includeScore: true,
        keys: ['variations'],
        threshold: 0.2,
      };
      const priorityOrder = ['city', 'urban', 'state', 'settlement'];
      const matchingCities = [];
      for (const type of priorityOrder) {
        const citiesOfType = cityNamesArray.filter(
          (item) => item.type === type
        );
        const fuse = new Fuse(citiesOfType, options);
        const bestMatches = fuse.search(userInput);
        const matchingOfType = bestMatches.filter((match) =>
          priorityOrder.includes(match.item.type)
        );
        if (matchingOfType.length > 0) {
          matchingCities.push(matchingOfType[0]);
        }
      }

      if (matchingCities.length > 0) {
        this.userForm.actualLocation =
          matchingCities[0].item.original.toLowerCase();
        this.userForm.location = ctx.message.text;
        await ctx.scene.enter('about');
      } else {
        this.userForm.location = ctx.message.text;
        this.userForm.actualLocation = ctx.message.text.toLowerCase();
        await ctx.scene.enter('about');
      }
    });
    location.on('message', async (ctx) => {
      await ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ –º—ñ—Å—Ç–∞ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è');
    });

    return location;
    // function mapLatinToCyrillic(character: string, nextCharacter?: string): string {
    //   const lowercaseCharacter = character.toLowerCase()
    //   const latinToCyrillicMap: { [key: string]: string } = {
    //     a: '–∞',
    //     b: '–±',
    //     c: '—Ü',
    //     d: '–¥',
    //     e: '–µ',
    //     f: '—Ñ',
    //     g: '–≥',
    //     h: '—Ö',
    //     i: '–∏',
    //     j: '–π',
    //     k: '–∫',
    //     l: '–ª',
    //     m: '–º',
    //     n: '–Ω',
    //     o: '–æ',
    //     p: '–ø',
    //     q: '–∫',
    //     r: '—Ä',
    //     s: '—Å',
    //     t: '—Ç',
    //     u: '—É',
    //     v: '–≤',
    //     w: '–≤',
    //     x: '–∫—Å',
    //     y: '–∏',
    //     z: '–∑',
    //     —å: nextCharacter && /[–∞–µ–∏–æ—É—è—é]/.test(nextCharacter) ? '' : '—å',
    //   };
    //   return latinToCyrillicMap[lowercaseCharacter] || character;
    // }
  }
  private maxPhotoCount: number = 1;
  private isUploaded = false;
  photoScene(): Scenes.BaseScene<MySceneContext> {
    const photo = new Scenes.BaseScene<MySceneContext>('photo');
    photo.enter(async (ctx) => {
      this.maxPhotoCount = this.userForm.isPremium ? 3 : 1;
      this.userForm.photoIds = [];
      this.isUploaded = false;
      const photoPrompt = this.userForm.isPremium
        ? '–û–±–µ—Ä–∏ —Å–≤–æ—ó –Ω–∞–π–∫—Ä–∞—â—ñ —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º 3), —è–∫—ñ –±—É–¥—É—Ç—å –±–∞—á–∏—Ç–∏ —ñ–Ω—à—ñ'
        : '–û–±–µ—Ä–∏ —Å–≤–æ—î –Ω–∞–π–∫—Ä–∞—â–µ —Ñ–æ—Ç–æ, —è–∫–µ –±—É–¥—É—Ç—å –±–∞—á–∏—Ç–∏ —ñ–Ω—à—ñ';
      await ctx.reply(photoPrompt, Markup.removeKeyboard());
    });
    this.addCommands(photo);
    photo.on('photo', async (ctx) => {
      const photos = ctx.message.photo;
      photos.sort((a, b) => {
        const resolutionA = a.width * a.height;
        const resolutionB = b.width * b.height;
        return resolutionB - resolutionA;
      });
      if (this.userForm.photoIds.length < this.maxPhotoCount) {
        this.userForm.photoIds.push(photos[0].file_id);
      }
      if (this.userForm.photoIds.length < this.maxPhotoCount) {
        await ctx.reply(
          `–¢–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ ${this.userForm.photoIds.length} –∑ ${this.maxPhotoCount} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ–æ—Ç–æ. –ú–æ–∂–µ—à –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ—Ç–æ –∞–±–æ –¥–æ–¥–∞—Ç–∏ —â–µ`,
          Markup.keyboard([['–¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ—Ç–æ']])
            .oneTime()
            .resize()
        );
      } else if (
        this.userForm.photoIds.length === this.maxPhotoCount &&
        !this.isUploaded
      ) {
        this.isUploaded = true;
        await this.saveUserFormToDatabase(this.userForm);
        await ctx.scene.enter('userform');
      }
    });
    photo.hears('–¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ—Ç–æ', async (ctx) => {
      this.isUploaded = true;
      await this.saveUserFormToDatabase(this.userForm);
      await ctx.scene.enter('userform');
    });
    photo.hears('üë´ –ó–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫', async (ctx) => {
      await ctx.scene.enter('lookForMatch');
    });
    photo.hears('üçæ –ü–æ–¥—ñ—ó', async (ctx) => {
      await ctx.scene.enter('eventList');
    });
    photo.on('text', async (ctx) => {
      await ctx.reply(
        '–ó–∞–≤–∞–Ω—Ç–∞–∂, –±—É–¥—å-–ª–∞—Å–∫–∞, —Å–≤–æ—î —Ñ–æ—Ç–æ',
        Markup.removeKeyboard()
      );
    });
    photo.on('message', async (ctx) => {
      await ctx.reply(
        '–ó–∞–≤–∞–Ω—Ç–∞–∂, –±—É–¥—å-–ª–∞—Å–∫–∞, —Å–≤–æ—î —Ñ–æ—Ç–æ',
        Markup.removeKeyboard()
      );
    });
    return photo;
  }
  userFormScene(): Scenes.BaseScene<MySceneContext> {
    const userFormScene = new Scenes.BaseScene<MySceneContext>('userform');
    userFormScene.enter(async (ctx) => {
      const userId = ctx.from?.id;
      if (userId) {
        const userForm = await this.getUserFormDataFromDatabase(userId);
        if (userForm) {
          Object.assign(this.userForm, userForm);
          await this.registerUserLastActivity(userForm.userId);
          let caption = '';
          caption = `–¢–∞–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:
*–Ü–º'—è:* ${userForm.username}
*–í—ñ–∫:* ${userForm.age}
*–ú—ñ—Å—Ç–æ:* ${userForm.location}`;
          if (userForm.about) {
            caption = caption + `\n\n*–ü—Ä–æ —Å–µ–±–µ:* ${userForm.about}`;
          }
          const mediaGroup: InputMediaPhoto[] = this.userForm.photoIds.map(
            (photoId, index) => ({
              type: 'photo',
              media: photoId,
              caption: index === 0 ? caption : undefined,
              parse_mode: index === 0 ? 'Markdown' : undefined,
            })
          );
          await ctx.replyWithMediaGroup(mediaGroup);
          await ctx.reply(
            `‚úçüèª ‚Äî –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å
üÜï ‚Äî –î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é
üéü ‚Äî –ú–æ—ó –ø–æ–¥—ñ—ó
üóÑ ‚Äî –ê—Ä—Ö—ñ–≤ –ª–∞–π–∫—ñ–≤
‚ùå ‚Äî –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å`,
            Markup.keyboard([['‚úçüèª', 'üÜï', 'üéü', 'üóÑ', '‚ùå']])
              .oneTime()
              .resize()
          );
          userFormScene.hears('‚úçüèª', async (ctx) => {
            await ctx.scene.enter('userformEdit');
          });
          userFormScene.hears('üÜï', async (ctx) => {
            await ctx.scene.enter('eventName');
          });
          userFormScene.hears('üéü', async (ctx) => {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            let events: any;
            let currentEventIndex = 0;
            const userForm = await this.getUserFormDataFromDatabase(
              ctx.from!.id
            );
            if (userForm) {
              events = await this.getUserEventsFromDatabase(userForm.userId);
              this.userForm.userId = ctx.from!.id;
              if (events && events.length > 0) {
                await ctx.reply(`–û—Å—å —Ç–≤–æ—ó –ø–æ–¥—ñ—ó üëáüèª `, Markup.removeKeyboard());
                // eslint-disable-next-line no-empty-pattern
                for (let {} of events) {
                  await this.showUserEvent(events, currentEventIndex, ctx);
                  currentEventIndex++;
                }
              } else {
                await ctx.reply(
                  '–ë—ñ–ª—å—à–µ –ø–æ–¥—ñ–π –Ω–µ–º–∞—î, –º–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É',
                  Markup.removeKeyboard()
                );
              }
            } else {
              await ctx.reply(
                '–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–¥—ñ—ó —Å—Ç–≤–æ—Ä–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å',
                Markup.removeKeyboard()
              );
              await ctx.scene.enter('greeting');
            }
            const regex = new RegExp(/^deleteEvent:(.*)$/);
            userFormScene.action(regex, async (ctx) => {
              const userId = +ctx.match[1];
              await this.client.connect();
              const db = this.client.db('cluster0');
              await db.collection('events').deleteOne({ userId: userId });
              await ctx.deleteMessage();
            });
          });
          userFormScene.hears('üóÑ', async (ctx) => {
            await ctx.scene.enter('likeArchive');
          });
          userFormScene.hears('‚ùå', async (ctx) => {
            await ctx.reply(
              `–ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.
            
–ê–Ω–∫–µ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è, —è–∫—â–æ –≤–∏ –∑–Ω–æ–≤—É —Ä–æ–∑–ø–æ—á–Ω–µ—Ç–µ –ø–æ—à—É–∫ üë•
            
–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–±—Ä–∞—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∑ –ø–æ—à—É–∫—É?`,
              Markup.keyboard([
                ['‚úÖ –¢–∞–∫, –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑ –ø–æ—à—É–∫—É', '‚ùå –ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥'],
              ]).resize()
            );
          });
          userFormScene.hears('‚úÖ –¢–∞–∫, –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑ –ø–æ—à—É–∫—É', async (ctx) => {
            await this.client.connect();
            const db = this.client.db('cluster0');
            await db
              .collection('users')
              .updateOne(
                { userId: ctx.from.id },
                { $set: { isActive: false } }
              );
            await ctx.reply(
              '–î—è–∫—É—î–º–æ –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º. –°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—å, —â–æ –≤–∏ —á—É–¥–æ–≤–æ –ø—Ä–æ–≤–µ–ª–∏ —á–∞c üñ§',
              Markup.removeKeyboard()
            );
          });
          userFormScene.hears('‚ùå –ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥', async (ctx) => {
            await ctx.reply(
              `‚úçüèª ‚Äî –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å
  üÜï ‚Äî –î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é
  üéü ‚Äî –ú–æ—ó –ø–æ–¥—ñ—ó
  üóÑ ‚Äî –ê—Ä—Ö—ñ–≤ –ª–∞–π–∫—ñ–≤
  ‚ùå ‚Äî –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å`,
              Markup.keyboard([['‚úçüèª', 'üÜï', 'üéü', 'üóÑ', '‚ùå']])
                .oneTime()
                .resize()
            );
          });
          userFormScene.on('message', async (ctx) => {
            await ctx.reply(
              `‚úçüèª ‚Äî –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å
  üÜï ‚Äî –î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é
  üéü ‚Äî –ú–æ—ó –ø–æ–¥—ñ—ó
  üóÑ ‚Äî –ê—Ä—Ö—ñ–≤ –ª–∞–π–∫—ñ–≤
  ‚ùå ‚Äî –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å`,
              Markup.keyboard([['‚úçüèª', 'üÜï', 'üéü', 'üóÑ', '‚ùå']])
                .oneTime()
                .resize()
            );
          });
        } else {
          await ctx.reply('–í —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –ø—Ä–æ—Ñ—ñ–ª—é');
          await ctx.scene.enter('greeting');
        }
      }
    });
    this.addCommands(userFormScene);
    return userFormScene;
  }
  userFormEditScene(): Scenes.BaseScene<MySceneContext> {
    const userFormEditScene = new Scenes.BaseScene<MySceneContext>(
      'userformEdit'
    );
    userFormEditScene.enter(async (ctx) => {
      await ctx.reply(
        `1. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ
2. –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ`,
        Markup.keyboard([['1', '2']])
          .resize()
          .oneTime()
      );
      userFormEditScene.hears('1', async (ctx) => {
        await ctx.scene.enter('gender');
      });
      userFormEditScene.hears('2', async (ctx) => {
        await ctx.scene.enter('photo');
      });
      userFormEditScene.on('message', async (ctx) => {
        await ctx.reply('üëáüèª', Markup.keyboard([['1', '2']]).resize());
      });
    });
    this.addCommands(userFormEditScene);
    return userFormEditScene;
  }
  eventMenuScene(): Scenes.BaseScene<MySceneContext> {
    const eventMenu = new Scenes.BaseScene<MySceneContext>('eventMenu');
    eventMenu.enter(async (ctx) => {
      ctx.reply(
        `–ß—É–¥–æ–≤–æ ) –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ 
–ø–µ—Ä–µ–ª—ñ–∫–æ–º –ø–æ–¥—ñ–π –∞–±–æ –¥–æ–¥–∞—Ç–∏ —Å–≤–æ—é`,
        Markup.inlineKeyboard([
          Markup.button.callback('–î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é', 'addEvent'),
          Markup.button.callback('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–æ—Å–æ–∫ –ø–æ–¥—ñ–π', 'viewEvent'),
        ])
      );
    });
    this.addCommands(eventMenu);
    eventMenu.action('addEvent', async (ctx) => {
      await ctx.scene.enter('eventName');
    });
    eventMenu.action('viewEvent', async (ctx) => {
      await ctx.scene.enter('eventList');
    });
    eventMenu.on('message', async (ctx) => {
      await ctx.reply('–î–æ–¥–∞–π –ø–æ–¥—ñ—é –∞–±–æ –æ–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É');
    });
    return eventMenu;
  }
  eventNameScene(): Scenes.BaseScene<MySceneContext> {
    const eventName = new Scenes.BaseScene<MySceneContext>('eventName');
    eventName.enter(async (ctx) => {
      this.event = {
        userId: NaN,
        eventId: NaN,
        eventName: '',
        date: '',
        about: undefined,
        lookingFor: '',
      };
      ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó', Markup.removeKeyboard());
    });
    this.addCommands(eventName);
    eventName.on('text', async (ctx) => {
      this.event.eventName = ctx.message.text;
      this.event.userId = ctx.message.from.id;
      await ctx.scene.enter('eventTime');
    });
    eventName.on('message', async (ctx) => {
      await ctx.reply('–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó');
    });
    return eventName;
  }
  eventTimeScene(): Scenes.BaseScene<MySceneContext> {
    const eventTime = new Scenes.BaseScene<MySceneContext>('eventTime');
    eventTime.enter(async (ctx) => {
      ctx.reply('–í–∫–∞–∂–∏ –¥–∞—Ç—É –ø–æ–¥—ñ—ó');
    });
    this.addCommands(eventTime);
    eventTime.on('text', async (ctx) => {
      this.event.date = ctx.message.text;
      await ctx.scene.enter('eventAbout');
    });
    eventTime.on('message', async (ctx) => {
      await ctx.reply('–í–∫–∞–∂–∏ –¥–∞—Ç—É –ø–æ–¥—ñ—ó');
    });

    return eventTime;
  }
  eventAboutScene(): Scenes.BaseScene<MySceneContext> {
    const eventAbout = new Scenes.BaseScene<MySceneContext>('eventAbout');
    eventAbout.enter(async (ctx) => {
      ctx.reply(
        '–£—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó/–ø–æ–¥—ñ—ó',
        Markup.keyboard(['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']).resize()
      );
    });
    this.addCommands(eventAbout);
    eventAbout.hears('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', async (ctx) => {
      this.event.about = undefined;
      await ctx.scene.enter('eventLookingFor');
    });
    eventAbout.on('text', async (ctx) => {
      this.event.about = ctx.message.text;
      await ctx.scene.enter('eventLookingFor');
    });
    eventAbout.on('message', async (ctx) => {
      await ctx.reply('–í–∫–∞–∂–∏ –¥–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó');
    });

    return eventAbout;
  }
  eventLookigForScene(): Scenes.BaseScene<MySceneContext> {
    const eventLookingFor = new Scenes.BaseScene<MySceneContext>(
      'eventLookingFor'
    );
    eventLookingFor.enter(async (ctx) => {
      await ctx.reply(
        '–ß—É–¥–æ–≤–æ! –ö–æ–≥–æ –±–∞–∂–∞—î—à –∑–∞–ø—Ä–æ—Å–∏—Ç–∏',
        Markup.keyboard([['–î—ñ–≤—á–∏–Ω—É', '–•–ª–æ–ø—Ü—è', '–ë—É–¥—å-–∫–æ–≥–æ']]).resize()
      );
    });
    this.addCommands(eventLookingFor);
    eventLookingFor.on('text', async (ctx) => {
      switch (ctx.message.text) {
        case '–î—ñ–≤—á–∏–Ω—É':
          this.event.lookingFor = 'female';
          break;
        case '–•–ª–æ–ø—Ü—è':
          this.event.lookingFor = 'male';
          break;
        case '–ë—É–¥—å-–∫–æ–≥–æ':
          this.event.lookingFor = 'both';
          break;
        default:
          await ctx.reply(
            '–û–±–µ—Ä–∏ –∫–æ–≥–æ –±–∞–∂–∞—î—à –∑–∞–ø—Ä–æ—Å–∏—Ç–∏',
            Markup.keyboard([['–î—ñ–≤—á–∏–Ω—É', '–•–ª–æ–ø—Ü—è', '–ë—É–¥—å-–∫–æ–≥–æ']]).resize()
          );
      }
      if (this.event.lookingFor) {
        await this.saveEventToDatabase(this.event);
        await ctx.reply(
          `–ë—ñ–Ω–≥–æ! –û—á—ñ–∫—É–π –Ω–∞ —Å–≤—ñ–π perfect match —Ç–∞ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–π —á–∞—Å `,
          Markup.removeKeyboard()
        );
        await ctx.scene.enter('greeting');
      }
    });
    eventLookingFor.on('message', async (ctx) => {
      await ctx.reply(
        '–û–±–µ—Ä–∏ –∫–æ–≥–æ –±–∞–∂–∞—î—à –∑–∞–ø—Ä–æ—Å–∏—Ç–∏',
        Markup.keyboard([['–î—ñ–≤—á–∏–Ω—É', '–•–ª–æ–ø—Ü—è', '–ë—É–¥—å-–∫–æ–≥–æ']]).resize()
      );
    });
    return eventLookingFor;
  }
  // eventAgeRangeScene(): Scenes.BaseScene<MySceneContext> {
  //   const eventAgeRange = new Scenes.BaseScene<MySceneContext>('eventAgeRange');
  //   eventAgeRange.enter(async (ctx) => {
  //     ctx.reply(
  //       '–Ø–∫–∏–π –≤—ñ–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω?',
  //       Markup.keyboard([['18-20', '20-22', '22-25', '–ë—É–¥—å-—è–∫–∏–π']]).resize()
  //     );
  //   });
  //   this.addCommands(eventAgeRange);
  //   const handleAgeRange = async (ctx: MySceneContext, ageRange: string) => {
  //     this.event.ageRange = ageRange;
  //     await ctx.reply(
  //       `–ë—ñ–Ω–≥–æ! –û—á—ñ–∫—É–π –Ω–∞ —Å–≤—ñ–π perfect match —Ç–∞ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–π —á–∞—Å )`,
  //       Markup.removeKeyboard()
  //     );
  //     await this.saveEventToDatabase(this.event);
  //   };

  //   eventAgeRange.hears('18-20', async (ctx) => {
  //     await handleAgeRange(ctx, '18-20');
  //   });

  //   eventAgeRange.hears('20-22', async (ctx) => {
  //     await handleAgeRange(ctx, '20-22');
  //   });

  //   eventAgeRange.hears('22-25', async (ctx) => {
  //     await handleAgeRange(ctx, '22-25');
  //   });

  //   eventAgeRange.hears('–ë—É–¥—å-—è–∫–∏–π', async (ctx) => {
  //     await handleAgeRange(ctx, '–ë—É–¥—å-—è–∫–∏–π');
  //   });
  //   eventAgeRange.on('message', async (ctx) => {
  //     await ctx.reply('–û–±–µ—Ä–∏ –≤—ñ–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω');
  //   });

  //   return eventAgeRange;
  // }

  eventListScene(): Scenes.BaseScene<MySceneContext> {
    const eventList = new Scenes.BaseScene<MySceneContext>('eventList');
    let currentEventIndex = 0;
    //let currentUserIndex = 0;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let events: any;
    eventList.enter(async (ctx) => {
      const userForm = await this.getUserFormDataFromDatabase(ctx.from!.id);
      if (userForm) {
        events = await this.getEventsFromDatabase(
          userForm.userId,
          userForm.gender
        );
        await ctx.reply(`üçæ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –ø–æ—à—É–∫ –ø–æ–¥—ñ–π...

–°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—å, –≤–∏ —á—É–¥–æ–≤–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ —á–∞—Å.
        
üëÄ –ù–∞–≥–∞–¥–∞—î–º–æ, —â–æ —Ç—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ —Ü—ñ–∫–∞–≤—É –¥–ª—è —Å–µ–±–µ –ø–æ–¥—ñ—é —Ç–∞ –ø—ñ—Ç–∏ –Ω–∞ –Ω–µ—ó –∑ —Ç–∏–º, —Ö—Ç–æ —Å—Ç–≤–æ—Ä–∏–≤ —Ü—é –ø–æ–¥—ñ—é!`);
        currentEventIndex = 0;
        this.userForm.userId = ctx.from!.id;
        if (events && events.length > 0) {
          await ctx.reply('–°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π üëáüèª', Markup.removeKeyboard());
          await this.showEvent(events, currentEventIndex, ctx);
        } else {
          await ctx.reply(
            '–ë—ñ–ª—å—à–µ –ø–æ–¥—ñ–π –Ω–µ–º–∞—î, –º–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É',
            Markup.removeKeyboard()
          );
        }
        await this.registerUserLastActivity(userForm.userId);
      } else {
        await ctx.reply(
          '–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–¥—ñ—ó —Å—Ç–≤–æ—Ä–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å',
          Markup.removeKeyboard()
        );
        await ctx.scene.enter('greeting');
      }
    });

    eventList.action('nextEvent', async (ctx) => {
      currentEventIndex++;
      await this.showEvent(events, currentEventIndex, ctx);
      await ctx.editMessageReplyMarkup(undefined);
    });
    const regex = new RegExp(/^inviteToEvent:(.*)$/);
    eventList.action(regex, async (ctx) => {
      const eventUserId = +ctx.match[1];
      const eventUser = await this.getUserFormDataFromDatabase(eventUserId);
      if (eventUser) {
        const event = await this.getEventFromDatabase(eventUserId);
        if (event) {
          await ctx.editMessageReplyMarkup(undefined);
          const caption =
            `*–Ü–º'—è:* ${eventUser.username}
*–í—ñ–∫:* ${eventUser.age}
*–ú—ñ—Å—Ç–æ:* ${eventUser.location}` +
            (eventUser.about ? `\n\n*–ü—Ä–æ —Å–µ–±–µ:* ${eventUser.about}` : '');
          await ctx.reply('–Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é üëáüèª');
          await ctx.replyWithPhoto(eventUser.photoId, {
            caption,
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['‚ù§Ô∏è', 'üëé']],
              resize_keyboard: true,
            },
          });
          eventList.hears('‚ù§Ô∏è', async (ctx) => {
            const userForm = await this.getUserFormDataFromDatabase(
              ctx.from.id
            );
            if (userForm) {
              let username = ctx.from?.username;
              if (username) {
                username = '@' + username;
              }
              const userId = ctx.from!.id;
              const userLink = `tg://user?id=${userId}`;
              const mentionMessage =
                username || `[${ctx.from?.first_name}](${userLink})`;
              const userAbout = userForm.about ? `, ${userForm.about}` : '';
              const eventAbout = event.about ? `, ${event.about}` : '';
              await ctx.telegram.sendPhoto(eventUserId, userForm.photoId, {
                caption: `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –±–∞–∂–∞—î –ø—ñ—Ç–∏ –∑ —Ç–æ–±–æ—é –Ω–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É —Ç–æ–±–æ—é –ø–æ–¥—ñ—é:

üßòüèº*–ö—Ä–∞—à:* ${userForm.username}, ${userForm.age}, ${userForm.location}${userAbout}

üéü *–ü–æ–¥—ñ—è:* ${event.eventName}, ${event.date}${eventAbout}`,
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: '‚ù§Ô∏è',
                        callback_data: `likeEvent:${userId}:${mentionMessage}`,
                      },
                      {
                        text: 'üëé',
                        callback_data: `dislikeEvent`,
                      },
                    ],
                  ],
                },
              });
              await ctx.reply(
                `–°—É–ø–µ—Ä! –û—á—ñ–∫—É–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞ –ø–æ–¥—ñ—ó ü•≥ –ë–∞–∂–∞—é –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å üëã`,
                Markup.removeKeyboard()
              );
            } else {
              await ctx.reply('–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É');
              await ctx.scene.enter('greeting');
            }
          });
          eventList.hears('üëé', async (ctx) => {
            await ctx.reply('–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —à—É–∫–∞—Ç–∏...');
            currentEventIndex++;
            await this.showEvent(events, currentEventIndex, ctx);
          });
        } else {
          await ctx.reply('–£–ø—Å... –°—Ö–æ–∂–µ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞');
        }
      } else {
        await ctx.reply('–£–ø—Å... –°—Ö–æ–∂–µ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞');
      }

      // Intive to event code
      // currentUserIndex = 0;
      // const userId = ctx.from!.id;
      // const eventName = ctx.match[1];
      // const eventDate = ctx.match[2];
      // try {
      //   const userFormData = await this.getUserFormDataFromDatabase(userId);
      //   if (userFormData) {
      //     Object.assign(this.userForm, userFormData);
      //   }
      //   // eslint-disable-next-line @typescript-eslint/no-explicit-any
      //   const query: any = {
      //     userId: { $ne: userId },
      //     actualLocation: this.userForm.actualLocation,
      //     gender:
      //       this.userForm.lookingFor === 'both'
      //         ? { $in: ['male', 'female'] }
      //         : this.userForm.lookingFor,
      //     lookingFor: { $in: [this.userForm.gender, 'both'] },
      //   };
      //   await this.client.connect();
      //   const db = this.client.db('cluster0');
      //   const userMatchForms = await db
      //     .collection('users')
      //     .find(query)
      //     .toArray();
      //   await this.sendUserDetails(
      //     userMatchForms as unknown as UserForm[],
      //     currentUserIndex,
      //     ctx
      //   );
      //   eventList.hears('‚ù§Ô∏è', async () => {
      //     currentUserIndex++;
      //     this.sendUserDetails(
      //       userMatchForms as unknown as UserForm[],
      //       currentUserIndex,
      //       ctx
      //     );
      //     if (currentUserIndex > 0) {
      //       const previousUser = userMatchForms[currentUserIndex - 1];
      //       const previousUserId = previousUser.userId;
      //       try {
      //         let username = ctx.from?.username;
      //         if (username) {
      //           username = '@' + username;
      //         }
      //         const userId = ctx.from!.id;
      //         const userLink = `tg://user?id=${userId}`;
      //         const mentionMessage =
      //           username || `[${ctx.from?.first_name}](${userLink})`;
      //         const userForm = await this.getUserFormDataFromDatabase(userId);
      //       if (userForm) {
      //         await ctx.telegram.sendPhoto(previousUserId, userForm.photoId, {
      //           caption: `${this.userForm.username}, ${this.userForm.age}, ${this.userForm.location}, —Ö–æ—á–µ –ø—ñ—Ç–∏ –∑ —Ç–æ–±–æ—é –Ω–∞ –ø–æ–¥—ñ—é ${eventName} ${eventDate}. –û–±–≥–æ–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—ñ —Ç–∞ –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ–¥—ñ—Ç—å —Ü–µ–π —á–∞—Å üëã`,
      //           parse_mode: 'Markdown',
      //           reply_markup: {
      //             inline_keyboard: [
      //               [
      //                 {
      //                   text: '‚ù§Ô∏è',
      //                   callback_data: `likeEvent:${userId}:${mentionMessage}`,
      //                 },
      //                 {
      //                   text: 'üëé',
      //                   callback_data: `dislikeEvent:${userId}:${ctx.from?.username}`,
      //                 },
      //               ],
      //             ],
      //           },
      //         });
      //         await ctx.reply(
      //           `–°—É–ø–µ—Ä! –û—á—ñ–∫—É–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞ –ø–æ–¥—ñ—ó ü•≥ –ë–∞–∂–∞—é –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å üëã`,
      //           Markup.removeKeyboard()
      //         );
      //       }
      //     } catch (error) {
      //       console.error('Error sending notification:', error);
      //     }
      //   }
      // });
      // eventList.hears('üëé', () => {
      //   currentUserIndex++;
      //   this.sendUserDetails(
      //     userMatchForms as unknown as UserForm[],
      //     currentUserIndex,
      //     ctx
      //   );
      // });
      // } catch (error) {
      //   console.error('Error getting userForm data from db', error);
      // } finally {
      //   await this.client.close();
      // }
    });
    this.addCommands(eventList);
    eventList.on('message', async (ctx) => {
      await ctx.reply('–û–±–µ—Ä–∏ –ø–æ–¥—ñ—é –Ω–∞ —è–∫—É –±–∞–∂–∞—î—à –ø—ñ—Ç–∏');
    });
    return eventList;
  }
  private reportedUserId: number | undefined = undefined;
  lookForMatchScene(): Scenes.BaseScene<MySceneContext> {
    const lookForMatch = new Scenes.BaseScene<MySceneContext>('lookForMatch');
    let currentUserIndex = 0;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let userMatchForms: any;
    lookForMatch.enter(async (ctx) => {
      const userFormData = await this.getUserFormDataFromDatabase(ctx.from!.id);
      if (userFormData && userFormData.banExpirationDate) {
        await ctx.reply('–¢–∏ –≤ –±–∞–Ω—ñ');
        return;
      }
      currentUserIndex = 0;
      if (userFormData) {
        Object.assign(this.userForm, userFormData);
        await this.registerUserLastActivity(userFormData.userId);
        await ctx.reply(
          `üë´ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫...

–°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—å, —Ç–∏ –∑–Ω–∞–π–¥–µ—à —Å–≤–æ–≥–æ –∫—Ä–∞—à–∞
            
üëÄ –ü–∞–º —è—Ç–∞–π—Ç–µ, —â–æ –ª—é–¥–∏ –≤ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ —Ç–∏–º–∏, –∑–∞ –∫–æ–≥–æ —Å–µ–±–µ –≤–∏–¥–∞—é—Ç—å`,
          Markup.keyboard([['‚ù§Ô∏è', 'üëé', '–°–∫–∞—Ä–≥–∞']]).resize()
        );
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        await this.client.connect();
        const db = this.client.db('cluster0');
        this.userForm.isActive = true;
        await db
          .collection('users')
          .updateOne({ userId: ctx.from!.id }, { $set: { isActive: true } });
        const viewQuery = [
          {
            $match: {
              viewerUserId: this.userForm.userId,
            },
          },
          {
            $group: {
              _id: null,
              viewedUserIds: { $addToSet: '$viewedUserId' },
            },
          },
        ];

        const aggregationResult = await db
          .collection('viewed_profiles')
          .aggregate(viewQuery)
          .toArray();
        let distinctViewedUserIds = [];
        if (aggregationResult.length > 0) {
          distinctViewedUserIds = aggregationResult[0].viewedUserIds;
        }
        const query = {
          $and: [
            {
              userId: { $ne: this.userForm.userId },
              actualLocation: this.userForm.actualLocation,
              gender:
                this.userForm.lookingFor === 'both'
                  ? { $in: ['male', 'female'] }
                  : this.userForm.lookingFor,
              lookingFor: { $in: [this.userForm.gender, 'both'] },
              isActive: true,
            },
            { userId: { $nin: distinctViewedUserIds } },
          ],
        };
        userMatchForms = await db.collection('users').find(query).toArray();
        await this.sendUserDetails(
          userMatchForms as unknown as UserForm[],
          currentUserIndex,
          ctx
        );
      } else {
        await ctx.reply(
          '–©–æ–± –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –Ω–µ–æ–±—Ö—ñ–æ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π',
          Markup.removeKeyboard()
        );
        await ctx.scene.enter('greeting');
      }
    });
    lookForMatch.hears('‚ù§Ô∏è', async (ctx) => {
      await this.registerUserLastActivity(this.userForm.userId);
      if (
        !this.userForm.isPremium &&
        this.userForm.likesSentCount >= MAX_LIKES_LIMIT
      ) {
        await ctx.reply(
          '–í–∏–±–∞—á, –∞–ª–µ —Ç–∏ –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –ª–∞–π–∫—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ, –∫—É–ø–∏ –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫—É –∞–±–æ –ø–æ—á–µ–∫–∞–π –¥–æ –∑–∞–≤—Ç—Ä–∞'
        );
        return;
      }
      if (!this.userForm.isPremium) {
        this.userForm.likesSentCount++;
        await this.client.connect();
        const db = this.client.db('cluster0');
        await db
          .collection('users')
          .updateOne(
            { userId: this.userForm.userId },
            { $set: { likesSentCount: this.userForm.likesSentCount } }
          );
      }
      currentUserIndex++;
      await this.sendUserDetails(
        userMatchForms as unknown as UserForm[],
        currentUserIndex,
        ctx
      );
      if (currentUserIndex > 0) {
        const previousUser = userMatchForms[currentUserIndex - 1];
        const previousUserId = previousUser.userId;
        try {
          const viewerUserId = this.userForm.userId;
          if (previousUserId) {
            await this.client.connect();
            const db = this.client.db('cluster0');
            await db.collection('viewed_profiles').insertOne({
              viewerUserId: viewerUserId,
              viewedUserId: previousUserId,
              expiryTimestamp: new Date(Date.now() + 10 * 1000),
            });
          }
          let username = ctx.from?.username;
          if (username) {
            username = '@' + username;
          }
          const userId = ctx.from!.id;
          const userLink = `tg://user?id=${userId}`;
          const mentionMessage =
            username || `[${ctx.from?.first_name}](${userLink})`;
          const userForm = await this.getUserFormDataFromDatabase(userId);
          if (userForm) {
            //             let message = `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –ø–æ—Å—Ç–∞–≤–∏–≤ –≤–ø–æ–¥–æ–±–∞–π–∫—É —Ç–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—é
            // üßòüèº*–ö—Ä–∞—à:* ${this.userForm.username}, ${this.userForm.age}, ${this.userForm.location}`;
            //             if (userForm.about) {
            //               message = message + `, ${userForm.about}`;
            //             }
            await ctx.telegram.sendMessage(
              previousUserId,
              `üëÄ–û–¥–∏–Ω –∫—Ä–∞—à –ø–æ—Å—Ç–∞–≤–∏–≤ –≤–ø–æ–¥–æ–±–∞–π–∫—É —Ç–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö—Ç–æ —Ü–µ –ø–µ—Ä–µ–π–¥–∏ —É *–∞—Ä—Ö—ñ–≤ –ª–∞–π–∫—ñ–≤* üóÑ`,
              {
                parse_mode: 'Markdown',
                reply_markup: {
                  keyboard: [['üóÑ –ü–µ—Ä–µ–π—Ç–∏ —É –∞—Ä—Ö—ñ–≤']],
                  resize_keyboard: true,
                },
              }
            );
            //await ctx.telegram.sendMediaGroup(previousUserId, mediaGroup);
            await this.client.connect();
            const db = this.client.db('cluster0');
            await db.collection('matches').insertOne({
              senderId: userId,
              receiverId: previousUserId,
              senderMentionMessage: mentionMessage,
            });
            // await ctx.telegram.sendPhoto(previousUserId, userForm.photoId, {
            //   caption: message,
            //   parse_mode: 'Markdown',
            //   reply_markup: {
            //     inline_keyboard: [
            //       [
            //         {
            //           text: '‚ù§Ô∏è',
            //           callback_data: `like:${userId}:${mentionMessage}`,
            //         },
            //         {
            //           text: 'üëé',
            //           callback_data: `dislike`,
            //         },
            //       ],
            //     ],
            //   },
            // });
            // await ctx.reply(
            //   `–°—É–ø–µ—Ä! –û—á—ñ–∫—É–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞ –ø–æ–¥—ñ—ó ü•≥ –ë–∞–∂–∞—é –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å üëã`
            // , Markup.removeKeyboard());
          }
          // await ctx.telegram.sendMessage(
          //   previousUserId,
          //   `${this.userForm.username} –∑–∞–ø—Ä–æ—à—É—î —Ç–µ–±–µ –Ω–∞ –ø–æ–¥—ñ—é ${eventName} ${eventDate}. –û–±–≥–æ–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—ñ...`,
          //   {
          //     parse_mode: 'Markdown',
          //     reply_markup: {
          //       inline_keyboard: [
          //         [
          //           {
          //             text: '‚ù§Ô∏è',
          //             callback_data: `like:${userId}:${mentionMessage}`,
          //           },
          //           {
          //             text: 'üëé',
          //             callback_data: `dislike:${userId}:${
          //               ctx.from!.username
          //             }`,
          //           },
          //         ],
          //       ],
          //     },
          //   }
          // );
        } catch (error) {
          console.error('Error sending notification:', error);
        }
      }

      //         const regex = /^(like|dislike):(.+)$/;
      //         userEvents.action(regex, async (ctx) => {
      //           console.log('in userEvents');
      //           const actionType = ctx.match[1]; // 'like' or 'dislike'
      //           const initiatorUserId = ctx.match[2]; // User ID of the initiator
      //           const initiatorUsername = ctx.match[3]; // Username of the initiator
      //           if (actionType === 'like') {
      //             // Notify the sender about the ‚ù§Ô∏è
      //             try {
      //               await ctx.telegram.sendMessage(
      //                 initiatorUserId,
      //                 `@${
      //                   ctx.from!.username
      //                 } –ø—Ä–∏–π–Ω—è–≤ –≤–∞—à–µ —Ç–≤–æ—î –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é ${eventName} ${eventDate}. –û–±–≥–æ–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—ñ...`
      //               );
      //               await ctx.reply(`@${initiatorUsername}
      // –¢–∏ –ø—Ä–∏–π–Ω—è–≤ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é ü•≥. –ë–∞–∂–∞—é –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å üëã`);
      //             } catch (error) {
      //               console.error('Error sending notification:', error);
      //             }
      //           }
      //         });
    });
    lookForMatch.hears('üëé', async (ctx) => {
      await this.registerUserLastActivity(ctx.from.id);
      currentUserIndex++;
      await this.sendUserDetails(
        userMatchForms as unknown as UserForm[],
        currentUserIndex,
        ctx
      );
      if (currentUserIndex > 0) {
        const previousUser = userMatchForms[currentUserIndex - 1];
        const previousUserId = previousUser.userId;
        const viewerUserId = this.userForm.userId;
        if (previousUserId) {
          await this.client.connect();
          const db = this.client.db('cluster0');
          await db.collection('viewed_profiles').insertOne({
            viewerUserId: viewerUserId,
            viewedUserId: previousUserId,
            expiryTimestamp: new Date(Date.now() + 10 * 1000),
          });
        }
      }
    });
    lookForMatch.hears('–°–∫–∞—Ä–≥–∞', async (ctx) => {
      this.reportedUserId = userMatchForms[currentUserIndex]?.userId;
      ctx.scene.enter('complaint');
      currentUserIndex++;
      // await this.sendUserDetails(
      //   userMatchForms as unknown as UserForm[],
      //   currentUserIndex,
      //   ctx
      // );
    });
    this.addCommands(lookForMatch);
    lookForMatch.on('message', async (ctx) => {
      await ctx.reply(
        '‚ù§Ô∏è ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è, üëé ‚Äî —è–∫—â–æ –Ω—ñ, —Å–∫–∞—Ä–≥–∞ ‚Äî —è–∫—â–æ –ª—é–¥–∏–Ω–∞, –Ω–∞ —Ç–≤–æ—é –¥—É–º–∫—É, –ø–æ–≥–∞–Ω–æ —Å–µ–±–µ –≤–µ–¥–µ. –í—Å–µ –ø—Ä–æ—Å—Ç–æ üòâ'
      );
    });
    return lookForMatch;
  }

  complaintScene(): Scenes.BaseScene<MySceneContext> {
    const complaint = new Scenes.BaseScene<MySceneContext>('complaint');
    complaint.enter(async (ctx) => {
      if (!this.reportedUserId) {
        await ctx.reply(
          '–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É'
        );
        await this.client.connect();
        const db = this.client.db('cluster0');
        await db.collection('viewed_profiles').insertOne({
          viewerUserId: ctx.from!.id,
          viewedUserId: this.reportedUserId,
          expiryTimestamp: new Date(Date.now() + 10 * 1000),
        });
        this.reportedUserId = undefined;
        await ctx.scene.leave();
        return;
      }
      await ctx.reply(
        `–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º, –≤–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Ä–≥–∏`,
        Markup.keyboard([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']])
          .oneTime()
          .resize()
      );
    });
    const handleComplaint = async (
      ctx: MySceneContext,
      complaintDescription: string
    ) => {
      await this.client.connect();
      const db = this.client.db('cluster0');
      const existingComplaint = await db
        .collection('complaints')
        .findOne({ userId: this.reportedUserId });

      const updateData = {
        $inc: { complaintsNum: 1 },
        $push: { descriptions: complaintDescription },
      };

      if (!existingComplaint) {
        await db.collection('complaints').insertOne({
          userId: this.reportedUserId,
          complaintsNum: 1,
          descriptions: [complaintDescription],
        });
      } else {
        await db
          .collection('complaints')
          .updateOne({ userId: this.reportedUserId }, updateData);
      }

      await ctx.reply(
        '–í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —Å–∫–∞—Ä–≥—É –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å. –î—è–∫—É—î–º–æ –∑–∞ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –º–∏ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—å –∑ –ø–æ—Ä—É—à–Ω–∏–∫–æ–º üëÆ‚Äç‚ôÇÔ∏è',
        Markup.removeKeyboard()
      );
      await db.collection('viewed_profiles').insertOne({
        viewerUserId: ctx.from!.id,
        viewedUserId: this.reportedUserId,
        expiryTimestamp: new Date(Date.now() + 10 * 1000),
      });
      this.reportedUserId = undefined;
      await ctx.scene.enter('lookForMatch');
    };

    complaint.hears('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', async (ctx) => {
      await handleComplaint(ctx, '');
    });
    this.addCommands(complaint);

    complaint.on('text', async (ctx) => {
      const complaintDescription = ctx.message.text;
      await handleComplaint(ctx, complaintDescription);
    });

    return complaint;
  }

  likeArchiveScene(): Scenes.BaseScene<MySceneContext> {
    const likeArchive = new Scenes.BaseScene<MySceneContext>('likeArchive');
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let matches: any[];
    let currentIndex = 0;
    likeArchive.enter(async (ctx) => {
      currentIndex = 0;
      await this.client.connect();
      const db = this.client.db('cluster0');
      const userForm = (await db
        .collection('users')
        .findOne({ userId: ctx.from!.id })) as unknown as UserForm;
      Object.assign(this.userForm, userForm);
      matches = await db
        .collection('matches')
        .find({ receiverId: ctx.from!.id })
        .toArray();
      if (matches.length > 0) {
        await ctx.reply(`–ö—ñ–ª—å–∫—ñ—Ç—å —Ç–≤–æ—ó—Ö –≤–ø–æ–¥–æ–±–∞–Ω—å ‚Äî *${matches.length}*`, {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['‚ù§Ô∏è', 'üëé']],
            resize_keyboard: true,
          },
        });
        const user = await db
          .collection('users')
          .findOne({ userId: matches[currentIndex].senderId });
        if (user) {
          const caption =
            `*–Ü–º'—è:* ${user.username}
*–í—ñ–∫:* ${user.age}
*–ú—ñ—Å—Ç–æ:* ${user.location}` +
            (user.about ? `\n\n*–ü—Ä–æ —Å–µ–±–µ:* ${user.about}` : '');
          const mediaGroup: InputMediaPhoto[] = user.photoIds.map(
            (photoId: string, index: number) => ({
              type: 'photo',
              media: photoId,
              caption: index === 0 ? caption : undefined,
              parse_mode: index === 0 ? 'Markdown' : undefined,
            })
          );
          await ctx.replyWithMediaGroup(mediaGroup);
          currentIndex++;
        } else {
          await ctx.reply(
            `–°—Ö–æ–∂–µ —Ü–µ –≤—Å–µ\n\n –ú–æ–∂–µ—à —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\nüë´ ‚Äî –†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫\nüë§ ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å`,
            Markup.keyboard([['üë´', 'üë§']])
              .oneTime()
              .resize()
          );
        }
      } else {
        await ctx.reply(
          `–°—Ö–æ–∂–µ —Ç–µ–±–µ —â–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –≤–ø–æ–¥–æ–±–∞–≤\n\n –ú–æ–∂–µ—à —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\nüë´ ‚Äî –†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫\nüë§ ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å`,
          Markup.keyboard([['üë´', 'üë§']])
            .oneTime()
            .resize()
        );
      }
    });
    likeArchive.hears('‚ù§Ô∏è', async (ctx) => {
      const caption =
        `*–Ü–º'—è:* ${this.userForm.username}
*–í—ñ–∫:* ${this.userForm.age}
*–ú—ñ—Å—Ç–æ:* ${this.userForm.location}` +
        (this.userForm.about ? `\n\n*–ü—Ä–æ —Å–µ–±–µ:* ${this.userForm.about}` : '');
      const mediaGroup: InputMediaPhoto[] = this.userForm.photoIds.map(
        (photoId: string, index: number) => ({
          type: 'photo',
          media: photoId,
          caption: index === 0 ? caption : undefined,
          parse_mode: index === 0 ? 'Markdown' : undefined,
        })
      );
      let username = ctx.from?.username;
      if (username) {
        username = '@' + username;
      }
      const userId = ctx.from!.id;
      const userLink = `tg://user?id=${userId}`;
      const mentionMessage =
        username || `[${ctx.from?.first_name}](${userLink})`;
      await ctx.reply(
        `–ë–∞–∂–∞—î–º–æ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${
          matches[currentIndex - 1].senderMentionMessage
        }`,
        {
          parse_mode: 'Markdown',
        }
      );
      await ctx.telegram.sendMediaGroup(
        matches[currentIndex - 1].senderId,
        mediaGroup
      );
      await ctx.telegram.sendMessage(
        matches[currentIndex - 1].senderId,
        `–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫. –ë–∞–∂–∞—î–º–æ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${mentionMessage}`,
        {
          parse_mode: 'Markdown',
        }
      );
      await this.client.connect();
      const db = this.client.db('cluster0');
      await db.collection('matches').deleteMany({
        $or: [
          {
            senderId: this.userForm.userId,
            receiverId: matches[currentIndex - 1].senderId,
          },
          {
            senderId: matches[currentIndex - 1].senderId,
            receiverId: this.userForm.userId,
          },
        ],
      });
      if (matches.length > currentIndex) {
        const user = await db
          .collection('users')
          .findOne({ userId: matches[currentIndex].senderId });
        if (user) {
          const caption =
            `*–Ü–º'—è:* ${user.username}
  *–í—ñ–∫:* ${user.age}
  *–ú—ñ—Å—Ç–æ:* ${user.location}` +
            (user.about ? `\n\n*–ü—Ä–æ —Å–µ–±–µ:* ${user.about}` : '');
          const mediaGroup: InputMediaPhoto[] = user.photoIds.map(
            (photoId: string, index: number) => ({
              type: 'photo',
              media: photoId,
              caption: index === 0 ? caption : undefined,
              parse_mode: index === 0 ? 'Markdown' : undefined,
            })
          );
          await ctx.replyWithMediaGroup(mediaGroup);
          currentIndex++;
        }
      } else {
        await ctx.reply(
          `–°—Ö–æ–∂–µ —Ü–µ –≤—Å–µ\n\n –ú–æ–∂–µ—à —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\nüë´ ‚Äî –†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫\nüë§ ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å`,
          Markup.keyboard([['üë´', 'üë§']])
            .oneTime()
            .resize()
        );
      }
    });
    likeArchive.hears('üëé', async (ctx) => {
      await this.client.connect();
      const db = this.client.db('cluster0');
      const user = await db
        .collection('users')
        .findOne({ userId: matches[currentIndex].senderId });
      if (user) {
        const caption =
          `*–Ü–º'—è:* ${user.username}
*–í—ñ–∫:* ${user.age}
*–ú—ñ—Å—Ç–æ:* ${user.location}` +
          (user.about ? `\n\n*–ü—Ä–æ —Å–µ–±–µ:* ${user.about}` : '');
        const mediaGroup: InputMediaPhoto[] = user.photoIds.map(
          (photoId: string, index: number) => ({
            type: 'photo',
            media: photoId,
            caption: index === 0 ? caption : undefined,
            parse_mode: index === 0 ? 'Markdown' : undefined,
          })
        );
        await ctx.replyWithMediaGroup(mediaGroup);
        currentIndex++;
      } else {
        await ctx.reply(
          `–°—Ö–æ–∂–µ —Ü–µ –≤—Å–µ\n\n –ú–æ–∂–µ—à —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\nüë´ ‚Äî –†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫\nüë§ ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å`,
          Markup.keyboard([['üë´', 'üë§']])
            .oneTime()
            .resize()
        );
      }
    });
    likeArchive.hears('üë´', async (ctx) => {
      await ctx.scene.enter('lookForMatch');
    });
    likeArchive.hears('üë§', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    this.addCommands(likeArchive);
    return likeArchive;
  }

  moderateScene(): Scenes.BaseScene<MySceneContext> {
    const moderate = new Scenes.BaseScene<MySceneContext>('moderate');
    let currentIndex = 0;
    let reportedUsers: UserForm[] = [];
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let complaints: any[] = [];
    moderate.enter(async (ctx) => {
      currentIndex = 0;
      await this.client.connect();
      const db = this.client.db('cluster0');
      complaints = await db.collection('complaints').find().toArray();
      const reportedUserIds = complaints.map((complaint) => complaint.userId);
      reportedUsers = (await db
        .collection('users')
        .find({
          userId: { $in: reportedUserIds },
        })
        .toArray()) as unknown as UserForm[];

      if (reportedUsers.length > 0) {
        await ctx.reply(`–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—É—à–Ω–∏–∫—ñ–≤ ‚Äî *${reportedUsers.length}*`, {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['–ó–∞–±–∞–Ω–∏—Ç–∏', '–ù–µ –≤–∏–Ω–Ω–∏–π']],
            resize_keyboard: true,
          },
        });
        const reportedUser = reportedUsers[currentIndex];
        const matchingComplaint = complaints.find(
          (complaint) => complaint.userId === reportedUser.userId
        );
        const complaintsNum = matchingComplaint
          ? matchingComplaint.complaintsNum
          : 0;
        await this.sendReportedProfile(
          ctx,
          reportedUser,
          complaintsNum,
          matchingComplaint.descriptions
        );
      } else {
        await ctx.reply('–ù–æ–≤–∏—Ö —Å–∫–∞—Ä–≥ –Ω–µ–º–∞—î', Markup.removeKeyboard());
      }
    });
    moderate.hears(['–ó–∞–±–∞–Ω–∏—Ç–∏', '–ù–µ –≤–∏–Ω–Ω–∏–π'], async (ctx) => {
      if (currentIndex >= reportedUsers.length) {
        await ctx.reply('–ü–æ—Ä—É—à–Ω–∏–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å', Markup.removeKeyboard());
        return;
      }

      const reportedUser = reportedUsers[currentIndex];
      const action = ctx.match?.[0] || '';

      if (action === '–ó–∞–±–∞–Ω–∏—Ç–∏') {
        await this.client.connect();
        const db = this.client.db('cluster0');
        const banData = await db
          .collection('bans')
          .findOne({ userId: reportedUser.userId });
        const banCount = banData ? banData.banCount : 0;
        const banDuration =
          banCount === 0
            ? 60 * 1000
            : banCount === 1
            ? 30 * 24 * 60 * 60 * 1000
            : 10 * 365 * 24 * 60 * 60 * 1000;
        const banExpirationDate = new Date(Date.now() + banDuration);
        await db.collection('bans').updateOne(
          { userId: reportedUser.userId },
          {
            $set: {
              banExpirationDate,
              banCount: banCount + 1,
            },
          },
          { upsert: true }
        );
      }

      currentIndex++;
      await this.client.connect();
      const db = this.client.db('cluster0');
      await db
        .collection('complaints')
        .deleteOne({ userId: reportedUser.userId });
      if (reportedUsers[currentIndex]) {
        const reportedUser = reportedUsers[currentIndex];
        const matchingComplaint = complaints.find(
          (complaint) => complaint.userId === reportedUser.userId
        );
        const complaintsNum = matchingComplaint
          ? matchingComplaint.complaintsNum
          : 0;
        await this.sendReportedProfile(
          ctx,
          reportedUsers[currentIndex],
          complaintsNum,
          matchingComplaint.descriptions
        );
      } else {
        await ctx.reply('–ü–æ—Ä—É—à–Ω–∏–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å', Markup.removeKeyboard());
      }
    });
    this.addCommands(moderate);

    return moderate;
  }

  showPremiumBenefitsScene(): Scenes.BaseScene<MySceneContext> {
    const premiumBenefits = new Scenes.BaseScene<MySceneContext>(
      'premiumBenefits'
    );
    premiumBenefits.enter(async (ctx) => {
      await ctx.reply(
        `–¢—É—Ç –º–∞—é—Ç—å –±—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–∞–≥ –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∏`,
        Markup.keyboard([['–ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º'], ['üîô –ù–∞–∑–∞–¥']])
          .oneTime()
          .resize()
      );
    });
    premiumBenefits.hears('–ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º', async (ctx) => {
      await ctx.scene.enter('premiumPeriod');
    });
    premiumBenefits.hears('üîô –ù–∞–∑–∞–¥', async (ctx) => {
      await ctx.scene.leave();
    });
    this.addCommands(premiumBenefits);
    premiumBenefits.on('message', async (ctx) => {
      await ctx.reply(
        `–¢–∏ –º–æ–∂–µ—à –∞–±–æ –∫—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥ üëáüèª`,
        Markup.keyboard([['–ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º'], ['üîô –ù–∞–∑–∞–¥']])
          .oneTime()
          .resize()
      );
    });
    return premiumBenefits;
  }

  choosePremiumPeriodScene(): Scenes.BaseScene<MySceneContext> {
    const premiumPeriod = new Scenes.BaseScene<MySceneContext>('premiumPeriod');
    premiumPeriod.enter(async (ctx) => {
      await ctx.reply(`–ó–ú–Ü–ù–ò–¢–ò –¶–ï–ô –¢–ï–ö–°–¢\nüìÖ –Ø–∫–∏–π –ø–µ—Ä—ñ–æ–¥ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å? –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞–∫—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:\n‚ú¶ 1 –º—ñ—Å—è—Ü—å - 100 –≥—Ä–∏–≤–µ–Ω—å\n‚ú¶ 6 –º—ñ—Å—è—Ü—ñ–≤ - 450 –≥—Ä–∏–≤–µ–Ω—å (75–≥—Ä–Ω/–º—ñ—Å—è—Ü—å) –∑–∞–º—ñ—Å—Ç—å 600\n‚ú¶ 1 —Ä—ñ–∫ - 600 –≥—Ä–∏–≤–µ–Ω—å (50–≥—Ä–Ω/–º—ñ—Å—è—Ü—å) –∑–∞–º—ñ—Å—Ç—å 1200\nüí∂ –û–ø–ª–∞—Ç–∞ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —Ä–∞–∑–æ–≤–æ, –ø—ñ—Å–ª—è —á–æ–≥–æ –ø—Ä–µ–º—ñ—É–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è.`, Markup.keyboard([['1 –º—ñ—Å—è—Ü—å', '6 –º—ñ—Å—è—Ü—ñ–≤', '1 —Ä—ñ–∫'], ['üîô –ù–∞–∑–∞–¥']]).oneTime().resize());
    });
    premiumPeriod.hears('1 –º—ñ—Å—è—Ü—å', async (ctx) => {
      await ctx.reply(`üìù –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É:\n‚Ä¢ –¢–µ—Ä–º—ñ–Ω: 1 –º—ñ—Å—è—Ü—å\n‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å: 100 –≥—Ä–∏–≤–µ–Ω—å\nüí∂ –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—é –ø—Ä–µ–º—ñ—É–º—É. –£ —Ä–∞–∑—ñ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É.`);
    });
    premiumPeriod.hears('6 –º—ñ—Å—è—Ü—ñ–≤', async (ctx) => {
      await ctx.reply(`üìù –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É:\n‚Ä¢ –¢–µ—Ä–º—ñ–Ω: 6 –º—ñ—Å—è—Ü—ñ–≤\n‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å: 450 –≥—Ä–∏–≤–µ–Ω—å\nüí∂ –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—é –ø—Ä–µ–º—ñ—É–º—É. –£ —Ä–∞–∑—ñ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É.`);
    });
    premiumPeriod.hears('1 —Ä—ñ–∫', async (ctx) => {
      await ctx.reply(`üìù –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É:\n‚Ä¢ –¢–µ—Ä–º—ñ–Ω: 1 —Ä—ñ–∫\n‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å: 600 –≥—Ä–∏–≤–µ–Ω—å\nüí∂ –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—é –ø—Ä–µ–º—ñ—É–º—É. –£ —Ä–∞–∑—ñ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É.`);
    });
    premiumPeriod.hears('üîô –ù–∞–∑–∞–¥', async (ctx) => {
      await ctx.scene.leave();
    });
    this.addCommands(premiumPeriod);
  
    return premiumPeriod;
  }
  

  paymentScene(): Scenes.BaseScene<MySceneContext> {
    const payment = new Scenes.BaseScene<MySceneContext>('payment');
    payment.enter(async (ctx) => {
      const userId = ctx.from!.id;
      const user = await this.getUserFormDataFromDatabase(userId);
      if (user && user.isPremium) {
        await ctx.reply('–¢–∏ –≤–∂–µ –º–∞—î—à –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫—É');
        return;
      } else {
        const merchantAccount = 't_me_bbcec';
        const orderReference = `ORDER_${Date.now()}_${userId}`;
        const orderDate = Math.floor(new Date().getTime() / 1000);
        const currency = 'UAH';
        const serviceUrl = this.configService.get('SERVICE_URL');
        const merchantDomainName = this.configService.get(
          'MERCHANT_DOMAIN_NAME'
        );
        const merchantSecretKey = this.configService.get('MERCHANT_SECRET_KEY');
        const productName = ['–ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞'];
        const productCount = [1];
        const productPrice = [1];
        const orderTimeout = 49000;
        const amount = productPrice.reduce((total, price, index) => {
          return total + price * productCount[index];
        }, 0);
        const merchantAuthType = 'SimpleSignature';

        const stringToSign = `${merchantAccount};${merchantDomainName};${orderReference};${orderDate};${amount};${currency};${productName};${productCount};${productPrice}`;

        const hmac = crypto.createHmac('md5', merchantSecretKey);
        hmac.update(stringToSign, 'utf-8');
        const merchantSignature = hmac.digest('hex');

        const paymentRequest = {
          transactionType: 'CREATE_INVOICE',
          merchantAccount,
          merchantAuthType,
          merchantDomainName,
          merchantSignature,
          apiVersion: 2,
          language: 'ua',
          serviceUrl,
          orderReference,
          orderDate,
          amount,
          currency,
          orderTimeout,
          productName,
          productPrice,
          productCount,
          paymentSystems:
            'card;googlePay;applePay;privat24;visaCheckout;masterPass',
        };
        axios
          .post('https://api.wayforpay.com/api', paymentRequest)
          .then(async (response) => {
            if (response.data.reason === 'Ok') {
              const invoiceUrl = response.data.invoiceUrl;
              await ctx.reply(
                `–ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –º—ñ—Å—è—Ü—å –∑–∞ 80 –≥—Ä–∏–≤–µ–Ω—å`,
                Markup.inlineKeyboard([
                  Markup.button.url('–ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É', invoiceUrl),
                ])
              );
            }
          })
          .catch((error) => {
            console.error('WayForPay Error:', error);
          });
      }
    });
    return payment;
  }

  donateScene(): Scenes.BaseScene<MySceneContext> {
    const donate = new Scenes.BaseScene<MySceneContext>('donate');
    donate.enter(async (ctx) => {
      await ctx.reply(
        `–©–æ–± —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ –Ω–∞—à –±–æ—Ç —Ç–∞ –∑–∞–ª—É—á–∞—Ç–∏ –±—ñ–ª—å—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±–∞–≥–∞—Ç–æ –∫–∞–≤–∏ —Ç–∞ –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫—ñ–≤ ü´†
          
–í–∞—à—ñ –≤–Ω–µ—Å–∫–∏ —Å–ø—Ä–∏—è—Ç–∏–º—É—Ç—å –¥–æ–≤—à—ñ–π –∂–∏—Ç—Ç—î–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ —è–∫ –±–æ—Ç–∞, —Ç–∞–∫ —ñ –π–æ–≥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤ )`,
        Markup.inlineKeyboard([
          Markup.button.url(
            'ü´∂üèª –ó—Ä–æ–±–∏—Ç–∏ –≤–Ω–µ—Å–æ–∫',
            'https://send.monobank.ua/jar/9dL7twbPY8'
          ),
        ])
      );
    });
    donate.on('message', async (ctx) => {
      await ctx.scene.enter('greeting');
    });
    return donate;
  }
  helpScene(): Scenes.BaseScene<MySceneContext> {
    const help = new Scenes.BaseScene<MySceneContext>('help');
    help.enter(async (ctx) => {
      await ctx.reply(
        `ü¶∏‚Äç‚ôÄÔ∏è –ú–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó?
      
–ü–∏—à–∏ –Ω–∞–º —Å—é–¥–∏ [–û–ª–µ–∫—Å—ñ–π](tg://user?id=546195130)`,
        { parse_mode: 'Markdown' }
      );
    });
    help.on('message', async (ctx) => {
      await ctx.scene.enter('greeting');
    });
    return help;
  }
  async sendReportedProfile(
    ctx: MySceneContext,
    reportedUser: UserForm,
    complaintsNum: number,
    descriptions: string[]
  ) {
    await this.client.connect();
    const db = this.client.db('cluster0');
    const banData = await db
      .collection('bans')
      .findOne({ userId: reportedUser.userId });
    const complaintsList = descriptions
      .map((complaint, index) => `*${index + 1})* ${complaint}`)
      .join('\n');
    const message = `–ù–∞ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥—ñ–π—à–ª–∞ —Å–∫–∞—Ä–≥–∞:
*–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫–∞—Ä–≥:* ${complaintsNum}
*–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–Ω—ñ–≤:* ${banData ? banData.banCount : 0}
*–Ü–º'—è:* ${reportedUser.username}
*–í—ñ–∫:* ${reportedUser.age}
*–ú—ñ—Å—Ç–æ:* ${reportedUser.location}
*–ü—Ä–æ —Å–µ–±–µ:* ${reportedUser.about}
 
*–ü—Ä–∏—á–∏–Ω–∏ —Å–∫–∞—Ä–≥:*
${complaintsList}`;
    const mediaGroup: InputMediaPhoto[] = reportedUser.photoIds.map(
      (photoId: string, index: number) => ({
        type: 'photo',
        media: photoId,
        caption: index === 0 ? message : undefined,
        parse_mode: index === 0 ? 'Markdown' : undefined,
      })
    );
    await ctx.replyWithMediaGroup(mediaGroup);
  }
  addCommands(scene: Scenes.BaseScene<MySceneContext>) {
    scene.command('start', async (ctx) => {
      await ctx.reply(`–í—ñ—Ç–∞—î–º–æ –≤ –∫–æ–º'—é–Ω—ñ—Ç—ñ Crush! üëãüèª

üíù Crush ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –±–æ—Ç –∑–Ω–∞–π–æ–º—Å—Ç–≤, —è–∫–∏–π –Ω–∞–ø–æ–≤–Ω–∏—Ç—å —Ç–≤–æ—î –∂–∏—Ç—Ç—è –ø—Ä–∏—î–º–Ω–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏. –í—ñ–Ω –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –Ω–∞ —è–∫—É—Å—å –ø–æ–¥—ñ—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É –≤ –ø–∞—Ä–∫—É, –∞ —Ç–∞–∫–æ–∂ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ö–∞–Ω—É –ª—é–¥–∏–Ω—É, –¥—Ä—É–≥–∞ –∞–±–æ –ø–æ–¥—Ä—É–≥—É!
      
–ö–æ–º–∞–Ω–¥–∞ crush‚Äô–∞ –º—ñ—Ü–Ω–æ –æ–±—ñ–π–Ω—è–ª–∞ —Ç–µ–±–µü´Ç`);
      await ctx.scene.enter('greeting');
    });
    scene.command('events', async (ctx) => {
      await ctx.scene.enter('eventList');
    });
    scene.command('people', async (ctx) => {
      await ctx.scene.enter('lookForMatch');
    });
    scene.command('help', async (ctx) => {
      await ctx.scene.enter('help');
    });
    scene.command('profile', async (ctx) => {
      await ctx.scene.enter('userform');
    });
    scene.command('donate', async (ctx) => {
      await ctx.scene.enter('donate');
    });
    scene.command('premium', async (ctx) => {
      await ctx.scene.enter('payment');
    });
    scene.hears('üë´ –ó–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫', async (ctx) => {
      await ctx.scene.enter('lookForMatch');
    });
    scene.hears('üçæ –ü–æ–¥—ñ—ó', async (ctx) => {
      await ctx.scene.enter('eventList');
    });
    scene.hears('üóÑ –ü–µ—Ä–µ–π—Ç–∏ —É –∞—Ä—Ö—ñ–≤', async (ctx) => {
      await ctx.scene.enter('likeArchive');
    });
    scene.command('premiumTest', async (ctx) => {
      // TEST FUNC DELETE IN PROD!!!!!
      const subscriptionDurationMs = 10 * 60 * 1000; // 10 min
      const premiumEndTime = new Date();
      premiumEndTime.setTime(premiumEndTime.getTime() + subscriptionDurationMs);
      await this.client.connect();
      const db = this.client.db('cluster0');
      await db.collection('users').updateOne(
        { userId: +this.configService.get('TG_MODERATOR_ID') },
        {
          $set: {
            isPremium: true,
            premiumEndTime: premiumEndTime,
            likesSentCount: 0,
          },
        }
      );
      ctx.telegram.sendMessage(
        this.configService.get('TG_MODERATOR_ID'),
        '–í —Ç–µ–±–µ —Ç–µ–ø–µ—Ä —î –ø—Ä–µ–º—ñ—É–º'
      );
    });
  }

  async saveUserFormToDatabase(userForm: UserForm) {
    try {
      await this.client.connect();
      const userFormData = new UserFormModel<UserForm>(userForm);
      const db = this.client.db('cluster0');
      const user = await db
        .collection('users')
        .findOne({ userId: userForm.userId });
      if (user) {
        await db.collection('users').updateOne(
          { userId: userForm.userId },
          {
            $set: {
              // Cannot just pass an userFormdData obj as it causes error for some reason
              userId: userForm.userId,
              username: userForm.username,
              gender: userForm.gender,
              lookingFor: userForm.lookingFor,
              age: userForm.age,
              about: userForm.about,
              actualLocation: userForm.actualLocation,
              location: userForm.location,
              photoIds: userForm.photoIds,
              likesSentCount: userForm.likesSentCount,
              isActive: userForm.isActive,
              isPremium: userForm.isPremium,
              premiumEndTime: userForm.premiumEndTime,
              lastActive: userForm.lastActive,
            },
          }
        );
      } else {
        await db.collection('users').insertOne(userFormData);
      }
    } catch (error) {
      console.error('Error saving UserForm data:', error);
    } finally {
      await this.client.close();
    }
  }
  async saveEventToDatabase(event: Event) {
    try {
      await this.client.connect();
      const eventData = new EventModel<Event>(event);
      const db = this.client.db('cluster0');
      await db.collection('events').insertOne(eventData);
    } catch (error) {
      console.error('Error saving eventData data:', error);
    } finally {
      await this.client.close();
    }
  }
  async getUserFormDataFromDatabase(userId: number) {
    try {
      await this.client.connect();
      const db = this.client.db('cluster0');
      const userForm = await db.collection('users').findOne({ userId });
      return userForm;
    } catch (error) {
      console.error('Error getting userForm data from db', error);
    } finally {
      await this.client.close();
    }
  }
  async registerUserLastActivity(userId: number) {
    await this.client.connect();
    const db = this.client.db('cluster0');
    await db.collection('users').updateOne(
      { userId },
      {
        $set: {
          lastActive: new Date().toLocaleString(),
        },
      }
    );
  }
  async getEventsFromDatabase(userId: number, userGender: string) {
    try {
      await this.client.connect();
      const db = this.client.db('cluster0');
      const events = await db
        .collection('events')
        .find({
          userId: { $ne: userId },
          lookingFor: { $in: [userGender, 'both'] },
        })
        .toArray();
      return events;
    } catch (error) {
      console.error('Error getting events data from db', error);
    }
  }

  async getUserEventsFromDatabase(userId: number) {
    try {
      await this.client.connect();
      const db = this.client.db('cluster0');
      const events = await db
        .collection('events')
        .find({
          userId: userId,
        })
        .toArray();
      return events;
    } catch (error) {
      console.error('Error getting events data from db', error);
    }
  }
  async getEventFromDatabase(userId: number) {
    try {
      await this.client.connect();
      const db = this.client.db('cluster0');
      const event = await db.collection('events').findOne({
        userId: userId,
      });
      return event;
    } catch (error) {
      console.error('Error getting events data from db', error);
    }
  }

  async getUserCityFromCoordinates(latitude: number, longitude: number) {
    const apiUrl = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&language=uk-UA&key=${this.API_KEY}`;
    try {
      const response = await axios.get(apiUrl);
      if (response.data.results.length > 0) {
        const addressComponents = response.data.results[0].address_components;
        const cityComponent = addressComponents.find(
          (component: { types: string | string[] }) =>
            component.types.includes('locality')
        );

        if (cityComponent) {
          const cityName = cityComponent.long_name;
          return cityName;
        }
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      console.error('Error fetching user city:', error.message);
    }
  }
  async sendUserDetails(
    userArrayFromDB: UserForm[],
    currentIndex: number,
    ctx: MySceneContext
  ) {
    const user = userArrayFromDB[currentIndex];
    if (user) {
      const caption =
        `*–Ü–º'—è:* ${user.username}
*–í—ñ–∫:* ${user.age}
*–ú—ñ—Å—Ç–æ:* ${user.location}` +
        (user.about ? `\n\n*–ü—Ä–æ —Å–µ–±–µ:* ${user.about}` : '');
      const mediaGroup: InputMediaPhoto[] = user.photoIds.map(
        (photoId, index) => ({
          type: 'photo',
          media: photoId,
          caption: index === 0 ? caption : undefined,
          parse_mode: index === 0 ? 'Markdown' : undefined,
        })
      );
      await ctx.telegram.sendMediaGroup(ctx.from!.id, mediaGroup);
      return user;
    } else {
      await ctx.reply(
        '–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –ª—é–¥–µ–π, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∏',
        Markup.removeKeyboard()
      );
    }
  }
  async showEvent(events: Event[], currentIndex: number, ctx: MySceneContext) {
    const event = events[currentIndex];
    if (event) {
      const eventInitiatorId = event.userId.toString();
      const message = `–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó: ${event.eventName}\n–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø–æ–¥—ñ—ó: ${event.date}`;
      const inlineKeyboardMarkup = Markup.inlineKeyboard([
        Markup.button.callback(
          '‚úÖ –•–æ—á—É –ø—ñ—Ç–∏',
          `inviteToEvent:${eventInitiatorId}`
        ),
        Markup.button.callback('‚ùå –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–æ–¥—ñ—è', `nextEvent`),
      ]);

      if (event.about) {
        await ctx.reply(
          `${message}\n–î–µ—Ç–∞–ª—ñ: ${event.about}`,
          inlineKeyboardMarkup
        );
      } else {
        await ctx.reply(message, inlineKeyboardMarkup);
      }
    } else {
      await ctx.reply(
        '–ü–æ–¥—ñ–π, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∏, –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î, –º–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É',
        Markup.removeKeyboard()
      );
    }
  }
  async showUserEvent(
    events: Event[],
    currentIndex: number,
    ctx: MySceneContext
  ) {
    const event = events[currentIndex];
    if (event) {
      const message = `–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó: ${event.eventName}\n–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø–æ–¥—ñ—ó: ${event.date}`;
      const inlineKeyboardMarkup = Markup.inlineKeyboard([
        Markup.button.callback(
          '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥—ñ—é',
          `deleteEvent:${event.userId}`
        ),
      ]);

      if (event.about) {
        await ctx.reply(
          `${message}\n–î–µ—Ç–∞–ª—ñ: ${event.about}`,
          inlineKeyboardMarkup
        );
      } else {
        await ctx.reply(message, inlineKeyboardMarkup);
      }
    } else {
      await ctx.reply(
        '–ü–æ–¥—ñ–π –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î, –º–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É',
        Markup.removeKeyboard()
      );
    }
  }
}
